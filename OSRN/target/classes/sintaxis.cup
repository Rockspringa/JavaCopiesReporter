package edu.mooncoder.osrn.controllers.analyzer.syntax;

import edu.mooncoder.osrn.model.containers.Osrn;
import edu.mooncoder.osrn.controllers.wrapper.*;
import edu.mooncoder.osrn.controllers.analyzer.lexic.JsonLexer;

parser code {:
  private Osrn osrn;

  public Osrn getOsrn() { return osrn; }

  private void addError(int line, int col, String msg) {
    ErrorWrapper.add(line, col, msg);
  }

  public JsonParser(JsonLexer lexer) {
    super(lexer);
  }
:}

terminal String ID, LITERAL;
terminal int INT;
terminal CUR_IZQ, CUR_DER, BRA_IZQ, BRA_DER, COLON, COMMA;

non terminal syntax;
non terminal Object value;
non terminal OsrnWrapper pair, obj, content, array, array_;

start with syntax;

syntax     ::= content
               {: osrn = OsrnWrapper.close(); :}
               |
               {: OsrnWrapper.addEmpty(); osrn = OsrnWrapper.close(); :}
               ;

content    ::= CUR_IZQ obj CUR_DER
               |
               CUR_IZQ CUR_DER
               {: OsrnWrapper.addEmpty(); :}
               |
               error obj:get CUR_DER
               {: addError(getleft, getright, " << { >> antes del objeto."); :}
               |
               CUR_IZQ BRA_IZQ:get error
               {: addError(getleft, getright, " << } >> antes del arreglo."); :}
               ;

array      ::= BRA_IZQ array_ BRA_DER
               |
               BRA_IZQ BRA_DER
               {: ArrayWrapper.addEmpty(); :}
               ;

array_     ::= value:value
               {: ArrayWrapper.addFirst(value); :}
               |
               array_ COMMA value:value
               {: ArrayWrapper.add(value); :}
               |
               array_ COLON:get error
               {: addError(getleft, getright, "a << , >> o un << ] >>"); :}
               |
               array_ COMMA:comma error:get
               {: addError(getleft, getright, " <valor>"); :}
               ;

obj        ::= pair
               {: OsrnWrapper.addFirstPair(PairWrapper.getPair()); :}
               |
               obj COMMA pair
               {: OsrnWrapper.addPair(PairWrapper.getPair()); :}
               |
               obj COMMA error:get
               {: addError(getleft, getright, " << } >> o un <clave-valor>"); :}
               |
               obj error:get
               {: addError(getleft, getright, "a << , >>, << } >>"); :}
               ;

pair       ::= ID:key COLON value:value
               {: PairWrapper.setPair(key, value); :}
               |
               LITERAL:key COLON value:value
               {: PairWrapper.setPair(key, value); :}
               |
               ID error:get
               {: addError(getleft, getright, " << : >>"); :}
               |
               LITERAL error:get
               {: addError(getleft, getright, " << : >>"); :}
               |
               ID COLON:get error
               {: addError(getleft, getright, " <valor>"); :}
               |
               LITERAL COLON:get error
               {: addError(getleft, getright, " <valor>"); :}
               ;

value      ::= LITERAL:obj
               {: RESULT = obj; :}
               |
               INT:obj
               {: RESULT = obj; :}
               |
               content
               {: RESULT = OsrnWrapper.close(); :}
               |
               array
               {: RESULT = ArrayWrapper.close(); :}
               ;