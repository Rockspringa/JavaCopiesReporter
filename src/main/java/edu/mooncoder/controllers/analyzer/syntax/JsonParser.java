
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.mooncoder.controllers.analyzer.syntax;

import edu.mooncoder.model.containers.Osrn;
import edu.mooncoder.controllers.wrapper.*;
import edu.mooncoder.controllers.analyzer.lexic.JsonLexer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JsonParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tokens.class;
}

  /** Default constructor. */
  @Deprecated
  public JsonParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JsonParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JsonParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\006\005\000\002\006\004\000\002\006\005" +
    "\000\002\006\005\000\002\007\005\000\002\007\004\000" +
    "\002\010\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\005\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\004\000\002\004\004\000\002\004\005\000" +
    "\002\004\005\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\010\002\uffff\003\005\011\007\001\002\000" +
    "\004\002\056\001\002\000\006\004\010\005\011\001\002" +
    "\000\004\002\000\001\002\000\012\004\010\005\011\012" +
    "\013\013\012\001\002\000\006\003\052\015\053\001\002" +
    "\000\006\003\024\015\025\001\002\000\004\003\023\001" +
    "\002\000\016\002\ufffd\003\ufffd\012\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\001\002\000\010\003\017\012\020\016\016\001" +
    "\002\000\010\003\ufff4\012\ufff4\016\ufff4\001\002\000\010" +
    "\003\021\004\010\005\011\001\002\000\010\003\ufff1\012" +
    "\ufff1\016\ufff1\001\002\000\016\002\ufffe\003\ufffe\012\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\001\002\000\010\003\ufff2\012" +
    "\ufff2\016\ufff2\001\002\000\010\003\ufff3\012\ufff3\016\ufff3" +
    "\001\002\000\016\002\ufffb\003\ufffb\012\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\001\002\000\010\003\uffed\012\uffed\016\uffed" +
    "\001\002\000\020\003\035\005\026\006\027\007\030\010" +
    "\031\011\007\013\032\001\002\000\014\003\uffea\012\uffea" +
    "\014\uffea\015\uffea\016\uffea\001\002\000\014\003\uffe9\012" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\001\002\000\014\003\uffe8" +
    "\012\uffe8\014\uffe8\015\uffe8\016\uffe8\001\002\000\014\003" +
    "\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\001\002\000\022" +
    "\003\005\005\026\006\027\007\030\010\031\011\007\013" +
    "\032\014\041\001\002\000\014\003\uffe5\012\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\001\002\000\014\003\uffe6\012\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\001\002\000\014\003\uffeb\004\010" +
    "\005\011\012\uffeb\016\uffeb\001\002\000\010\003\uffef\012" +
    "\uffef\016\uffef\001\002\000\010\003\017\012\040\016\016" +
    "\001\002\000\016\002\ufffc\003\ufffc\012\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\001\002\000\014\003\ufff9\012\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\001\002\000\010\014\ufff8\015\ufff8\016" +
    "\ufff8\001\002\000\010\014\045\015\046\016\044\001\002" +
    "\000\020\003\050\005\026\006\027\007\030\010\031\011" +
    "\007\013\032\001\002\000\014\003\ufffa\012\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\001\002\000\004\003\047\001\002\000" +
    "\010\014\ufff6\015\ufff6\016\ufff6\001\002\000\014\004\010" +
    "\005\011\014\ufff5\015\ufff5\016\ufff5\001\002\000\010\014" +
    "\ufff7\015\ufff7\016\ufff7\001\002\000\010\003\uffee\012\uffee" +
    "\016\uffee\001\002\000\020\003\054\005\026\006\027\007" +
    "\030\010\031\011\007\013\032\001\002\000\014\003\uffec" +
    "\004\010\005\011\012\uffec\016\uffec\001\002\000\010\003" +
    "\ufff0\012\ufff0\016\ufff0\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\006\002\003\006\005\001\001\000\002\001" +
    "\001\000\006\004\014\005\036\001\001\000\002\001\001" +
    "\000\006\004\014\005\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\035\006\033\007\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\041\006\033\007\032\010\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\014\005\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\050\006\033\007\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\014\005\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\054" +
    "\006\033\007\032\001\001\000\006\004\014\005\036\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JsonParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JsonParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JsonParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private Osrn osrn;

  public Osrn getOsrn() { return osrn; }

  private void addError(int line, int col, String msg) {
    ErrorWrapper.add(line, col, msg);
  }

  public JsonParser(JsonLexer lexer) {
    super(lexer);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JsonParser$actions {
  private final JsonParser parser;

  /** Constructor */
  CUP$JsonParser$actions(JsonParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JsonParser$do_action_part00000000(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack            CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JsonParser$result;

      /* select the action based on the action number */
      switch (CUP$JsonParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= syntax EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		RESULT = start_val;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JsonParser$parser.done_parsing();
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // syntax ::= content 
            {
              Object RESULT =null;
		 osrn = OsrnWrapper.close(); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("syntax",0, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // syntax ::= 
            {
              Object RESULT =null;
		 OsrnWrapper.addEmpty(); osrn = OsrnWrapper.close(); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("syntax",0, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // content ::= CUR_IZQ obj CUR_DER 
            {
              OsrnWrapper RESULT =null;

              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("content",4, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // content ::= CUR_IZQ CUR_DER 
            {
              OsrnWrapper RESULT =null;
		 OsrnWrapper.addEmpty(); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("content",4, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // content ::= error obj CUR_DER 
            {
              OsrnWrapper RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		OsrnWrapper get = (OsrnWrapper)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		 addError(getleft, getright, " << { >> antes del objeto."); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("content",4, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // content ::= CUR_IZQ BRA_IZQ error 
            {
              OsrnWrapper RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		 addError(getleft, getright, " << } >> antes del arreglo."); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("content",4, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // array ::= BRA_IZQ array_ BRA_DER 
            {
              OsrnWrapper RESULT =null;

              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("array",5, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // array ::= BRA_IZQ BRA_DER 
            {
              OsrnWrapper RESULT =null;
		 ArrayWrapper.addEmpty(); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("array",5, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // array_ ::= value 
            {
              OsrnWrapper RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		 ArrayWrapper.addFirst(value); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("array_",6, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // array_ ::= array_ COMMA value 
            {
              OsrnWrapper RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		 ArrayWrapper.add(value); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("array_",6, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // array_ ::= array_ COLON error 
            {
              OsrnWrapper RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		 addError(getleft, getright, "a << , >> o un << ] >>"); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("array_",6, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // array_ ::= array_ COMMA error 
            {
              OsrnWrapper RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		int getleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		 addError(getleft, getright, " <valor>"); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("array_",6, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // obj ::= pair 
            {
              OsrnWrapper RESULT =null;
		 OsrnWrapper.addFirstPair(PairWrapper.getPair()); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("obj",3, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // obj ::= obj COMMA pair 
            {
              OsrnWrapper RESULT =null;
		 OsrnWrapper.addPair(PairWrapper.getPair()); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("obj",3, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // obj ::= obj COMMA error 
            {
              OsrnWrapper RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		 addError(getleft, getright, " << } >> o un <clave-valor>"); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("obj",3, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // obj ::= obj error 
            {
              OsrnWrapper RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		 addError(getleft, getright, "a << , >>, << } >>"); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("obj",3, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // pair ::= ID COLON value 
            {
              OsrnWrapper RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		 PairWrapper.setPair(key, value); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pair",2, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // pair ::= LITERAL COLON value 
            {
              OsrnWrapper RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		 PairWrapper.setPair(key, value); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pair",2, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // pair ::= ID error 
            {
              OsrnWrapper RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		 addError(getleft, getright, " << : >>"); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pair",2, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // pair ::= LITERAL error 
            {
              OsrnWrapper RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		 addError(getleft, getright, " << : >>"); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pair",2, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // pair ::= ID COLON error 
            {
              OsrnWrapper RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		 addError(getleft, getright, " <valor>"); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pair",2, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // pair ::= LITERAL COLON error 
            {
              OsrnWrapper RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		 addError(getleft, getright, " <valor>"); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pair",2, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // value ::= LITERAL 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		String obj = (String)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		 RESULT = obj; 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // value ::= NUMBER 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		double obj = (double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		 RESULT = obj; 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // value ::= BOOLEAN 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		boolean obj = (boolean)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		 RESULT = obj; 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // value ::= NULL 
            {
              Object RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Object obj = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		 RESULT = obj; 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // value ::= content 
            {
              Object RESULT =null;
		 RESULT = OsrnWrapper.close(); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // value ::= array 
            {
              Object RESULT =null;
		 RESULT = ArrayWrapper.close(); 
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("value",1, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JsonParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JsonParser$do_action(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack            CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
              return CUP$JsonParser$do_action_part00000000(
                               CUP$JsonParser$act_num,
                               CUP$JsonParser$parser,
                               CUP$JsonParser$stack,
                               CUP$JsonParser$top);
    }
}

}
