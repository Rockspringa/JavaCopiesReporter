
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.mooncoder.controllers.analyzer.syntax;

import java.util.List;
import java.util.ArrayList;
import edu.mooncoder.controllers.analyzer.lexic.JavaLexer;
import edu.mooncoder.model.wrappers.Variable;
import edu.mooncoder.model.containers.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JavaParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tokens.class;
}

  /** Default constructor. */
  @Deprecated
  public JavaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JavaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JavaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\270\000\002\002\004\000\002\002\005\000\002\002" +
    "\002\000\002\003\006\000\002\003\005\000\002\003\002" +
    "\000\002\003\006\000\002\003\007\000\002\003\004\000" +
    "\002\004\007\000\002\004\002\000\002\004\007\000\002" +
    "\004\010\000\002\004\006\000\002\005\010\000\002\005" +
    "\007\000\002\005\006\000\002\011\005\000\002\011\004" +
    "\000\002\006\006\000\002\006\006\000\002\006\005\000" +
    "\002\006\005\000\002\006\004\000\002\006\005\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\002\000\002\007\005\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\033\006\000\002\033\004\000" +
    "\002\033\005\000\002\033\006\000\002\010\003\000\002" +
    "\010\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\034\003\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\005\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\004\000\002\035\004\000\002\035\002\000\002\035\004" +
    "\000\002\047\010\000\002\047\007\000\002\047\010\000" +
    "\002\047\007\000\002\047\010\000\002\047\007\000\002" +
    "\037\004\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\003\000\002\036\005\000\002\036\003" +
    "\000\002\036\003\000\002\040\004\000\002\040\005\000" +
    "\002\040\002\000\002\040\004\000\002\041\005\000\002" +
    "\041\003\000\002\041\003\000\002\046\005\000\002\046" +
    "\003\000\002\046\004\000\002\046\003\000\002\020\005" +
    "\000\002\050\006\000\002\050\006\000\002\050\006\000" +
    "\002\050\006\000\002\014\004\000\002\014\002\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\043" +
    "\004\000\002\043\003\000\002\015\011\000\002\015\011" +
    "\000\002\015\011\000\002\015\011\000\002\015\011\000" +
    "\002\015\011\000\002\016\007\000\002\016\007\000\002" +
    "\016\007\000\002\016\007\000\002\017\011\000\002\017" +
    "\011\000\002\017\011\000\002\017\011\000\002\017\011" +
    "\000\002\017\011\000\002\021\011\000\002\021\011\000" +
    "\002\021\011\000\002\021\011\000\002\022\007\000\002" +
    "\022\006\000\002\022\002\000\002\022\007\000\002\022" +
    "\006\000\002\030\006\000\002\030\005\000\002\030\006" +
    "\000\002\012\006\000\002\023\003\000\002\023\003\000" +
    "\002\023\004\000\002\024\005\000\002\024\002\000\002" +
    "\024\004\000\002\045\003\000\002\045\003\000\002\026" +
    "\005\000\002\025\003\000\002\025\005\000\002\025\004" +
    "\000\002\025\004\000\002\025\004\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\004\000\002" +
    "\053\004\000\002\027\003\000\002\027\005\000\002\027" +
    "\004\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\006\000\002\027\003\000\002\052\005\000" +
    "\002\052\005\000\002\052\003\000\002\052\005\000\002" +
    "\051\005\000\002\051\005\000\002\051\003\000\002\051" +
    "\003\000\002\051\005\000\002\051\005\000\002\031\003" +
    "\000\002\031\003\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\007\000\002\031\005\000\002\031\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\044\004\000" +
    "\002\044\004\000\002\044\004\000\002\044\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0181\000\014\002\uffff\004\006\005\ufffc\006\ufffc\007" +
    "\ufffc\001\002\000\004\002\u0183\001\002\000\010\005\024" +
    "\006\ufff7\007\ufff7\001\002\000\006\003\010\011\007\001" +
    "\002\000\006\016\011\017\012\001\002\000\010\005\ufff9" +
    "\006\ufff9\007\ufff9\001\002\000\010\003\020\011\017\043" +
    "\021\001\002\000\012\003\016\005\ufffd\006\ufffd\007\ufffd" +
    "\001\002\000\004\017\014\001\002\000\012\003\015\005" +
    "\ufffe\006\ufffe\007\ufffe\001\002\000\010\005\ufffa\006\ufffa" +
    "\007\ufffa\001\002\000\010\005\ufffb\006\ufffb\007\ufffb\001" +
    "\002\000\006\016\011\017\uffe3\001\002\000\004\017\uffe1" +
    "\001\002\000\004\017\uffe2\001\002\000\004\017\uffe4\001" +
    "\002\000\006\006\041\007\040\001\002\000\004\011\025" +
    "\001\002\000\010\003\026\016\011\017\027\001\002\000" +
    "\010\005\024\006\ufff7\007\ufff7\001\002\000\004\003\035" +
    "\001\002\000\004\017\031\001\002\000\012\003\033\005" +
    "\024\006\ufff7\007\ufff7\001\002\000\006\006\ufff8\007\ufff8" +
    "\001\002\000\010\005\024\006\ufff7\007\ufff7\001\002\000" +
    "\006\006\ufff5\007\ufff5\001\002\000\010\005\024\006\ufff7" +
    "\007\ufff7\001\002\000\006\006\ufff6\007\ufff6\001\002\000" +
    "\006\006\ufff4\007\ufff4\001\002\000\004\006\u017e\001\002" +
    "\000\006\003\044\011\043\001\002\000\004\002\000\001" +
    "\002\000\004\021\u017b\001\002\000\020\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\017\uffe5\022\uffe5\023\uffe5\001\002\000" +
    "\020\007\053\010\060\011\056\012\051\017\054\022\050" +
    "\023\055\001\002\000\020\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\017\uffe7\022\uffe7\023\uffe7\001\002\000\020\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\017\uffe8\022\uffe8\023\uffe8\001" +
    "\002\000\004\002\ufff1\001\002\000\006\003\u0178\011\u0177" +
    "\001\002\000\020\007\uffea\010\uffea\011\uffea\012\uffea\017" +
    "\uffea\022\uffea\023\uffea\001\002\000\012\010\u0173\011\u0171" +
    "\012\051\023\055\001\002\000\020\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\017\uffe6\022\uffe6\023\uffe6\001\002\000\006" +
    "\003\uff7f\011\uff7f\001\002\000\010\003\uff7e\011\uff7e\025" +
    "\243\001\002\000\006\003\241\011\240\001\002\000\010" +
    "\007\063\011\061\023\055\001\002\000\006\003\uff7e\011" +
    "\uff7e\001\002\000\004\011\066\001\002\000\006\011\061" +
    "\023\055\001\002\000\020\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\017\uffec\022\uffec\023\uffec\001\002\000\020\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\017\uffed\022\uffed\023\uffed\001" +
    "\002\000\012\003\077\017\uff85\024\uff85\045\100\001\002" +
    "\000\006\017\uff84\024\uff84\001\002\000\006\017\uff81\024" +
    "\071\001\002\000\006\003\074\011\066\001\002\000\004" +
    "\017\073\001\002\000\072\003\uff86\007\uff86\010\uff86\011" +
    "\uff86\012\uff86\013\uff86\014\uff86\015\uff86\017\uff86\022\uff86" +
    "\023\uff86\025\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034" +
    "\uff86\035\uff86\037\uff86\040\uff86\044\uff86\046\uff86\047\uff86" +
    "\051\uff86\054\uff86\055\uff86\056\uff86\057\uff86\001\002\000" +
    "\004\017\uff80\001\002\000\006\017\uff81\024\071\001\002" +
    "\000\004\017\uff82\001\002\000\006\017\uff83\024\uff83\001" +
    "\002\000\032\003\120\011\115\013\123\014\107\015\106" +
    "\025\117\034\121\035\114\037\104\047\102\051\103\054" +
    "\122\001\002\000\050\003\uff77\011\uff77\013\uff77\014\uff77" +
    "\015\uff77\017\uff77\020\uff77\024\uff77\025\uff77\026\uff77\027" +
    "\uff77\034\uff77\035\uff77\036\157\037\uff77\047\uff77\051\uff77" +
    "\052\uff77\054\uff77\001\002\000\016\011\115\013\123\014" +
    "\107\025\117\037\104\047\102\001\002\000\030\011\115" +
    "\013\123\014\107\015\106\025\131\034\121\035\114\037" +
    "\104\047\102\051\125\054\132\001\002\000\016\011\115" +
    "\013\123\014\107\025\117\037\104\047\102\001\002\000" +
    "\056\003\uff76\011\uff76\013\uff76\014\uff76\015\uff76\017\uff76" +
    "\020\uff76\024\uff76\025\uff76\026\uff76\034\uff76\035\uff76\036" +
    "\140\037\142\041\136\042\143\043\145\047\137\051\uff76" +
    "\052\uff76\053\233\054\uff76\001\002\000\050\003\uff5f\011" +
    "\uff5f\013\uff5f\014\uff5f\015\uff5f\017\uff5f\020\uff5f\024\uff5f" +
    "\025\uff5f\026\uff5f\027\uff5f\034\uff5f\035\uff5f\036\uff5f\037" +
    "\uff5f\047\uff5f\051\uff5f\052\uff5f\054\uff5f\001\002\000\060" +
    "\003\uff4a\011\uff4a\013\uff4a\014\uff4a\015\uff4a\017\uff4a\020" +
    "\uff4a\024\uff4a\025\uff4a\026\uff4a\027\uff4a\034\uff4a\035\uff4a" +
    "\036\uff4a\037\uff4a\041\uff4a\042\uff4a\043\uff4a\047\uff4a\051" +
    "\uff4a\052\uff4a\053\uff4a\054\uff4a\001\002\000\060\003\uff4d" +
    "\011\uff4d\013\uff4d\014\uff4d\015\uff4d\017\uff4d\020\uff4d\024" +
    "\uff4d\025\uff4d\026\uff4d\027\uff4d\034\uff4d\035\uff4d\036\uff4d" +
    "\037\uff4d\041\uff4d\042\uff4d\043\uff4d\047\uff4d\051\uff4d\052" +
    "\uff4d\053\uff4d\054\uff4d\001\002\000\062\003\uff64\011\uff64" +
    "\013\uff64\014\uff64\015\uff64\016\230\017\uff64\020\uff64\024" +
    "\uff64\025\uff64\026\uff64\027\uff64\034\uff64\035\uff64\036\uff64" +
    "\037\uff64\041\uff64\042\uff64\043\uff64\047\uff64\051\uff64\052" +
    "\uff64\053\uff64\054\uff64\001\002\000\060\003\uff4c\011\uff4c" +
    "\013\uff4c\014\uff4c\015\uff4c\017\uff4c\020\uff4c\024\uff4c\025" +
    "\uff4c\026\uff4c\027\uff4c\034\uff4c\035\uff4c\036\uff4c\037\uff4c" +
    "\041\uff4c\042\uff4c\043\uff4c\047\uff4c\051\uff4c\052\uff4c\053" +
    "\uff4c\054\uff4c\001\002\000\040\003\uff7d\011\uff7d\013\uff7d" +
    "\014\uff7d\015\uff7d\017\uff7d\024\uff7d\025\uff7d\026\uff7d\034" +
    "\uff7d\035\uff7d\037\uff7d\047\uff7d\051\uff7d\054\uff7d\001\002" +
    "\000\050\003\uff60\011\uff60\013\uff60\014\uff60\015\uff60\017" +
    "\uff60\020\uff60\024\uff60\025\uff60\026\uff60\027\uff60\034\uff60" +
    "\035\uff60\036\uff60\037\uff60\047\uff60\051\uff60\052\uff60\054" +
    "\uff60\001\002\000\062\003\uff63\011\uff63\013\uff63\014\uff63" +
    "\015\uff63\016\225\017\uff63\020\uff63\024\uff63\025\206\026" +
    "\uff63\027\uff63\034\uff63\035\uff63\036\uff63\037\uff63\041\uff63" +
    "\042\uff63\043\uff63\047\uff63\051\uff63\052\uff63\053\uff63\054" +
    "\uff63\001\002\000\044\003\uff72\011\uff72\013\uff72\014\uff72" +
    "\015\uff72\017\uff72\020\uff72\024\uff72\025\uff72\026\uff72\034" +
    "\uff72\035\uff72\037\uff72\047\uff72\051\uff72\052\220\054\uff72" +
    "\001\002\000\016\011\115\013\123\014\107\025\117\037" +
    "\104\047\102\001\002\000\042\003\uff6b\011\uff6b\013\uff6b" +
    "\014\uff6b\015\uff6b\017\uff6b\020\uff6b\024\uff6b\025\uff6b\026" +
    "\uff6b\034\uff6b\035\uff6b\037\uff6b\047\uff6b\051\uff6b\054\uff6b" +
    "\001\002\000\006\003\177\011\176\001\002\000\046\003" +
    "\uff75\011\uff75\013\uff75\014\uff75\015\uff75\017\uff75\020\uff75" +
    "\024\uff75\025\uff75\026\uff75\027\124\034\uff75\035\uff75\037" +
    "\uff75\047\uff75\051\uff75\052\uff75\054\uff75\001\002\000\060" +
    "\003\uff4b\011\uff4b\013\uff4b\014\uff4b\015\uff4b\017\uff4b\020" +
    "\uff4b\024\uff4b\025\uff4b\026\uff4b\027\uff4b\034\uff4b\035\uff4b" +
    "\036\uff4b\037\uff4b\041\uff4b\042\uff4b\043\uff4b\047\uff4b\051" +
    "\uff4b\052\uff4b\053\uff4b\054\uff4b\001\002\000\030\011\115" +
    "\013\123\014\107\015\106\025\131\034\121\035\114\037" +
    "\104\047\102\051\125\054\132\001\002\000\030\011\115" +
    "\013\123\014\107\015\106\025\131\034\121\035\114\037" +
    "\104\047\102\051\125\054\132\001\002\000\022\036\140" +
    "\037\142\041\136\042\143\043\145\047\137\052\uff76\053" +
    "\141\001\002\000\042\003\uff71\011\uff71\013\uff71\014\uff71" +
    "\015\uff71\017\uff71\020\uff71\024\uff71\025\uff71\026\uff71\034" +
    "\uff71\035\uff71\037\uff71\047\uff71\051\uff71\054\uff71\001\002" +
    "\000\004\052\171\001\002\000\030\011\115\013\123\014" +
    "\107\015\106\025\131\034\121\035\114\037\104\047\102" +
    "\051\125\054\132\001\002\000\046\003\uffbd\011\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\017\uffbd\020\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\034\uffbd\035\uffbd\037\uffbd\047\uffbd\051" +
    "\uffbd\052\uff75\054\uffbd\001\002\000\024\026\144\036\140" +
    "\037\142\041\136\042\143\043\145\047\137\052\uff76\053" +
    "\141\001\002\000\004\026\135\001\002\000\044\003\uffbe" +
    "\011\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe\020\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\034\uffbe\035\uffbe\037\uffbe" +
    "\047\uffbe\051\uffbe\054\uffbe\001\002\000\016\011\115\013" +
    "\123\014\107\025\117\037\104\047\102\001\002\000\060" +
    "\003\uff4e\011\uff4e\013\uff4e\014\uff4e\015\uff4e\017\uff4e\020" +
    "\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e\034\uff4e\035\uff4e" +
    "\036\uff4e\037\uff4e\041\uff4e\042\uff4e\043\uff4e\047\uff4e\051" +
    "\uff4e\052\uff4e\053\uff4e\054\uff4e\001\002\000\024\003\155" +
    "\011\115\013\123\014\107\015\106\025\117\035\114\037" +
    "\104\047\102\001\002\000\016\011\115\013\123\014\107" +
    "\025\117\037\104\047\102\001\002\000\016\011\115\013" +
    "\123\014\107\025\117\037\104\047\102\001\002\000\016" +
    "\011\115\013\123\014\107\025\117\037\104\047\102\001" +
    "\002\000\060\003\uff51\011\uff51\013\uff51\014\uff51\015\uff51" +
    "\017\uff51\020\uff51\024\uff51\025\uff51\026\uff51\027\uff51\034" +
    "\uff51\035\uff51\036\uff51\037\uff51\041\uff51\042\uff51\043\uff51" +
    "\047\uff51\051\uff51\052\uff51\053\uff51\054\uff51\001\002\000" +
    "\016\011\115\013\123\014\107\025\117\037\104\047\102" +
    "\001\002\000\060\003\uff55\011\uff55\013\uff55\014\uff55\015" +
    "\uff55\017\uff55\020\uff55\024\uff55\025\uff55\026\uff55\027\uff55" +
    "\034\uff55\035\uff55\036\uff55\037\uff55\041\uff55\042\uff55\043" +
    "\uff55\047\137\051\uff55\052\uff55\053\uff55\054\uff55\001\002" +
    "\000\016\011\115\013\123\014\107\025\117\037\104\047" +
    "\102\001\002\000\060\003\uff56\011\uff56\013\uff56\014\uff56" +
    "\015\uff56\017\uff56\020\uff56\024\uff56\025\uff56\026\uff56\027" +
    "\uff56\034\uff56\035\uff56\036\uff56\037\uff56\041\136\042\143" +
    "\043\145\047\137\051\uff56\052\uff56\053\uff56\054\uff56\001" +
    "\002\000\060\003\uff53\011\uff53\013\uff53\014\uff53\015\uff53" +
    "\017\uff53\020\uff53\024\uff53\025\uff53\026\uff53\027\uff53\034" +
    "\uff53\035\uff53\036\uff53\037\uff53\041\uff53\042\uff53\043\uff53" +
    "\047\137\051\uff53\052\uff53\053\uff53\054\uff53\001\002\000" +
    "\060\003\uff54\011\uff54\013\uff54\014\uff54\015\uff54\017\uff54" +
    "\020\uff54\024\uff54\025\uff54\026\uff54\027\uff54\034\uff54\035" +
    "\uff54\036\uff54\037\uff54\041\136\042\143\043\145\047\137" +
    "\051\uff54\052\uff54\053\uff54\054\uff54\001\002\000\054\003" +
    "\uffbf\011\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\034\uffbf\035\uffbf\036" +
    "\147\037\uffbf\041\136\042\143\043\145\047\uffbf\051\uffbf" +
    "\054\uffbf\001\002\000\050\003\uff5e\011\uff5e\013\uff5e\014" +
    "\uff5e\015\uff5e\017\uff5e\020\uff5e\024\uff5e\025\uff5e\026\uff5e" +
    "\027\uff5e\034\uff5e\035\uff5e\036\uff5e\037\uff5e\047\uff5e\051" +
    "\uff5e\052\uff5e\054\uff5e\001\002\000\050\003\uff57\011\uff57" +
    "\013\uff57\014\uff57\015\uff57\017\uff57\020\uff57\024\uff57\025" +
    "\uff57\026\uff57\027\uff57\034\uff57\035\uff57\036\uff57\037\uff57" +
    "\047\uff57\051\uff57\052\uff57\054\uff57\001\002\000\060\003" +
    "\uff56\011\uff56\013\uff56\014\uff56\015\uff56\017\uff56\020\uff56" +
    "\024\uff56\025\uff56\026\uff56\027\uff56\034\uff56\035\uff56\036" +
    "\uff56\037\uff56\041\136\042\143\043\145\047\137\051\uff56" +
    "\052\uff56\053\uff56\054\uff56\001\002\000\022\003\164\011" +
    "\115\013\123\014\107\015\165\025\162\035\161\054\160" +
    "\001\002\000\050\003\uff5c\011\uff5c\013\uff5c\014\uff5c\015" +
    "\uff5c\017\uff5c\020\uff5c\024\uff5c\025\uff5c\026\uff5c\027\uff5c" +
    "\034\uff5c\035\uff5c\036\uff5c\037\uff5c\047\uff5c\051\uff5c\052" +
    "\uff5c\054\uff5c\001\002\000\050\003\uff5d\011\uff5d\013\uff5d" +
    "\014\uff5d\015\uff5d\017\uff5d\020\uff5d\024\uff5d\025\uff5d\026" +
    "\uff5d\027\uff5d\034\uff5d\035\uff5d\036\uff5d\037\uff5d\047\uff5d" +
    "\051\uff5d\052\uff5d\054\uff5d\001\002\000\016\011\115\013" +
    "\123\014\107\025\117\037\104\047\102\001\002\000\050" +
    "\003\uff5a\011\uff5a\013\uff5a\014\uff5a\015\uff5a\017\uff5a\020" +
    "\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a\034\uff5a\035\uff5a" +
    "\036\uff5a\037\uff5a\047\uff5a\051\uff5a\052\uff5a\054\uff5a\001" +
    "\002\000\050\003\uff58\011\uff58\013\uff58\014\uff58\015\uff58" +
    "\017\uff58\020\uff58\024\uff58\025\uff58\026\uff58\027\uff58\034" +
    "\uff58\035\uff58\036\uff58\037\uff58\047\uff58\051\uff58\052\uff58" +
    "\054\uff58\001\002\000\050\003\uff5b\011\uff5b\013\uff5b\014" +
    "\uff5b\015\uff5b\017\uff5b\020\uff5b\024\uff5b\025\uff5b\026\uff5b" +
    "\027\uff5b\034\uff5b\035\uff5b\036\uff5b\037\uff5b\047\uff5b\051" +
    "\uff5b\052\uff5b\054\uff5b\001\002\000\020\026\167\036\147" +
    "\037\142\041\136\042\143\043\145\047\137\001\002\000" +
    "\050\003\uff59\011\uff59\013\uff59\014\uff59\015\uff59\017\uff59" +
    "\020\uff59\024\uff59\025\uff59\026\uff59\027\uff59\034\uff59\035" +
    "\uff59\036\uff59\037\uff59\047\uff59\051\uff59\052\uff59\054\uff59" +
    "\001\002\000\060\003\uff52\011\uff52\013\uff52\014\uff52\015" +
    "\uff52\017\uff52\020\uff52\024\uff52\025\uff52\026\uff52\027\uff52" +
    "\034\uff52\035\uff52\036\uff52\037\uff52\041\uff52\042\uff52\043" +
    "\uff52\047\137\051\uff52\052\uff52\053\uff52\054\uff52\001\002" +
    "\000\026\011\115\013\123\014\107\015\106\025\117\034" +
    "\121\035\114\037\104\047\102\054\172\001\002\000\044" +
    "\003\uff75\011\uff75\013\uff75\014\uff75\015\uff75\017\uff75\020" +
    "\uff75\024\uff75\025\uff75\026\uff75\027\uff75\034\uff75\035\uff75" +
    "\037\uff75\047\uff75\051\uff75\054\uff75\001\002\000\054\003" +
    "\uff76\011\uff76\013\uff76\014\uff76\015\uff76\017\uff76\020\uff76" +
    "\024\uff76\025\uff76\026\uff76\027\uff76\034\uff76\035\uff76\036" +
    "\140\037\142\041\136\042\143\043\145\047\137\051\uff76" +
    "\054\uff76\001\002\000\044\003\uffc0\011\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\017\uffc0\020\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\034\uffc0\035\uffc0\037\uffc0\047\uffc0\051\uffc0\054" +
    "\uffc0\001\002\000\044\003\uffc1\011\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\017\uffc1\020\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\034\uffc1\035\uffc1\037\uffc1\047\uffc1\051\uffc1\054\uffc1" +
    "\001\002\000\006\016\205\025\206\001\002\000\046\003" +
    "\uff73\011\uff73\013\uff73\014\uff73\015\uff73\017\uff73\020\uff73" +
    "\024\uff73\025\uff73\026\uff73\027\uff73\034\uff73\035\uff73\037" +
    "\uff73\047\uff73\051\uff73\052\uff73\054\uff73\001\002\000\050" +
    "\003\uff68\011\uff68\013\uff68\014\uff68\015\uff68\016\202\017" +
    "\uff68\020\uff68\024\uff68\025\uff68\026\uff68\027\uff68\034\uff68" +
    "\035\uff68\037\uff68\047\uff68\051\uff68\052\uff68\054\uff68\001" +
    "\002\000\046\003\uff74\011\uff74\013\uff74\014\uff74\015\uff74" +
    "\017\uff74\020\uff74\024\uff74\025\uff74\026\uff74\027\uff74\034" +
    "\uff74\035\uff74\037\uff74\047\uff74\051\uff74\052\uff74\054\uff74" +
    "\001\002\000\006\003\203\011\176\001\002\000\046\003" +
    "\uff67\011\uff67\013\uff67\014\uff67\015\uff67\017\uff67\020\uff67" +
    "\024\uff67\025\uff67\026\uff67\027\uff67\034\uff67\035\uff67\037" +
    "\uff67\047\uff67\051\uff67\052\uff67\054\uff67\001\002\000\046" +
    "\003\uff6a\011\uff6a\013\uff6a\014\uff6a\015\uff6a\017\uff6a\020" +
    "\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\034\uff6a\035\uff6a" +
    "\037\uff6a\047\uff6a\051\uff6a\052\uff6a\054\uff6a\001\002\000" +
    "\004\011\176\001\002\000\034\003\120\011\115\013\123" +
    "\014\107\015\106\025\117\026\211\034\121\035\114\037" +
    "\104\047\102\051\103\054\122\001\002\000\010\003\uffdc" +
    "\024\uffdc\026\uffdc\001\002\000\010\003\213\024\212\026" +
    "\214\001\002\000\062\003\uff88\011\uff88\013\uff88\014\uff88" +
    "\015\uff88\016\uff88\017\uff88\020\uff88\024\uff88\025\uff88\026" +
    "\uff88\027\uff88\034\uff88\035\uff88\036\uff88\037\uff88\041\uff88" +
    "\042\uff88\043\uff88\047\uff88\051\uff88\052\uff88\053\uff88\054" +
    "\uff88\001\002\000\032\003\120\011\115\013\123\014\107" +
    "\015\106\025\117\034\121\035\114\037\104\047\102\051" +
    "\103\054\122\001\002\000\062\003\uff87\011\uff87\013\uff87" +
    "\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\024\uff87\025" +
    "\uff87\026\uff87\027\uff87\034\uff87\035\uff87\036\uff87\037\uff87" +
    "\041\uff87\042\uff87\043\uff87\047\uff87\051\uff87\052\uff87\053" +
    "\uff87\054\uff87\001\002\000\062\003\uff89\011\uff89\013\uff89" +
    "\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\024\uff89\025" +
    "\uff89\026\uff89\027\uff89\034\uff89\035\uff89\036\uff89\037\uff89" +
    "\041\uff89\042\uff89\043\uff89\047\uff89\051\uff89\052\uff89\053" +
    "\uff89\054\uff89\001\002\000\010\003\uffdb\024\uffdb\026\uffdb" +
    "\001\002\000\046\003\uff69\011\uff69\013\uff69\014\uff69\015" +
    "\uff69\017\uff69\020\uff69\024\uff69\025\uff69\026\uff69\027\uff69" +
    "\034\uff69\035\uff69\037\uff69\047\uff69\051\uff69\052\uff69\054" +
    "\uff69\001\002\000\020\026\144\036\147\037\142\041\136" +
    "\042\143\043\145\047\137\001\002\000\030\011\115\013" +
    "\123\014\107\015\106\025\131\034\223\035\114\037\104" +
    "\047\102\051\125\054\132\001\002\000\046\003\uff6d\011" +
    "\uff6d\013\uff6d\014\uff6d\015\uff6d\017\uff6d\020\uff6d\024\uff6d" +
    "\025\uff6d\026\uff6d\034\uff6d\035\uff6d\036\157\037\uff6d\047" +
    "\uff6d\051\uff6d\052\uff77\054\uff6d\001\002\000\042\003\uff6f" +
    "\011\uff6f\013\uff6f\014\uff6f\015\uff6f\017\uff6f\020\uff6f\024" +
    "\uff6f\025\uff6f\026\uff6f\034\uff6f\035\uff6f\037\uff6f\047\uff6f" +
    "\051\uff6f\054\uff6f\001\002\000\006\003\177\011\176\001" +
    "\002\000\044\003\uff6c\011\uff6c\013\uff6c\014\uff6c\015\uff6c" +
    "\017\uff6c\020\uff6c\024\uff6c\025\uff6c\026\uff6c\034\uff6c\035" +
    "\uff6c\037\uff6c\047\uff6c\051\uff6c\052\uff74\054\uff6c\001\002" +
    "\000\006\003\226\011\115\001\002\000\060\003\uff61\011" +
    "\uff61\013\uff61\014\uff61\015\uff61\017\uff61\020\uff61\024\uff61" +
    "\025\uff61\026\uff61\027\uff61\034\uff61\035\uff61\036\uff61\037" +
    "\uff61\041\uff61\042\uff61\043\uff61\047\uff61\051\uff61\052\uff61" +
    "\053\uff61\054\uff61\001\002\000\060\003\uff65\011\uff65\013" +
    "\uff65\014\uff65\015\uff65\017\uff65\020\uff65\024\uff65\025\uff65" +
    "\026\uff65\027\uff65\034\uff65\035\uff65\036\uff65\037\uff65\041" +
    "\uff65\042\uff65\043\uff65\047\uff65\051\uff65\052\uff65\053\uff65" +
    "\054\uff65\001\002\000\006\003\231\011\115\001\002\000" +
    "\060\003\uff62\011\uff62\013\uff62\014\uff62\015\uff62\017\uff62" +
    "\020\uff62\024\uff62\025\uff62\026\uff62\027\uff62\034\uff62\035" +
    "\uff62\036\uff62\037\uff62\041\uff62\042\uff62\043\uff62\047\uff62" +
    "\051\uff62\052\uff62\053\uff62\054\uff62\001\002\000\060\003" +
    "\uff66\011\uff66\013\uff66\014\uff66\015\uff66\017\uff66\020\uff66" +
    "\024\uff66\025\uff66\026\uff66\027\uff66\034\uff66\035\uff66\036" +
    "\uff66\037\uff66\041\uff66\042\uff66\043\uff66\047\uff66\051\uff66" +
    "\052\uff66\053\uff66\054\uff66\001\002\000\016\011\115\013" +
    "\123\014\107\025\117\037\104\047\102\001\002\000\052" +
    "\003\uff6e\011\uff6e\013\uff6e\014\uff6e\015\uff6e\017\uff6e\020" +
    "\uff6e\024\uff6e\025\uff6e\026\uff6e\034\uff6e\035\uff6e\036\147" +
    "\037\uff6e\041\136\042\143\043\145\047\uff6e\051\uff6e\054" +
    "\uff6e\001\002\000\060\003\uff50\011\uff50\013\uff50\014\uff50" +
    "\015\uff50\017\uff50\020\uff50\024\uff50\025\uff50\026\uff50\027" +
    "\uff50\034\uff50\035\uff50\036\uff50\037\uff50\041\uff50\042\uff50" +
    "\043\uff50\047\uff50\051\uff50\052\uff50\053\uff50\054\uff50\001" +
    "\002\000\042\003\uff70\011\uff70\013\uff70\014\uff70\015\uff70" +
    "\017\uff70\020\uff70\024\uff70\025\uff70\026\uff70\034\uff70\035" +
    "\uff70\037\uff70\047\uff70\051\uff70\054\uff70\001\002\000\060" +
    "\003\uff4f\011\uff4f\013\uff4f\014\uff4f\015\uff4f\017\uff4f\020" +
    "\uff4f\024\uff4f\025\uff4f\026\uff4f\027\uff4f\034\uff4f\035\uff4f" +
    "\036\uff4f\037\uff4f\041\uff4f\042\uff4f\043\uff4f\047\uff4f\051" +
    "\uff4f\052\uff4f\053\uff4f\054\uff4f\001\002\000\014\003\077" +
    "\017\uff85\024\uff85\025\243\045\100\001\002\000\004\025" +
    "\243\001\002\000\020\007\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\017\uffd8\022\uffd8\023\uffd8\001\002\000\012\003\244\011" +
    "\061\023\055\026\247\001\002\000\004\021\u016c\001\002" +
    "\000\006\003\u0167\011\u0166\001\002\000\006\003\u015b\026" +
    "\u015c\001\002\000\006\003\250\021\251\001\002\000\032" +
    "\003\uffc9\011\uffc9\017\uffc9\022\uffc9\023\uffc9\031\uffc9\033" +
    "\uffc9\040\uffc9\044\uffc9\046\uffc9\047\uffc9\055\uffc9\001\002" +
    "\000\032\003\uffc9\011\uffc9\017\uffc9\022\uffc9\023\uffc9\031" +
    "\uffc9\033\uffc9\040\uffc9\044\uffc9\046\uffc9\047\uffc9\055\uffc9" +
    "\001\002\000\032\003\274\011\263\017\267\022\262\023" +
    "\055\031\261\033\301\040\265\044\256\046\260\047\253" +
    "\055\254\001\002\000\004\011\115\001\002\000\006\003" +
    "\u014b\025\u014c\001\002\000\010\016\u0149\017\uff68\047\uff64" +
    "\001\002\000\034\003\120\011\115\013\123\014\107\015" +
    "\106\017\u0147\025\117\034\121\035\114\037\104\047\102" +
    "\051\103\054\122\001\002\000\004\047\u0145\001\002\000" +
    "\006\003\u0123\025\u0124\001\002\000\006\003\u011a\025\u011b" +
    "\001\002\000\020\007\uffc6\010\uffc6\011\uffc6\012\uffc6\017" +
    "\uffc6\022\uffc6\023\uffc6\001\002\000\020\003\340\011\uff7e" +
    "\016\u0118\025\206\045\100\047\uff63\050\341\001\002\000" +
    "\004\017\u0117\001\002\000\034\003\326\011\263\017\267" +
    "\021\324\023\055\030\325\031\261\033\301\040\265\044" +
    "\256\046\260\047\253\055\254\001\002\000\042\003\uffce" +
    "\011\uffce\017\uffce\022\uffce\023\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\040\uffce\044\uffce\046\uffce\047\uffce\055\uffce" +
    "\056\uffce\057\uffce\001\002\000\042\003\uffcc\011\uffcc\017" +
    "\uffcc\022\uffcc\023\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\040\uffcc\044\uffcc\046\uffcc\047\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\001\002\000\042\003\uffd6\011\uffd6\017\uffd6\022\uffd6" +
    "\023\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\040\uffd6\044" +
    "\uffd6\046\uffd6\047\uffd6\055\uffd6\056\uffd6\057\uffd6\001\002" +
    "\000\042\003\uffd0\011\uffd0\017\uffd0\022\uffd0\023\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\040\uffd0\044\uffd0\046\uffd0" +
    "\047\uffd0\055\uffd0\056\uffd0\057\uffd0\001\002\000\042\003" +
    "\uffcf\011\uffcf\017\uffcf\022\uffcf\023\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\040\uffcf\044\uffcf\046\uffcf\047\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\001\002\000\006\003\u0100\017\u0101" +
    "\001\002\000\032\003\uffc8\011\uffc8\017\uffc8\022\uffc8\023" +
    "\uffc8\031\uffc8\033\uffc8\040\uffc8\044\uffc8\046\uffc8\047\uffc8" +
    "\055\uffc8\001\002\000\042\003\uffd1\011\uffd1\017\uffd1\022" +
    "\uffd1\023\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\040\uffd1" +
    "\044\uffd1\046\uffd1\047\uffd1\055\uffd1\056\uffd1\057\uffd1\001" +
    "\002\000\032\003\371\011\263\017\267\021\367\023\055" +
    "\031\261\033\301\040\265\044\256\046\260\047\253\055" +
    "\254\001\002\000\042\003\uffcd\011\uffcd\017\uffcd\022\uffcd" +
    "\023\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\040\uffcd\044" +
    "\uffcd\046\uffcd\047\uffcd\055\uffcd\056\uffcd\057\uffcd\001\002" +
    "\000\036\003\uff7c\011\uff7c\013\uff7c\014\uff7c\015\uff7c\017" +
    "\uff7c\025\uff7c\026\uff7c\034\uff7c\035\uff7c\037\uff7c\047\uff7c" +
    "\051\uff7c\054\uff7c\001\002\000\006\003\303\025\304\001" +
    "\002\000\032\003\uffca\011\uffca\017\uffca\022\uffca\023\uffca" +
    "\031\uffca\033\uffca\040\uffca\044\uffca\046\uffca\047\uffca\055" +
    "\uffca\001\002\000\012\011\307\017\306\023\055\047\253" +
    "\001\002\000\014\003\310\011\307\017\306\023\055\047" +
    "\253\001\002\000\034\003\uffa7\011\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\017\uffa7\025\uffa7\034\uffa7\035\uffa7\037\uffa7\047" +
    "\uffa7\051\uffa7\054\uffa7\001\002\000\034\003\uffa5\011\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\017\uffa5\025\uffa5\034\uffa5\035" +
    "\uffa5\037\uffa5\047\uffa5\051\uffa5\054\uffa5\001\002\000\020" +
    "\003\340\011\uff7e\016\225\025\206\045\100\047\uff63\050" +
    "\341\001\002\000\032\011\115\013\123\014\107\015\106" +
    "\017\317\025\131\034\121\035\114\037\104\047\102\051" +
    "\125\054\132\001\002\000\034\003\320\011\115\013\123" +
    "\014\107\015\106\017\317\025\131\034\121\035\114\037" +
    "\104\047\102\051\125\054\132\001\002\000\034\003\uffa6" +
    "\011\uffa6\013\uffa6\014\uffa6\015\uffa6\017\uffa6\025\uffa6\034" +
    "\uffa6\035\uffa6\037\uffa6\047\uffa6\051\uffa6\054\uffa6\001\002" +
    "\000\012\003\uffbb\017\uffbb\026\uffbb\027\uffbb\001\002\000" +
    "\032\003\uffba\017\uffba\026\uffba\027\uffba\036\uff4c\037\uff4c" +
    "\041\uff4c\042\uff4c\043\uff4c\047\uff4c\052\uff4c\053\uff4c\001" +
    "\002\000\010\003\347\011\321\047\253\001\002\000\006" +
    "\017\344\027\343\001\002\000\010\003\uffa3\011\uffa3\047" +
    "\uffa3\001\002\000\006\011\321\047\253\001\002\000\016" +
    "\003\340\016\225\025\206\045\100\047\uff63\050\341\001" +
    "\002\000\004\026\323\001\002\000\034\003\326\011\263" +
    "\017\267\021\324\023\055\030\325\031\261\033\301\040" +
    "\265\044\256\046\260\047\253\055\254\001\002\000\034" +
    "\003\uffb7\011\uffb7\017\uffb7\022\uffb7\023\uffb7\030\uffb7\031" +
    "\uffb7\033\uffb7\040\uffb7\044\uffb7\046\uffb7\047\uffb7\055\uffb7" +
    "\001\002\000\004\017\331\001\002\000\042\003\uffaf\011" +
    "\uffaf\017\uffaf\022\uffaf\023\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\040\uffaf\044\uffaf\046\uffaf\047\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\001\002\000\042\003\uffb1\011\uffb1\017\uffb1" +
    "\022\uffb1\023\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\040" +
    "\uffb1\044\uffb1\046\uffb1\047\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\001\002\000\042\003\uff9f\011\uff9f\017\uff9f\022\uff9f\023" +
    "\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\040\uff9f\044\uff9f" +
    "\046\uff9f\047\uff9f\055\uff9f\056\uff9f\057\uff9f\001\002\000" +
    "\042\003\uffb0\011\uffb0\017\uffb0\022\uffb0\023\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\040\uffb0\044\uffb0\046\uffb0\047" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\001\002\000\034\003\335" +
    "\011\263\017\267\022\333\023\055\030\334\031\261\033" +
    "\301\040\265\044\256\046\260\047\253\055\254\001\002" +
    "\000\042\003\uffb2\011\uffb2\017\uffb2\022\uffb2\023\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\040\uffb2\044\uffb2\046\uffb2" +
    "\047\uffb2\055\uffb2\056\uffb2\057\uffb2\001\002\000\004\017" +
    "\337\001\002\000\040\003\uffb6\011\uffb6\017\uffb6\022\uffb6" +
    "\023\uffb6\030\uffb6\031\uffb6\033\uffb6\040\uffb6\044\uffb6\046" +
    "\uffb6\047\uffb6\055\uffb6\056\uffb6\057\uffb6\001\002\000\040" +
    "\003\uffb9\011\uffb9\017\uffb9\022\uffb9\023\uffb9\030\uffb9\031" +
    "\uffb9\033\uffb9\040\uffb9\044\uffb9\046\uffb9\047\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\001\002\000\040\003\uffb8\011\uffb8\017" +
    "\uffb8\022\uffb8\023\uffb8\030\uffb8\031\uffb8\033\uffb8\040\uffb8" +
    "\044\uffb8\046\uffb8\047\uffb8\055\uffb8\056\uffb8\057\uffb8\001" +
    "\002\000\036\003\uff78\011\uff78\013\uff78\014\uff78\015\uff78" +
    "\017\uff78\025\uff78\026\uff78\034\uff78\035\uff78\037\uff78\047" +
    "\uff78\051\uff78\054\uff78\001\002\000\032\003\120\011\115" +
    "\013\123\014\107\015\106\025\117\034\121\035\114\037" +
    "\104\047\102\051\103\054\122\001\002\000\036\003\uff7b" +
    "\011\uff7b\013\uff7b\014\uff7b\015\uff7b\017\uff7b\025\uff7b\026" +
    "\uff7b\034\uff7b\035\uff7b\037\uff7b\047\uff7b\051\uff7b\054\uff7b" +
    "\001\002\000\030\011\115\013\123\014\107\015\106\025" +
    "\131\034\121\035\114\037\104\047\102\051\125\054\132" +
    "\001\002\000\010\003\uffa4\011\uffa4\047\uffa4\001\002\000" +
    "\012\003\uffbc\017\uffbc\026\uffbc\027\uffbc\001\002\000\006" +
    "\003\352\026\353\001\002\000\004\026\350\001\002\000" +
    "\034\003\326\011\263\017\267\021\324\023\055\030\325" +
    "\031\261\033\301\040\265\044\256\046\260\047\253\055" +
    "\254\001\002\000\042\003\uffa0\011\uffa0\017\uffa0\022\uffa0" +
    "\023\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\040\uffa0\044" +
    "\uffa0\046\uffa0\047\uffa0\055\uffa0\056\uffa0\057\uffa0\001\002" +
    "\000\034\003\326\011\263\017\267\021\324\023\055\030" +
    "\325\031\261\033\301\040\265\044\256\046\260\047\253" +
    "\055\254\001\002\000\034\003\326\011\263\017\267\021" +
    "\324\023\055\030\325\031\261\033\301\040\265\044\256" +
    "\046\260\047\253\055\254\001\002\000\042\003\uffa2\011" +
    "\uffa2\017\uffa2\022\uffa2\023\uffa2\030\uffa2\031\uffa2\032\uffa2" +
    "\033\uffa2\040\uffa2\044\uffa2\046\uffa2\047\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\001\002\000\042\003\uffa1\011\uffa1\017\uffa1" +
    "\022\uffa1\023\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\040" +
    "\uffa1\044\uffa1\046\uffa1\047\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\001\002\000\006\011\321\047\253\001\002\000\004\026" +
    "\360\001\002\000\034\003\326\011\263\017\267\021\324" +
    "\023\055\030\325\031\261\033\301\040\265\044\256\046" +
    "\260\047\253\055\254\001\002\000\042\003\uff9e\011\uff9e" +
    "\017\uff9e\022\uff9e\023\uff9e\030\uff9e\031\uff9e\032\uff9e\033" +
    "\uff9e\040\uff9e\044\uff9e\046\uff9e\047\uff9e\055\uff9e\056\uff9e" +
    "\057\uff9e\001\002\000\032\011\115\013\123\014\107\015" +
    "\106\017\317\025\131\034\121\035\114\037\104\047\102" +
    "\051\125\054\132\001\002\000\006\011\321\047\253\001" +
    "\002\000\004\026\365\001\002\000\034\003\326\011\263" +
    "\017\267\021\324\023\055\030\325\031\261\033\301\040" +
    "\265\044\256\046\260\047\253\055\254\001\002\000\042" +
    "\003\uff9d\011\uff9d\017\uff9d\022\uff9d\023\uff9d\030\uff9d\031" +
    "\uff9d\032\uff9d\033\uff9d\040\uff9d\044\uff9d\046\uff9d\047\uff9d" +
    "\055\uff9d\056\uff9d\057\uff9d\001\002\000\032\003\uffc9\011" +
    "\uffc9\017\uffc9\022\uffc9\023\uffc9\031\uffc9\033\uffc9\040\uffc9" +
    "\044\uffc9\046\uffc9\047\uffc9\055\uffc9\001\002\000\042\003" +
    "\uffa8\011\uffa8\017\uffa8\022\uffa8\023\uffa8\030\uffa8\031\uffa8" +
    "\032\373\033\uffa8\040\uffa8\044\uffa8\046\uffa8\047\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\001\002\000\042\003\uffb3\011\uffb3" +
    "\017\uffb3\022\uffb3\023\uffb3\030\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\040\uffb3\044\uffb3\046\uffb3\047\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\001\002\000\042\003\uffb4\011\uffb4\017\uffb4\022" +
    "\uffb4\023\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\040\uffb4" +
    "\044\uffb4\046\uffb4\047\uffb4\055\uffb4\056\uffb4\057\uffb4\001" +
    "\002\000\032\003\371\011\263\017\267\021\367\023\055" +
    "\031\261\033\301\040\265\044\256\046\260\047\253\055" +
    "\254\001\002\000\042\003\uffae\011\uffae\017\uffae\022\uffae" +
    "\023\uffae\030\uffae\031\uffae\032\uffae\033\uffae\040\uffae\044" +
    "\uffae\046\uffae\047\uffae\055\uffae\056\uffae\057\uffae\001\002" +
    "\000\042\003\uffa9\011\uffa9\017\uffa9\022\uffa9\023\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\040\uffa9\044\uffa9\046\uffa9" +
    "\047\uffa9\055\uffa9\056\uffa9\057\uffa9\001\002\000\032\003" +
    "\274\011\263\017\267\022\377\023\055\031\261\033\301" +
    "\040\265\044\256\046\260\047\253\055\254\001\002\000" +
    "\042\003\uffb5\011\uffb5\017\uffb5\022\uffb5\023\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\040\uffb5\044\uffb5\046\uffb5\047" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\001\002\000\042\003\uffcb" +
    "\011\uffcb\017\uffcb\022\uffcb\023\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\040\uffcb\044\uffcb\046\uffcb\047\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\001\002\000\042\003\uffd5\011\uffd5\017" +
    "\uffd5\022\uffd5\023\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\040\uffd5\044\uffd5\046\uffd5\047\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\001\002\000\006\003\u0103\055\u0104\001\002\000\004" +
    "\025\u0113\001\002\000\006\003\u0105\025\u0106\001\002\000" +
    "\030\011\115\013\123\014\107\015\106\025\131\034\121" +
    "\035\114\037\104\047\102\051\125\054\132\001\002\000" +
    "\032\003\u0108\011\115\013\123\014\107\015\106\025\131" +
    "\034\121\035\114\037\104\047\102\051\125\054\132\001" +
    "\002\000\010\003\u010b\026\u010c\027\343\001\002\000\004" +
    "\026\u0109\001\002\000\004\017\u010a\001\002\000\042\003" +
    "\uff95\011\uff95\017\uff95\022\uff95\023\uff95\030\uff95\031\uff95" +
    "\032\uff95\033\uff95\040\uff95\044\uff95\046\uff95\047\uff95\055" +
    "\uff95\056\uff95\057\uff95\001\002\000\004\017\u010f\001\002" +
    "\000\006\003\u010d\017\u010e\001\002\000\042\003\uff97\011" +
    "\uff97\017\uff97\022\uff97\023\uff97\030\uff97\031\uff97\032\uff97" +
    "\033\uff97\040\uff97\044\uff97\046\uff97\047\uff97\055\uff97\056" +
    "\uff97\057\uff97\001\002\000\042\003\uff98\011\uff98\017\uff98" +
    "\022\uff98\023\uff98\030\uff98\031\uff98\032\uff98\033\uff98\040" +
    "\uff98\044\uff98\046\uff98\047\uff98\055\uff98\056\uff98\057\uff98" +
    "\001\002\000\042\003\uff96\011\uff96\017\uff96\022\uff96\023" +
    "\uff96\030\uff96\031\uff96\032\uff96\033\uff96\040\uff96\044\uff96" +
    "\046\uff96\047\uff96\055\uff96\056\uff96\057\uff96\001\002\000" +
    "\006\026\u0111\027\343\001\002\000\004\017\u0112\001\002" +
    "\000\042\003\uff94\011\uff94\017\uff94\022\uff94\023\uff94\030" +
    "\uff94\031\uff94\032\uff94\033\uff94\040\uff94\044\uff94\046\uff94" +
    "\047\uff94\055\uff94\056\uff94\057\uff94\001\002\000\030\011" +
    "\115\013\123\014\107\015\106\025\131\034\121\035\114" +
    "\037\104\047\102\051\125\054\132\001\002\000\006\026" +
    "\u0115\027\343\001\002\000\004\017\u0116\001\002\000\042" +
    "\003\uff93\011\uff93\017\uff93\022\uff93\023\uff93\030\uff93\031" +
    "\uff93\032\uff93\033\uff93\040\uff93\044\uff93\046\uff93\047\uff93" +
    "\055\uff93\056\uff93\057\uff93\001\002\000\042\003\uffd4\011" +
    "\uffd4\017\uffd4\022\uffd4\023\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\040\uffd4\044\uffd4\046\uffd4\047\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\001\002\000\006\003\226\011\u0119\001\002" +
    "\000\010\016\u0118\025\206\047\uff63\001\002\000\030\011" +
    "\115\013\123\014\107\015\106\025\131\034\121\035\114" +
    "\037\104\047\102\051\125\054\132\001\002\000\032\003" +
    "\u011d\011\115\013\123\014\107\015\106\025\131\034\121" +
    "\035\114\037\104\047\102\051\125\054\132\001\002\000" +
    "\010\003\u011f\026\u0120\027\343\001\002\000\004\026\u011e" +
    "\001\002\000\032\003\uffab\011\uffab\017\uffab\021\uffab\023" +
    "\uffab\031\uffab\033\uffab\040\uffab\044\uffab\046\uffab\047\uffab" +
    "\055\uffab\001\002\000\032\003\uffac\011\uffac\017\uffac\021" +
    "\uffac\023\uffac\031\uffac\033\uffac\040\uffac\044\uffac\046\uffac" +
    "\047\uffac\055\uffac\001\002\000\032\003\uffad\011\uffad\017" +
    "\uffad\021\uffad\023\uffad\031\uffad\033\uffad\040\uffad\044\uffad" +
    "\046\uffad\047\uffad\055\uffad\001\002\000\006\026\u0122\027" +
    "\343\001\002\000\032\003\uffaa\011\uffaa\017\uffaa\021\uffaa" +
    "\023\uffaa\031\uffaa\033\uffaa\040\uffaa\044\uffaa\046\uffaa\047" +
    "\uffaa\055\uffaa\001\002\000\032\003\120\011\115\013\123" +
    "\014\107\015\106\025\117\034\121\035\114\037\104\047" +
    "\102\051\103\054\122\001\002\000\032\003\120\011\115" +
    "\013\123\014\107\015\106\025\117\034\121\035\114\037" +
    "\104\047\102\051\103\054\122\001\002\000\006\003\u0126" +
    "\026\u0127\001\002\000\004\021\u013d\001\002\000\006\003" +
    "\u0128\021\u0129\001\002\000\012\003\u012a\022\uff8c\056\uff8c" +
    "\057\uff8c\001\002\000\012\003\u012a\022\uff8c\056\uff8c\057" +
    "\uff8c\001\002\000\006\056\u0135\057\u0134\001\002\000\010" +
    "\022\u012d\056\u012e\057\u012c\001\002\000\004\020\u0132\001" +
    "\002\000\042\003\uff92\011\uff92\017\uff92\022\uff92\023\uff92" +
    "\030\uff92\031\uff92\032\uff92\033\uff92\040\uff92\044\uff92\046" +
    "\uff92\047\uff92\055\uff92\056\uff92\057\uff92\001\002\000\032" +
    "\003\120\011\115\013\123\014\107\015\106\025\117\034" +
    "\121\035\114\037\104\047\102\051\103\054\122\001\002" +
    "\000\004\020\u0130\001\002\000\040\003\uffb7\011\uffb7\017" +
    "\uffb7\022\uffb7\023\uffb7\030\uffb7\031\uffb7\033\uffb7\040\uffb7" +
    "\044\uffb7\046\uffb7\047\uffb7\055\uffb7\056\uffb7\057\uffb7\001" +
    "\002\000\040\003\335\011\263\017\267\022\uff8e\023\055" +
    "\030\334\031\261\033\301\040\265\044\256\046\260\047" +
    "\253\055\254\056\uff8e\057\uff8e\001\002\000\040\003\uffb7" +
    "\011\uffb7\017\uffb7\022\uffb7\023\uffb7\030\uffb7\031\uffb7\033" +
    "\uffb7\040\uffb7\044\uffb7\046\uffb7\047\uffb7\055\uffb7\056\uffb7" +
    "\057\uffb7\001\002\000\040\003\335\011\263\017\267\022" +
    "\uff8d\023\055\030\334\031\261\033\301\040\265\044\256" +
    "\046\260\047\253\055\254\056\uff8d\057\uff8d\001\002\000" +
    "\004\020\u0139\001\002\000\032\003\120\011\115\013\123" +
    "\014\107\015\106\025\117\034\121\035\114\037\104\047" +
    "\102\051\103\054\122\001\002\000\004\020\u0137\001\002" +
    "\000\040\003\uffb7\011\uffb7\017\uffb7\022\uffb7\023\uffb7\030" +
    "\uffb7\031\uffb7\033\uffb7\040\uffb7\044\uffb7\046\uffb7\047\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\001\002\000\040\003\335\011" +
    "\263\017\267\022\uff8b\023\055\030\334\031\261\033\301" +
    "\040\265\044\256\046\260\047\253\055\254\056\uff8b\057" +
    "\uff8b\001\002\000\040\003\uffb7\011\uffb7\017\uffb7\022\uffb7" +
    "\023\uffb7\030\uffb7\031\uffb7\033\uffb7\040\uffb7\044\uffb7\046" +
    "\uffb7\047\uffb7\055\uffb7\056\uffb7\057\uffb7\001\002\000\040" +
    "\003\335\011\263\017\267\022\uff8a\023\055\030\334\031" +
    "\261\033\301\040\265\044\256\046\260\047\253\055\254" +
    "\056\uff8a\057\uff8a\001\002\000\010\022\u013c\056\u012e\057" +
    "\u012c\001\002\000\042\003\uff91\011\uff91\017\uff91\022\uff91" +
    "\023\uff91\030\uff91\031\uff91\032\uff91\033\uff91\040\uff91\044" +
    "\uff91\046\uff91\047\uff91\055\uff91\056\uff91\057\uff91\001\002" +
    "\000\012\003\u012a\022\uff8c\056\uff8c\057\uff8c\001\002\000" +
    "\010\022\u013f\056\u012e\057\u012c\001\002\000\042\003\uff90" +
    "\011\uff90\017\uff90\022\uff90\023\uff90\030\uff90\031\uff90\032" +
    "\uff90\033\uff90\040\uff90\044\uff90\046\uff90\047\uff90\055\uff90" +
    "\056\uff90\057\uff90\001\002\000\004\026\u0141\001\002\000" +
    "\004\021\u0142\001\002\000\012\003\u012a\022\uff8c\056\uff8c" +
    "\057\uff8c\001\002\000\010\022\u0144\056\u012e\057\u012c\001" +
    "\002\000\042\003\uff8f\011\uff8f\017\uff8f\022\uff8f\023\uff8f" +
    "\030\uff8f\031\uff8f\032\uff8f\033\uff8f\040\uff8f\044\uff8f\046" +
    "\uff8f\047\uff8f\055\uff8f\056\uff8f\057\uff8f\001\002\000\036" +
    "\003\uff79\011\uff79\013\uff79\014\uff79\015\uff79\017\uff79\025" +
    "\uff79\026\uff79\034\uff79\035\uff79\037\uff79\047\uff79\051\uff79" +
    "\054\uff79\001\002\000\004\017\u0148\001\002\000\042\003" +
    "\uffd3\011\uffd3\017\uffd3\022\uffd3\023\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\040\uffd3\044\uffd3\046\uffd3\047\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\001\002\000\042\003\uffd2\011\uffd2" +
    "\017\uffd2\022\uffd2\023\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\040\uffd2\044\uffd2\046\uffd2\047\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\001\002\000\006\003\u014a\011\u0119\001\002\000" +
    "\006\017\uff67\047\uff62\001\002\000\030\011\115\013\123" +
    "\014\107\015\106\025\131\034\121\035\114\037\104\047" +
    "\102\051\125\054\132\001\002\000\032\003\u014e\011\115" +
    "\013\123\014\107\015\106\025\131\034\121\035\114\037" +
    "\104\047\102\051\125\054\132\001\002\000\010\003\u0151" +
    "\026\u0152\027\343\001\002\000\004\026\u014f\001\002\000" +
    "\034\003\326\011\263\017\267\021\324\023\055\030\325" +
    "\031\261\033\301\040\265\044\256\046\260\047\253\055" +
    "\254\001\002\000\042\003\uff9a\011\uff9a\017\uff9a\022\uff9a" +
    "\023\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\040\uff9a\044" +
    "\uff9a\046\uff9a\047\uff9a\055\uff9a\056\uff9a\057\uff9a\001\002" +
    "\000\034\003\326\011\263\017\267\021\324\023\055\030" +
    "\325\031\261\033\301\040\265\044\256\046\260\047\253" +
    "\055\254\001\002\000\034\003\326\011\263\017\267\021" +
    "\324\023\055\030\325\031\261\033\301\040\265\044\256" +
    "\046\260\047\253\055\254\001\002\000\042\003\uff9c\011" +
    "\uff9c\017\uff9c\022\uff9c\023\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\033\uff9c\040\uff9c\044\uff9c\046\uff9c\047\uff9c\055\uff9c\056" +
    "\uff9c\057\uff9c\001\002\000\042\003\uff9b\011\uff9b\017\uff9b" +
    "\022\uff9b\023\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\040" +
    "\uff9b\044\uff9b\046\uff9b\047\uff9b\055\uff9b\056\uff9b\057\uff9b" +
    "\001\002\000\006\026\u0156\027\343\001\002\000\034\003" +
    "\326\011\263\017\267\021\324\023\055\030\325\031\261" +
    "\033\301\040\265\044\256\046\260\047\253\055\254\001" +
    "\002\000\042\003\uff99\011\uff99\017\uff99\022\uff99\023\uff99" +
    "\030\uff99\031\uff99\032\uff99\033\uff99\040\uff99\044\uff99\046" +
    "\uff99\047\uff99\055\uff99\056\uff99\057\uff99\001\002\000\036" +
    "\003\uff7a\011\uff7a\013\uff7a\014\uff7a\015\uff7a\017\uff7a\025" +
    "\uff7a\026\uff7a\034\uff7a\035\uff7a\037\uff7a\047\uff7a\051\uff7a" +
    "\054\uff7a\001\002\000\032\003\274\011\263\017\267\022" +
    "\u015a\023\055\031\261\033\301\040\265\044\256\046\260" +
    "\047\253\055\254\001\002\000\020\007\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\017\uffc2\022\uffc2\023\uffc2\001\002\000\004" +
    "\021\u0163\001\002\000\006\003\u015d\021\u015e\001\002\000" +
    "\032\003\uffc9\011\uffc9\017\uffc9\022\uffc9\023\uffc9\031\uffc9" +
    "\033\uffc9\040\uffc9\044\uffc9\046\uffc9\047\uffc9\055\uffc9\001" +
    "\002\000\032\003\uffc9\011\uffc9\017\uffc9\022\uffc9\023\uffc9" +
    "\031\uffc9\033\uffc9\040\uffc9\044\uffc9\046\uffc9\047\uffc9\055" +
    "\uffc9\001\002\000\032\003\274\011\263\017\267\022\u0160" +
    "\023\055\031\261\033\301\040\265\044\256\046\260\047" +
    "\253\055\254\001\002\000\020\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\017\uffc7\022\uffc7\023\uffc7\001\002\000\032\003" +
    "\274\011\263\017\267\022\u0162\023\055\031\261\033\301" +
    "\040\265\044\256\046\260\047\253\055\254\001\002\000" +
    "\020\007\uffc3\010\uffc3\011\uffc3\012\uffc3\017\uffc3\022\uffc3" +
    "\023\uffc3\001\002\000\032\003\uffc9\011\uffc9\017\uffc9\022" +
    "\uffc9\023\uffc9\031\uffc9\033\uffc9\040\uffc9\044\uffc9\046\uffc9" +
    "\047\uffc9\055\uffc9\001\002\000\032\003\274\011\263\017" +
    "\267\022\u0165\023\055\031\261\033\301\040\265\044\256" +
    "\046\260\047\253\055\254\001\002\000\020\007\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\017\uffc5\022\uffc5\023\uffc5\001\002" +
    "\000\010\003\uffdf\024\u0169\026\uffdf\001\002\000\006\011" +
    "\061\023\055\001\002\000\006\003\uffde\026\uffde\001\002" +
    "\000\010\003\u016a\011\061\023\055\001\002\000\006\003" +
    "\uffdd\026\uffdd\001\002\000\006\003\uffe0\026\uffe0\001\002" +
    "\000\032\003\uffc9\011\uffc9\017\uffc9\022\uffc9\023\uffc9\031" +
    "\uffc9\033\uffc9\040\uffc9\044\uffc9\046\uffc9\047\uffc9\055\uffc9" +
    "\001\002\000\032\003\274\011\263\017\267\022\u016e\023" +
    "\055\031\261\033\301\040\265\044\256\046\260\047\253" +
    "\055\254\001\002\000\020\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\017\uffc4\022\uffc4\023\uffc4\001\002\000\020\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\017\uffda\022\uffda\023\uffda\001" +
    "\002\000\020\007\uffef\010\uffef\011\uffef\012\uffef\017\uffef" +
    "\022\uffef\023\uffef\001\002\000\010\003\uff7e\011\uff7e\025" +
    "\243\001\002\000\020\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\017\uffe9\022\uffe9\023\uffe9\001\002\000\006\011\061\023" +
    "\055\001\002\000\020\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\017\uffeb\022\uffeb\023\uffeb\001\002\000\020\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\017\uffee\022\uffee\023\uffee\001\002" +
    "\000\020\007\ufff0\010\ufff0\011\ufff0\012\ufff0\017\ufff0\022" +
    "\ufff0\023\ufff0\001\002\000\004\025\243\001\002\000\004" +
    "\025\243\001\002\000\020\007\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\017\uffd7\022\uffd7\023\uffd7\001\002\000\020\007\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\017\uffd9\022\uffd9\023\uffd9\001" +
    "\002\000\020\007\uffe5\010\uffe5\011\uffe5\012\uffe5\017\uffe5" +
    "\022\uffe5\023\uffe5\001\002\000\020\007\053\010\060\011" +
    "\056\012\051\017\054\022\u017d\023\055\001\002\000\004" +
    "\002\ufff2\001\002\000\004\011\u017f\001\002\000\004\021" +
    "\u0180\001\002\000\020\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\017\uffe5\022\uffe5\023\uffe5\001\002\000\020\007\053\010" +
    "\060\011\056\012\051\017\054\022\u0182\023\055\001\002" +
    "\000\004\002\ufff3\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0181\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\022\001\001\000\002\001\001\000\004" +
    "\007\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\041\001\001\000\002\001\001\000\004\007\027\001" +
    "\001\000\004\004\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\031\001\001\000\002\001\001\000" +
    "\004\004\033\001\001\000\002\001\001\000\004\004\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\044\001\001\000\012\011\045\012\051\013" +
    "\046\045\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\u0173\013\u0171\045\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\u016f\001\001\000\006\023" +
    "\067\026\066\001\001\000\006\012\063\045\061\001\001" +
    "\000\002\001\001\000\006\023\067\026\066\001\001\000" +
    "\006\012\064\045\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\071\001\001\000\006\023\074\026\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\027\112\030\110\031\100\032\107\044\104\051\111\053" +
    "\115\001\001\000\002\001\001\000\012\030\110\032\107" +
    "\044\236\051\111\001\001\000\020\030\110\031\100\032" +
    "\107\037\235\044\125\051\111\053\127\001\001\000\012" +
    "\030\110\032\107\044\234\051\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\030\110\032\107\044\216\051\111\001\001\000\002\001" +
    "\001\000\006\030\177\052\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\030\110\031\100\032\107\037" +
    "\126\044\125\051\111\053\127\001\001\000\020\030\110" +
    "\031\100\032\107\037\174\044\125\051\111\053\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\030\110\031\100\032\107\037\133\044\132\051" +
    "\111\053\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\030\110\032" +
    "\107\044\167\051\111\001\001\000\002\001\001\000\014" +
    "\030\110\031\153\032\107\044\155\051\111\001\001\000" +
    "\012\030\110\032\107\044\152\051\111\001\001\000\012" +
    "\030\110\032\107\044\151\051\111\001\001\000\012\030" +
    "\110\032\107\044\150\051\111\001\001\000\002\001\001" +
    "\000\012\030\110\032\107\044\145\051\111\001\001\000" +
    "\002\001\001\000\012\030\110\032\107\044\147\051\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\110\032\162\051\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\030\110" +
    "\032\107\044\165\051\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\030\110\031\100\032" +
    "\107\044\172\051\111\053\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\177\052\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\177\052\215\001\001" +
    "\000\022\010\207\027\206\030\110\031\100\032\107\044" +
    "\104\051\111\053\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\027\214\030\110\031" +
    "\100\032\107\044\104\051\111\053\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\030\110\031\220\032\107" +
    "\037\221\044\125\051\111\053\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\177\052\223\001\001" +
    "\000\002\001\001\000\006\030\110\051\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\110\051\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\030" +
    "\110\032\107\044\233\051\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\u016e\001\001\000\004\047\241\001\001\000\002" +
    "\001\001\000\006\033\245\045\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u0158\001\001\000\004\035\251\001\001\000" +
    "\036\012\267\015\274\016\271\017\265\020\270\021\276" +
    "\025\272\026\277\030\254\034\301\045\061\050\275\051" +
    "\256\052\263\001\001\000\006\030\110\051\u0157\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\027\u0145\030" +
    "\110\031\100\032\107\044\104\051\111\053\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\012\267\015\274\016\271\017\265\020\270\021\276\025" +
    "\272\026\277\030\254\034\326\045\061\046\u0101\050\275" +
    "\051\256\052\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\012\267\015\274\016\271\017\265\020\270\021\276" +
    "\025\272\026\277\030\254\034\371\041\367\045\061\050" +
    "\275\051\256\052\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\012" +
    "\304\025\311\026\277\030\110\042\361\045\061\051\256" +
    "\001\001\000\020\012\304\025\311\026\277\030\110\042" +
    "\310\045\061\051\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\030\110\031\100\032" +
    "\107\036\315\037\312\043\355\044\125\051\313\053\127" +
    "\001\001\000\024\030\110\031\100\032\107\036\315\037" +
    "\312\043\314\044\125\051\313\053\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\345\026\277\030\110\051\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\321\026\277\030\110\051" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\012\267\015\274\016\271\017\265\020\270\021\276\025" +
    "\272\026\277\030\254\034\326\045\061\046\327\050\275" +
    "\051\256\052\263\001\001\000\004\040\331\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\012\267\015\274\016" +
    "\271\017\265\020\270\021\276\025\272\026\277\030\254" +
    "\034\335\045\061\050\275\051\256\052\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\027" +
    "\341\030\110\031\100\032\107\044\104\051\111\053\115" +
    "\001\001\000\002\001\001\000\022\030\110\031\100\032" +
    "\107\036\344\037\312\044\125\051\313\053\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\012\267\015\274\016\271\017\265" +
    "\020\270\021\276\025\272\026\277\030\254\034\326\045" +
    "\061\046\350\050\275\051\256\052\263\001\001\000\002" +
    "\001\001\000\040\012\267\015\274\016\271\017\265\020" +
    "\270\021\276\025\272\026\277\030\254\034\326\045\061" +
    "\046\354\050\275\051\256\052\263\001\001\000\040\012" +
    "\267\015\274\016\271\017\265\020\270\021\276\025\272" +
    "\026\277\030\254\034\326\045\061\046\353\050\275\051" +
    "\256\052\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\356\026\277\030\110\051\256\001\001\000" +
    "\002\001\001\000\040\012\267\015\274\016\271\017\265" +
    "\020\270\021\276\025\272\026\277\030\254\034\326\045" +
    "\061\046\360\050\275\051\256\052\263\001\001\000\002" +
    "\001\001\000\024\030\110\031\100\032\107\036\315\037" +
    "\312\043\362\044\125\051\313\053\127\001\001\000\012" +
    "\025\363\026\277\030\110\051\256\001\001\000\002\001" +
    "\001\000\040\012\267\015\274\016\271\017\265\020\270" +
    "\021\276\025\272\026\277\030\254\034\326\045\061\046" +
    "\365\050\275\051\256\052\263\001\001\000\002\001\001" +
    "\000\004\035\375\001\001\000\004\014\373\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\012\267\015\274" +
    "\016\271\017\265\020\270\021\276\025\272\026\277\030" +
    "\254\034\371\041\374\045\061\050\275\051\256\052\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\012" +
    "\267\015\274\016\271\017\265\020\270\021\276\025\272" +
    "\026\277\030\254\034\301\045\061\050\275\051\256\052" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\030\110\031\100\032\107\036\u010f\037\312" +
    "\044\125\051\313\053\127\001\001\000\022\030\110\031" +
    "\100\032\107\036\u0106\037\312\044\125\051\313\053\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\030\110\031\100\032\107\036\u0113\037\312\044\125\051" +
    "\313\053\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\254\051" +
    "\226\052\215\001\001\000\002\001\001\000\022\030\110" +
    "\031\100\032\107\036\u0120\037\312\044\125\051\313\053" +
    "\127\001\001\000\022\030\110\031\100\032\107\036\u011b" +
    "\037\312\044\125\051\313\053\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\027\u013f\030\110\031\100\032\107\044\104\051\111" +
    "\053\115\001\001\000\020\027\u0124\030\110\031\100\032" +
    "\107\044\104\051\111\053\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u013a\001" +
    "\001\000\004\022\u012a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\027" +
    "\u012e\030\110\031\100\032\107\044\104\051\111\053\115" +
    "\001\001\000\002\001\001\000\004\040\u0130\001\001\000" +
    "\036\012\267\015\274\016\271\017\265\020\270\021\276" +
    "\025\272\026\277\030\254\034\335\045\061\050\275\051" +
    "\256\052\263\001\001\000\004\040\u0132\001\001\000\036" +
    "\012\267\015\274\016\271\017\265\020\270\021\276\025" +
    "\272\026\277\030\254\034\335\045\061\050\275\051\256" +
    "\052\263\001\001\000\002\001\001\000\020\027\u0135\030" +
    "\110\031\100\032\107\044\104\051\111\053\115\001\001" +
    "\000\002\001\001\000\004\040\u0137\001\001\000\036\012" +
    "\267\015\274\016\271\017\265\020\270\021\276\025\272" +
    "\026\277\030\254\034\335\045\061\050\275\051\256\052" +
    "\263\001\001\000\004\040\u0139\001\001\000\036\012\267" +
    "\015\274\016\271\017\265\020\270\021\276\025\272\026" +
    "\277\030\254\034\335\045\061\050\275\051\256\052\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u013d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u0142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\254\051\231\052\203\001\001\000\002\001\001\000\022" +
    "\030\110\031\100\032\107\036\u0154\037\312\044\125\051" +
    "\313\053\127\001\001\000\022\030\110\031\100\032\107" +
    "\036\u014c\037\312\044\125\051\313\053\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\012\267\015\274" +
    "\016\271\017\265\020\270\021\276\025\272\026\277\030" +
    "\254\034\326\045\061\046\u014f\050\275\051\256\052\263" +
    "\001\001\000\002\001\001\000\040\012\267\015\274\016" +
    "\271\017\265\020\270\021\276\025\272\026\277\030\254" +
    "\034\326\045\061\046\u0153\050\275\051\256\052\263\001" +
    "\001\000\040\012\267\015\274\016\271\017\265\020\270" +
    "\021\276\025\272\026\277\030\254\034\326\045\061\046" +
    "\u0152\050\275\051\256\052\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\012\267\015" +
    "\274\016\271\017\265\020\270\021\276\025\272\026\277" +
    "\030\254\034\326\045\061\046\u0156\050\275\051\256\052" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\012\267\015\274\016\271\017\265\020\270\021\276\025" +
    "\272\026\277\030\254\034\301\045\061\050\275\051\256" +
    "\052\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u0160\001\001\000\004\035\u015e" +
    "\001\001\000\036\012\267\015\274\016\271\017\265\020" +
    "\270\021\276\025\272\026\277\030\254\034\301\045\061" +
    "\050\275\051\256\052\263\001\001\000\002\001\001\000" +
    "\036\012\267\015\274\016\271\017\265\020\270\021\276" +
    "\025\272\026\277\030\254\034\301\045\061\050\275\051" +
    "\256\052\263\001\001\000\002\001\001\000\004\035\u0163" +
    "\001\001\000\036\012\267\015\274\016\271\017\265\020" +
    "\270\021\276\025\272\026\277\030\254\034\301\045\061" +
    "\050\275\051\256\052\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\u0167\045\244\001\001\000\002" +
    "\001\001\000\006\033\u016a\045\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u016c\001\001\000\036" +
    "\012\267\015\274\016\271\017\265\020\270\021\276\025" +
    "\272\026\277\030\254\034\301\045\061\050\275\051\256" +
    "\052\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\u0175\001\001\000\002\001\001" +
    "\000\006\012\u0174\045\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\u0179\001\001" +
    "\000\004\047\u0178\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u017b\001\001\000\012\011\045\012\051" +
    "\013\046\045\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u0180\001\001\000\012" +
    "\011\045\012\051\013\046\045\056\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JavaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JavaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JavaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  List<Variable> attrFunc = new ArrayList<>();
  List<String> methods = new ArrayList<>();
  List<Variable> vars = new ArrayList<>();

  private void addAttr(String name, String type) {
    attrFunc.add(new Variable(name, type));
  }

  private void addVar(String name, String type) {
    vars.add(new Variable(name, type));
  }

  private void addError(int line, int col, String msg) {
    ErrorsHolder.addSyntacticalError(line, col, msg);
  }

  private void setScope(String scope, List<Variable> vars) {
    for (Variable var : vars) {
      var.setScope(scope);
      VariablesHolder.addVariable(var);
    }
  }

  private void addConstructor(String name) {
    setScope(String.format("Constructor %s", name), attrFunc);
    setScope(String.format("Constructor %s", name), vars);
    MethodsHolder.addMethod(name, name, attrFunc.toArray(new Variable[0]));
    methods.add(name);
    vars.clear();
  }

  private void addMethod(String name, String type) {
    setScope(String.format("Metodo %s", name), attrFunc);
    setScope(String.format("Metodo %s", name), vars);
    MethodsHolder.addMethod(name, type, attrFunc.toArray(new Variable[0]));
    methods.add(name);
    vars.clear();
  }

  private void addClass(String name) {
    setScope(String.format("Clase %s", name), vars);
    ClassesHolder.addClass(name, methods.toArray(new String[0]));
    methods.clear();
    vars.clear();
  }

  public JavaParser(JavaLexer lexer) {
    super(lexer);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JavaParser$actions {
  private final JavaParser parser;

  /** Constructor */
  CUP$JavaParser$actions(JavaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JavaParser$do_action_part00000000(
    int                        CUP$JavaParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaParser$parser,
    java.util.Stack            CUP$JavaParser$stack,
    int                        CUP$JavaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JavaParser$result;

      /* select the action based on the action number */
      switch (CUP$JavaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= syntax EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		RESULT = start_val;
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JavaParser$parser.done_parsing();
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // syntax ::= packag imports clase 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("syntax",0, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // syntax ::= 
            {
              Object RESULT =null;
		 addError(0, 0, "a <clase> para tener un archivo java valido (o util)"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("syntax",0, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // packag ::= PACKAGE ID pack_item SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("packag",1, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // packag ::= PACKAGE ID SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("packag",1, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // packag ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("packag",1, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // packag ::= PACKAGE ID SEPARADOR error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " <import>, un modificador de acceso o un <class>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("packag",1, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // packag ::= PACKAGE ID pack_item SEPARADOR error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " <import>, un modificador de acceso o un <class>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("packag",1, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // packag ::= PACKAGE error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " <paquete> valido despues de 'package'"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("packag",1, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // imports ::= IMPORT ID pack_item SEPARADOR imports 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("imports",2, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // imports ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("imports",2, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // imports ::= IMPORT ID SEPARADOR error imports 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addError(getleft, getright, " <import>, un modificador de acceso o un <class>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("imports",2, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // imports ::= IMPORT ID pack_item SEPARADOR error imports 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addError(getleft, getright, " <import>, un modificador de acceso o un <class>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("imports",2, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // imports ::= IMPORT ID error imports 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addError(getleft, getright, " <punto> despues del <id> del paquete"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("imports",2, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // clase ::= VISIBILITY CLASS ID LLA_IZQ class_items LLA_DER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		 addClass((String) id); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("clase",3, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // clase ::= CLASS ID LLA_IZQ class_items LLA_DER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		 addClass((String) id); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("clase",3, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // clase ::= CLASS error class_items LLA_DER 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		 addError(getleft, getright, " <id> despues de <clase>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("clase",3, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constructor ::= VISIBILITY ID fun_body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addConstructor((String) id); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("constructor",7, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constructor ::= ID fun_body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addConstructor((String) id); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("constructor",7, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // class_items ::= class_items VISIBILITY FINAL full_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // class_items ::= class_items FINAL VISIBILITY full_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // class_items ::= class_items FINAL full_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // class_items ::= class_items VISIBILITY full_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // class_items ::= class_items full_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // class_items ::= class_items VISIBILITY dec_func 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // class_items ::= class_items dec_func 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // class_items ::= class_items constructor 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // class_items ::= class_items SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // class_items ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // pack_item ::= PUNTO ID pack_item 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("pack_item",5, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // pack_item ::= PUNTO ID 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("pack_item",5, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // pack_item ::= PUNTO POR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("pack_item",5, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pack_item ::= PUNTO error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " <id> o <*> despues del punto"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("pack_item",5, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec_attr ::= type ID COMA dec_attr 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		 addAttr((String) id, (String) type); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("dec_attr",25, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec_attr ::= type ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addAttr((String) id, (String) type); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("dec_attr",25, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_attr ::= type error dec_attr 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addError(getleft, getright, " <id> despues del tipo del atributo"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("dec_attr",25, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dec_attr ::= type ID COMA error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, "a declaracion de atributo"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("dec_attr",25, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // attr_inv ::= valor 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("attr_inv",6, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // attr_inv ::= attr_inv COMA valor 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("attr_inv",6, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dec_func ::= type ID fun_body 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addMethod((String) id, (String) type); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("dec_func",9, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dec_func ::= VOID ID fun_body 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addMethod((String) id, (String) type); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("dec_func",9, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dec_func ::= type error fun_body 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addError(getleft, getright, " <id> para la declaracion de la funcion"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("dec_func",9, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_func ::= VOID error fun_body 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addError(getleft, getright, " <id> para la declaracion de la funcion"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("dec_func",9, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruct ::= full_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruct ::= assign SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruct ::= concat_ SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruct ::= RETURN SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruct ::= RETURN valor SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruct ::= for 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruct ::= if 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruct ::= while 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruct ::= do_while 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruct ::= switch 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruct ::= SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruct ::= assign error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " <valor> o un <separador>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // body ::= body instruct 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("body",27, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // body ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("body",27, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // body ::= body error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, "a instruccion valida"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("body",27, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // fun_body ::= PAR_IZQ dec_attr PAR_DER LLA_IZQ body LLA_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("fun_body",37, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fun_body ::= PAR_IZQ PAR_DER LLA_IZQ body LLA_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("fun_body",37, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fun_body ::= PAR_IZQ dec_attr error LLA_IZQ body LLA_DER 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		 addError(getleft, getright, "a <parentesis derecho>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("fun_body",37, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // fun_body ::= PAR_IZQ error LLA_IZQ body LLA_DER 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		 addError(getleft, getright, "a <parentesis derecho> o una declaracion de atributos"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("fun_body",37, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // fun_body ::= PAR_IZQ dec_attr PAR_DER error body LLA_DER 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		 addError(getleft, getright, "a <llave izquierda>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("fun_body",37, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fun_body ::= PAR_IZQ PAR_DER error body LLA_DER 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		 addError(getleft, getright, "a <llave izquierda>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("fun_body",37, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bool_ ::= NEGAR bool_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool_",29, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bool_ ::= valor_ RELATIONAL1 valor_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool_",29, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bool_ ::= expr RELATIONAL2 expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool_",29, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bool_ ::= PAR_IZQ bool_ PAR_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool_",29, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bool_ ::= BOOL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool_",29, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bool ::= bool LOGIC bool 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool",28, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bool ::= bool_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool",28, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bool ::= concat 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool",28, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cic_inst ::= cic_inst instruct 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("cic_inst",30, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cic_inst ::= cic_inst BREAK SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("cic_inst",30, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cic_inst ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("cic_inst",30, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cic_inst ::= cic_inst error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, "a instruccion valida"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("cic_inst",30, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // control ::= LLA_IZQ body LLA_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("control",31, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // control ::= instruct 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("control",31, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // control ::= error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " ambito valido"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("control",31, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // control_ ::= LLA_IZQ cic_inst LLA_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("control_",36, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // control_ ::= instruct 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("control_",36, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // control_ ::= BREAK SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("control_",36, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // control_ ::= error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " ambito valido"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("control_",36, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // if ::= if_ control else 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if_ ::= IF PAR_IZQ bool PAR_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("if_",38, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // if_ ::= IF PAR_IZQ bool error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " <parentesis derecho>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("if_",38, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if_ ::= IF PAR_IZQ error PAR_DER 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addError(getleft, getright, " <bool>, <id> o una expresion booleana"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("if_",38, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if_ ::= IF error bool PAR_DER 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		 addError(getleft, getright, " <parentesis izquierdo>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("if_",38, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // else ::= ELSE control 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("else",10, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // else ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("else",10, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_dec ::= full_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for_dec",32, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // for_dec ::= assign 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for_dec",32, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // for_dec ::= SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for_dec",32, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // for_bool ::= bool SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for_bool",33, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // for_bool ::= SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for_bool",33, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // for ::= FOR PAR_IZQ for_dec for_bool assign PAR_DER control_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for",11, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // for ::= FOR PAR_IZQ for_dec for_bool assign error control_ 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addError(getleft, getright, " <parentesis derecho>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for",11, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for ::= FOR PAR_IZQ for_dec for_bool error PAR_DER control_ 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		 addError(getleft, getright, "a asignacion"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for",11, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // for ::= FOR PAR_IZQ for_dec error assign PAR_DER control_ 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		 addError(getleft, getright, " <separador> o una expresion booleana"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for",11, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // for ::= FOR PAR_IZQ error for_bool assign PAR_DER control_ 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).value;
		 addError(getleft, getright, " <separador>, una declaracion o una asignacion"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for",11, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // for ::= FOR error for_dec for_bool assign PAR_DER control_ 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-5)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-5)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-5)).value;
		 addError(getleft, getright, " <parentesis izquierdo>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for",11, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // while ::= WHILE PAR_IZQ bool PAR_DER control_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("while",12, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // while ::= WHILE PAR_IZQ bool error control_ 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addError(getleft, getright, " <parentesis derecho>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("while",12, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // while ::= WHILE PAR_IZQ error PAR_DER control_ 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		 addError(getleft, getright, " <bool>, <id> o una expresion booleana"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("while",12, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // while ::= WHILE error bool PAR_DER control_ 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		 addError(getleft, getright, " <parentesis izquierdo>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("while",12, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // do_while ::= DO control_ WHILE PAR_IZQ bool PAR_DER SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("do_while",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // do_while ::= DO control_ WHILE PAR_IZQ bool PAR_DER error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " <separador>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("do_while",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // do_while ::= DO control_ WHILE PAR_IZQ bool error SEPARADOR 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addError(getleft, getright, " <parentesis derecho>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("do_while",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // do_while ::= DO control_ WHILE PAR_IZQ error PAR_DER SEPARADOR 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		 addError(getleft, getright, " <bool>, <id> o una expresion booleana"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("do_while",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // do_while ::= DO control_ WHILE error bool PAR_DER SEPARADOR 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		 addError(getleft, getright, " <parentesis izquierdo>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("do_while",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // do_while ::= DO control_ error PAR_IZQ bool PAR_DER SEPARADOR 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).value;
		 addError(getleft, getright, " <while>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("do_while",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // switch ::= SWITCH PAR_IZQ valor PAR_DER LLA_IZQ case LLA_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("switch",15, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // switch ::= SWITCH PAR_IZQ valor PAR_DER error case LLA_DER 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		 addError(getleft, getright, " <llave izquierda>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("switch",15, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // switch ::= SWITCH PAR_IZQ valor error LLA_IZQ case LLA_DER 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		 addError(getleft, getright, " <parentesis derecho>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("switch",15, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // switch ::= SWITCH error valor PAR_DER LLA_IZQ case LLA_DER 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-5)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-5)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-5)).value;
		 addError(getleft, getright, " <parentesis izquierdo>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("switch",15, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // case ::= case CASE valor COLON cic_inst 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("case",16, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // case ::= case DEFAULT COLON cic_inst 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("case",16, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // case ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("case",16, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // case ::= error CASE valor COLON cic_inst 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).value;
		 addError(getleft, getright, " <case> o <default> valido"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("case",16, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // case ::= error DEFAULT COLON cic_inst 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		 addError(getleft, getright, " <case> o <default> valido"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("case",16, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // func ::= ID PAR_IZQ attr_inv PAR_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("func",22, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // func ::= ID PAR_IZQ PAR_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("func",22, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // func ::= ID PAR_IZQ attr_inv error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " <parentesis derecho>"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("func",22, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // full_dec ::= type var_dec more_dec SEPARADOR 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		 addVar((String) id, (String) type); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("full_dec",8, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // var_dec ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 RESULT = id; 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("var_dec",17, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // var_dec ::= assign_ 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 RESULT = id; 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("var_dec",17, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // var_dec ::= ID error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " <igual> en la asignacion"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("var_dec",17, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // more_dec ::= COMA var_dec more_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("more_dec",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // more_dec ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("more_dec",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // more_dec ::= COMA error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, "a declaracion extra que fuese valida"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("more_dec",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // type ::= TYPE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 RESULT = type; 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("type",35, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // type ::= ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 RESULT = type; 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("type",35, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // assign_ ::= ID IGUAL valor 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		 RESULT = id; 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("assign_",20, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // assign ::= assign_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("assign",19, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // assign ::= ID IGUAL_ valor 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("assign",19, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // assign ::= UNARY concat 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("assign",19, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // assign ::= concat UNARY 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("assign",19, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // assign ::= ID error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " operador de asignacion o un operador unario"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("assign",19, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // valor_ ::= string 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor_",41, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // valor_ ::= expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor_",41, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // valor_ ::= BOOL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor_",41, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // valor_ ::= NEW concat_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor_",41, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // valor_ ::= NEW error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " llamado a constructor (o metodo)"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor_",41, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // valor ::= valor_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // valor ::= BOOL LOGIC bool_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // valor ::= NEGAR bool_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // valor ::= valor_ RELATIONAL1 bool_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // valor ::= expr RELATIONAL2 expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // valor ::= valor_ RELATIONAL1 string 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // valor ::= valor_ RELATIONAL1 NEW concat_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // valor ::= error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " separador, coma u operador de expresion valida"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // concat_ ::= func PUNTO concat_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat_",40, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // concat_ ::= ID PUNTO concat_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat_",40, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // concat_ ::= func 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat_",40, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // concat_ ::= func PUNTO error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " llamado a una funcion o constructor"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat_",40, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // concat ::= func PUNTO concat 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat",39, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // concat ::= ID PUNTO concat 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat",39, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // concat ::= func 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat",39, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // concat ::= ID 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat",39, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // concat ::= func PUNTO error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " llamado a un atributo, funcion o constructor"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat",39, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // concat ::= ID PUNTO error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " llamado a un atributo, funcion o constructor"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat",39, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // string ::= LITERAL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // string ::= CHAR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // string ::= expr MAS string 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // string ::= string MAS LITERAL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // string ::= string MAS BOOL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // string ::= string MAS CHAR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // string ::= string MAS numero 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // string ::= string MAS PAR_IZQ expr PAR_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // string ::= string MAS error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " dato valido para concatenar"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // string ::= expr MAS error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addError(getleft, getright, " dato valido para concatenar"); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expr ::= expr MAS expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expr ::= expr POR expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expr ::= expr MENOS expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expr ::= expr DIV expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expr ::= expr MOD expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr ::= PAR_IZQ expr PAR_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr ::= MENOS expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expr ::= UNARY expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expr ::= expr UNARY 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expr ::= numero 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // numero ::= concat 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("numero",24, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // numero ::= ENTERO 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("numero",24, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // numero ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("numero",24, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JavaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JavaParser$do_action(
    int                        CUP$JavaParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaParser$parser,
    java.util.Stack            CUP$JavaParser$stack,
    int                        CUP$JavaParser$top)
    throws java.lang.Exception
    {
              return CUP$JavaParser$do_action_part00000000(
                               CUP$JavaParser$act_num,
                               CUP$JavaParser$parser,
                               CUP$JavaParser$stack,
                               CUP$JavaParser$top);
    }
}

}
