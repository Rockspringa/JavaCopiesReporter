
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.mooncoder.model.analyzer.syntax;

import edu.mooncoder.model.analyzer.lexic.HtmlLexer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class HtmlParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tokens.class;
}

  /** Default constructor. */
  @Deprecated
  public HtmlParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public HtmlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public HtmlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\002\000\002\003\003" +
    "\000\002\003\005\000\002\004\004\000\002\004\004\000" +
    "\002\004\005\000\002\004\005\000\002\006\005\000\002" +
    "\006\010\000\002\007\004\000\002\010\005\000\002\011" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\004\000" +
    "\002\012\003\000\002\013\004\000\002\013\003\000\002" +
    "\020\005\000\002\020\002\000\002\014\003\000\002\014" +
    "\003\000\002\022\003\000\002\022\003\000\002\021\003" +
    "\000\002\021\003\000\002\015\005\000\002\016\003\000" +
    "\002\016\005\000\002\017\003\000\002\017\006\000\002" +
    "\023\005\000\002\023\004\000\002\024\004\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\026\005\000\002\036\005\000" +
    "\002\037\005\000\002\027\003\000\002\027\003\000\002" +
    "\040\011\000\002\030\003\000\002\031\005\000\002\031" +
    "\005\000\002\032\005\000\002\033\006\000\002\033\004" +
    "\000\002\033\002\000\002\034\006\000\002\034\006\000" +
    "\002\034\004\000\002\034\002\000\002\035\004\000\002" +
    "\035\004\000\002\035\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\012\004\ufffd\007\ufffd\010\ufffd\032\ufffd\001" +
    "\002\000\004\002\177\001\002\000\012\004\007\007\006" +
    "\010\013\032\015\001\002\000\004\004\154\001\002\000" +
    "\004\025\170\001\002\000\004\002\000\001\002\000\012" +
    "\004\uffff\007\uffff\010\uffff\032\uffff\001\002\000\012\004" +
    "\ufffe\007\ufffe\010\ufffe\032\ufffe\001\002\000\004\004\154" +
    "\001\002\000\016\004\036\005\141\006\052\013\054\020" +
    "\053\023\042\001\002\000\016\030\024\033\032\035\025" +
    "\037\016\047\017\051\020\001\002\000\012\004\uffc0\023" +
    "\uffc0\040\uffc0\052\uffc0\001\002\000\004\027\131\001\002" +
    "\000\020\030\uffcd\033\uffcd\035\uffcd\037\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\001\002\000\020\030\uffd7\033\uffd7\035\uffd7" +
    "\037\uffd7\047\uffd7\050\uffd7\051\uffd7\001\002\000\024\004" +
    "\uffc0\023\uffc0\030\024\035\025\037\016\047\017\050\uffc0" +
    "\051\020\052\uffc0\001\002\000\020\030\024\033\uffd8\035" +
    "\025\037\016\047\017\050\uffd8\051\020\001\002\000\010" +
    "\031\uffc7\041\076\047\017\001\002\000\012\004\uffc0\023" +
    "\uffc0\036\uffc0\052\uffc0\001\002\000\020\030\uffd4\033\uffd4" +
    "\035\uffd4\037\uffd4\047\uffd4\050\uffd4\051\uffd4\001\002\000" +
    "\020\030\uffd6\033\uffd6\035\uffd6\037\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\001\002\000\004\033\033\001\002\000\020\030" +
    "\uffd5\033\uffd5\035\uffd5\037\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\001\002\000\004\002\uffda\001\002\000\004\002\uffdb\001" +
    "\002\000\012\004\036\023\042\036\040\052\037\001\002" +
    "\000\040\004\uffe2\012\uffe2\014\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\036\uffe2\040\uffe2\044\uffe2" +
    "\046\uffe2\050\uffe2\052\uffe2\001\002\000\040\004\uffe1\012" +
    "\uffe1\014\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\036\uffe1\040\uffe1\044\uffe1\046\uffe1\050\uffe1\052" +
    "\uffe1\001\002\000\022\004\uffc2\023\uffc2\036\uffc2\040\uffc2" +
    "\044\uffc2\046\uffc2\050\uffc2\052\uffc2\001\002\000\020\030" +
    "\uffcc\033\uffcc\035\uffcc\037\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\001\002\000\022\004\uffc1\023\uffc1\036\uffc1\040\uffc1\044" +
    "\uffc1\046\uffc1\050\uffc1\052\uffc1\001\002\000\004\024\043" +
    "\001\002\000\004\004\044\001\002\000\044\004\uffdd\012" +
    "\uffdd\014\uffdd\015\051\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\036\uffdd\040\uffdd\044\uffdd\046" +
    "\uffdd\050\uffdd\052\uffdd\001\002\000\042\004\uffe0\012\uffe0" +
    "\014\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\047\036\uffe0\040\uffe0\044\uffe0\046\uffe0\050\uffe0" +
    "\052\uffe0\001\002\000\042\004\uffdf\012\uffdf\014\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\036\uffdf\040\uffdf\044\uffdf\046\uffdf\050\uffdf\052\uffdf\001" +
    "\002\000\004\004\044\001\002\000\042\004\uffde\012\uffde" +
    "\014\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\036\uffde\040\uffde\044\uffde\046\uffde\050\uffde" +
    "\052\uffde\001\002\000\014\004\036\006\052\013\054\020" +
    "\053\023\042\001\002\000\020\012\uffe4\014\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\001\002\000\014\004" +
    "\036\006\052\013\054\020\053\023\042\001\002\000\014" +
    "\004\036\006\052\013\054\020\053\023\042\001\002\000" +
    "\020\012\uffeb\014\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\001\002\000\020\012\uffe3\014\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\001\002\000\014\016\060" +
    "\017\061\020\062\021\064\022\063\001\002\000\042\004" +
    "\uffdc\012\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\036\uffdc\040\uffdc\044\uffdc\046" +
    "\uffdc\050\uffdc\052\uffdc\001\002\000\014\004\036\006\052" +
    "\013\054\020\053\023\042\001\002\000\014\004\036\006" +
    "\052\013\054\020\053\023\042\001\002\000\014\004\036" +
    "\006\052\013\054\020\053\023\042\001\002\000\014\004" +
    "\036\006\052\013\054\020\053\023\042\001\002\000\020" +
    "\012\uffef\014\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022" +
    "\uffef\001\002\000\020\012\uffee\014\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\001\002\000\020\012\ufff0\014" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\064\022\063\001\002" +
    "\000\020\012\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1\021" +
    "\064\022\063\001\002\000\014\014\072\017\061\020\062" +
    "\021\064\022\063\001\002\000\020\012\uffed\014\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\001\002\000\020" +
    "\012\uffec\014\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\001\002\000\012\031\uffc7\041\076\047\017\050\uffc7" +
    "\001\002\000\010\041\076\047\017\050\uffc7\001\002\000" +
    "\012\042\uffc3\043\101\045\104\047\017\001\002\000\004" +
    "\031\100\001\002\000\020\030\uffca\033\uffca\035\uffca\037" +
    "\uffca\047\uffca\050\uffca\051\uffca\001\002\000\012\004\uffc0" +
    "\023\uffc0\044\uffc0\052\uffc0\001\002\000\014\042\uffc3\043" +
    "\101\045\104\047\017\050\uffc3\001\002\000\012\043\101" +
    "\045\104\047\017\050\uffc3\001\002\000\012\004\uffc0\023" +
    "\uffc0\046\uffc0\052\uffc0\001\002\000\004\042\106\001\002" +
    "\000\012\031\uffc7\041\076\047\017\050\uffc7\001\002\000" +
    "\006\031\uffc9\050\uffc9\001\002\000\012\004\036\023\042" +
    "\046\111\052\037\001\002\000\014\042\uffc3\043\101\045" +
    "\104\047\017\050\uffc3\001\002\000\006\042\uffc5\050\uffc5" +
    "\001\002\000\004\050\114\001\002\000\014\042\uffd1\043" +
    "\uffd1\045\uffd1\047\uffd1\050\uffd1\001\002\000\006\042\uffc4" +
    "\050\uffc4\001\002\000\012\004\036\023\042\044\117\052" +
    "\037\001\002\000\014\042\uffc3\043\101\045\104\047\017" +
    "\050\uffc3\001\002\000\006\042\uffc6\050\uffc6\001\002\000" +
    "\004\050\122\001\002\000\012\031\uffd2\041\uffd2\047\uffd2" +
    "\050\uffd2\001\002\000\006\031\uffc8\050\uffc8\001\002\000" +
    "\006\033\uffd9\050\uffd9\001\002\000\012\004\036\023\042" +
    "\050\uffcf\052\037\001\002\000\004\050\130\001\002\000" +
    "\004\050\uffd0\001\002\000\020\030\uffd3\033\uffd3\035\uffd3" +
    "\037\uffd3\047\uffd3\050\uffd3\051\uffd3\001\002\000\004\004" +
    "\132\001\002\000\004\034\133\001\002\000\004\004\134" +
    "\001\002\000\004\012\135\001\002\000\004\053\136\001" +
    "\002\000\032\004\uffce\023\uffce\030\uffce\035\uffce\037\uffce" +
    "\041\uffce\043\uffce\045\uffce\047\uffce\050\uffce\051\uffce\052" +
    "\uffce\001\002\000\012\004\036\023\042\040\140\052\037" +
    "\001\002\000\020\030\uffcb\033\uffcb\035\uffcb\037\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\001\002\000\006\012\uffe6\017\145" +
    "\001\002\000\004\012\144\001\002\000\014\012\uffe5\017" +
    "\061\020\062\021\064\022\063\001\002\000\012\004\ufff6" +
    "\007\ufff6\010\ufff6\032\ufff6\001\002\000\016\004\036\005" +
    "\146\006\052\013\054\020\053\023\042\001\002\000\006" +
    "\012\uffe6\017\uffe6\001\002\000\006\012\uffe7\017\uffe7\001" +
    "\002\000\006\012\152\017\151\001\002\000\016\004\036" +
    "\005\146\006\052\013\054\020\053\023\042\001\002\000" +
    "\012\004\ufff5\007\ufff5\010\ufff5\032\ufff5\001\002\000\006" +
    "\012\uffe8\017\uffe8\001\002\000\010\011\ufffc\012\ufffc\025" +
    "\170\001\002\000\006\011\165\012\166\001\002\000\006" +
    "\005\160\023\042\001\002\000\012\004\ufff9\007\ufff9\010" +
    "\ufff9\032\ufff9\001\002\000\006\012\uffe7\017\uffe7\001\002" +
    "\000\004\012\uffe9\001\002\000\004\012\163\001\002\000" +
    "\012\004\ufff2\007\ufff2\010\ufff2\032\ufff2\001\002\000\006" +
    "\012\uffea\017\151\001\002\000\004\004\167\001\002\000" +
    "\012\004\ufff7\007\ufff7\010\ufff7\032\ufff7\001\002\000\006" +
    "\011\ufffb\012\ufffb\001\002\000\016\004\ufff4\005\ufff4\006" +
    "\ufff4\013\ufff4\020\ufff4\023\ufff4\001\002\000\006\011\165" +
    "\012\176\001\002\000\014\004\036\006\052\013\054\020" +
    "\053\023\042\001\002\000\012\004\ufffa\007\ufffa\010\ufffa" +
    "\032\ufffa\001\002\000\014\012\175\017\061\020\062\021" +
    "\064\022\063\001\002\000\012\004\ufff3\007\ufff3\010\ufff3" +
    "\032\ufff3\001\002\000\012\004\ufff8\007\ufff8\010\ufff8\032" +
    "\ufff8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\006\002\003\005\004\001\001\000\002\001" +
    "\001\000\012\004\010\006\011\007\013\023\007\001\001" +
    "\000\010\003\170\007\171\010\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\154\007\155\011\156\001\001\000\014\012" +
    "\142\014\141\015\034\021\055\022\054\001\001\000\020" +
    "\024\027\025\022\026\020\030\026\031\030\032\025\040" +
    "\021\001\001\000\004\035\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\024\126\025" +
    "\022\026\020\027\125\030\026\031\030\032\025\035\124" +
    "\040\021\001\001\000\020\024\123\025\022\026\020\030" +
    "\026\031\030\032\025\040\021\001\001\000\010\033\076" +
    "\036\073\040\074\001\001\000\004\035\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\034\021\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\044\017\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\047\001\001\000\002\001\001\000\012\012\056\015\034" +
    "\021\055\022\054\001\001\000\002\001\001\000\012\012" +
    "\072\015\034\021\055\022\054\001\001\000\012\012\070" +
    "\015\034\021\055\022\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\067\015\034\021\055\022\054\001\001\000\012\012" +
    "\066\015\034\021\055\022\054\001\001\000\012\012\065" +
    "\015\034\021\055\022\054\001\001\000\012\012\064\015" +
    "\034\021\055\022\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\033\122" +
    "\036\073\040\074\001\001\000\010\033\120\036\073\040" +
    "\074\001\001\000\010\034\104\037\101\040\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\115\001" +
    "\001\000\010\034\114\037\101\040\102\001\001\000\010" +
    "\034\112\037\101\040\102\001\001\000\004\035\107\001" +
    "\001\000\002\001\001\000\010\033\106\036\073\040\074" +
    "\001\001\000\002\001\001\000\006\015\034\021\040\001" +
    "\001\000\010\034\111\037\101\040\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\034\021\040\001\001\000\010\034\117" +
    "\037\101\040\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\034\021\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\034\021\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\142\014\146" +
    "\015\034\021\055\022\054\001\001\000\002\001\001\000" +
    "\004\020\147\001\001\000\002\001\001\000\014\012\142" +
    "\014\152\015\034\021\055\022\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\161\015\160\001\001\000\002\001\001\000" +
    "\004\020\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\173\015\034\021\055\022\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$HtmlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$HtmlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$HtmlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public HtmlParser(HtmlLexer lexer) {
    super(lexer);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$HtmlParser$actions {
  private final HtmlParser parser;

  /** Constructor */
  CUP$HtmlParser$actions(HtmlParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$HtmlParser$do_action_part00000000(
    int                        CUP$HtmlParser$act_num,
    java_cup.runtime.lr_parser CUP$HtmlParser$parser,
    java.util.Stack            CUP$HtmlParser$stack,
    int                        CUP$HtmlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$HtmlParser$result;

      /* select the action based on the action number */
      switch (CUP$HtmlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= syntax EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		RESULT = start_val;
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$HtmlParser$parser.done_parsing();
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // syntax ::= variables report 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("syntax",0, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // variables ::= variables decl 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("variables",3, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // variables ::= variables assign 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("variables",3, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variables ::= 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("variables",3, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ids ::= ID 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ids ::= ids COMA ID 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= INTEGER int_assign 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= STRING str_assign 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= INTEGER ids SEPARADOR 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl ::= STRING ids SEPARADOR 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // assign ::= assign_ string SEPARADOR 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("assign",4, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // assign ::= assign_ LITERAL MAS string str_ SEPARADOR 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("assign",4, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // assign_ ::= ID IGUAL 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("assign_",5, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // int_assign ::= assign_ expr SEPARADOR 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("int_assign",6, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // str_assign ::= assign_ str SEPARADOR 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("str_assign",7, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr MAS expr 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr MENOS expr 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr POR expr 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr DIV expr 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= PAR_IZQ expr PAR_DER 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= MENOS expr 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= int 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // str ::= LITERAL str_ 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("str",9, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // str ::= result 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("str",9, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // str_ ::= str_ MAS string 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("str_",14, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // str_ ::= 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("str_",14, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // string ::= LITERAL 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("string",10, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // string ::= expr 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("string",10, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // int ::= INT 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("int",16, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // int ::= concat 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("int",16, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // concat ::= result 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("concat",15, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // concat ::= ID 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("concat",15, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // result ::= RESULT PUNTO result_ 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result",11, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // result_ ::= result__ 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result_",12, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // result_ ::= result_ PUNTO result__ 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result_",12, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // result__ ::= ID 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result__",13, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // result__ ::= ID COR_IZQ expr COR_DER 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result__",13, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // report ::= HTML_B tags HTML_E 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("report",17, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // report ::= HTML_B HTML_E 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("report",17, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tags ::= tags_ tags 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags",18, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tags ::= tags_ 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags",18, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tags_ ::= for 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",19, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tags_ ::= br 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",19, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tags_ ::= heading 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",19, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tags_ ::= table 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",19, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // for ::= for__ for_ FOR_E 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for",20, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // for_row ::= for__ rows FOR_E 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for_row",28, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // for_row_ ::= for__ rows_ FOR_E 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for_row_",29, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // for_ ::= tags 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for_",21, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // for_ ::= data 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for_",21, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // for__ ::= FOR_B ITERADOR ID HASTA ID SEPARADOR TAG_FOR 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for__",30, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-6)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // br ::= BR 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("br",22, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // heading ::= H1_B data H1_E 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("heading",23, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // heading ::= H2_B data H2_E 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("heading",23, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // table ::= TABLE_B rows TABLE_E 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("table",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rows ::= TR_B rows_ TR_E rows 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rows ::= for_row rows 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rows ::= 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rows_ ::= TH_B data TH_E rows_ 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",26, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rows_ ::= TD_B data TD_E rows_ 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",26, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rows_ ::= for_row_ rows_ 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",26, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rows_ ::= 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",26, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // data ::= data TEXT 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("data",27, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // data ::= data concat 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("data",27, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // data ::= 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("data",27, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$HtmlParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$HtmlParser$do_action(
    int                        CUP$HtmlParser$act_num,
    java_cup.runtime.lr_parser CUP$HtmlParser$parser,
    java.util.Stack            CUP$HtmlParser$stack,
    int                        CUP$HtmlParser$top)
    throws java.lang.Exception
    {
              return CUP$HtmlParser$do_action_part00000000(
                               CUP$HtmlParser$act_num,
                               CUP$HtmlParser$parser,
                               CUP$HtmlParser$stack,
                               CUP$HtmlParser$top);
    }
}

}
