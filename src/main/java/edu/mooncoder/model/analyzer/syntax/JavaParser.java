
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.mooncoder.model.analyzer.syntax;

import java.util.List;
import java.util.ArrayList;
import edu.mooncoder.model.analyzer.lexic.JavaLexer;
import edu.mooncoder.model.wrappers.Variable;
import edu.mooncoder.model.containers.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JavaParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tokens.class;
}

  /** Default constructor. */
  @Deprecated
  public JavaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JavaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JavaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\003\005\000\002\003\002\000\002\004\007" +
    "\000\002\004\006\000\002\004\002\000\002\005\010\000" +
    "\002\005\007\000\002\011\005\000\002\011\004\000\002" +
    "\006\006\000\002\006\006\000\002\006\005\000\002\006" +
    "\005\000\002\006\004\000\002\006\005\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\002\000" +
    "\002\007\005\000\002\007\004\000\002\007\004\000\002" +
    "\033\006\000\002\033\004\000\002\033\002\000\002\010" +
    "\003\000\002\010\005\000\002\013\005\000\002\013\005" +
    "\000\002\034\003\000\002\034\004\000\002\034\004\000" +
    "\002\034\005\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\035\004\000\002\035\002\000\002\047\010" +
    "\000\002\037\004\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\003\000\002\036\005\000\002" +
    "\036\003\000\002\036\003\000\002\040\004\000\002\040" +
    "\005\000\002\040\002\000\002\041\005\000\002\041\003" +
    "\000\002\046\005\000\002\046\003\000\002\046\004\000" +
    "\002\020\004\000\002\050\011\000\002\014\004\000\002" +
    "\014\002\000\002\042\006\000\002\042\003\000\002\043" +
    "\004\000\002\043\003\000\002\015\011\000\002\016\007" +
    "\000\002\017\011\000\002\021\011\000\002\022\007\000" +
    "\002\022\006\000\002\030\006\000\002\030\005\000\002" +
    "\012\006\000\002\023\003\000\002\023\003\000\002\024" +
    "\005\000\002\024\002\000\002\045\003\000\002\045\003" +
    "\000\002\026\005\000\002\025\003\000\002\025\005\000" +
    "\002\025\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\004\000\002\027\003\000\002\027" +
    "\005\000\002\027\004\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\006\000\002\052\005\000" +
    "\002\052\005\000\002\052\003\000\002\051\005\000\002" +
    "\051\005\000\002\051\003\000\002\051\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\007\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\004\000\002\044\004\000\002\044\004" +
    "\000\002\044\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\012\004\006\005\ufffd\006\ufffd\007\ufffd\001" +
    "\002\000\004\002\u0100\001\002\000\010\005\020\006\ufffa" +
    "\007\ufffa\001\002\000\004\011\007\001\002\000\006\016" +
    "\010\017\011\001\002\000\006\011\014\043\015\001\002" +
    "\000\010\005\ufffe\006\ufffe\007\ufffe\001\002\000\004\017" +
    "\013\001\002\000\010\005\uffff\006\uffff\007\uffff\001\002" +
    "\000\006\016\010\017\uffea\001\002\000\004\017\uffe9\001" +
    "\002\000\004\017\uffeb\001\002\000\006\006\030\007\027" +
    "\001\002\000\004\011\021\001\002\000\006\016\010\017" +
    "\022\001\002\000\010\005\020\006\ufffa\007\ufffa\001\002" +
    "\000\004\017\024\001\002\000\010\005\020\006\ufffa\007" +
    "\ufffa\001\002\000\006\006\ufffc\007\ufffc\001\002\000\006" +
    "\006\ufffb\007\ufffb\001\002\000\004\006\373\001\002\000" +
    "\004\011\032\001\002\000\004\002\000\001\002\000\004" +
    "\021\033\001\002\000\020\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\017\uffec\022\uffec\023\uffec\001\002\000\020\007\042" +
    "\010\047\011\045\012\040\017\043\022\037\023\044\001" +
    "\002\000\020\007\uffef\010\uffef\011\uffef\012\uffef\017\uffef" +
    "\022\uffef\023\uffef\001\002\000\020\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\017\uffee\022\uffee\023\uffee\001\002\000\004" +
    "\002\ufff8\001\002\000\004\011\371\001\002\000\020\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\017\ufff1\022\ufff1\023\ufff1" +
    "\001\002\000\012\010\365\011\363\012\040\023\044\001" +
    "\002\000\020\007\uffed\010\uffed\011\uffed\012\uffed\017\uffed" +
    "\022\uffed\023\uffed\001\002\000\004\011\uffaf\001\002\000" +
    "\006\011\uffae\025\217\001\002\000\004\011\215\001\002" +
    "\000\010\007\052\011\050\023\044\001\002\000\004\011" +
    "\uffae\001\002\000\004\011\055\001\002\000\006\011\050" +
    "\023\044\001\002\000\020\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\017\ufff3\022\ufff3\023\ufff3\001\002\000\020\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\017\ufff4\022\ufff4\023\ufff4\001" +
    "\002\000\010\017\uffb3\024\uffb3\045\065\001\002\000\006" +
    "\017\uffb2\024\uffb2\001\002\000\006\017\uffb0\024\060\001" +
    "\002\000\004\011\055\001\002\000\004\017\062\001\002" +
    "\000\054\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\017\uffb4\022\uffb4\023\uffb4\025\uffb4\030\uffb4\031\uffb4" +
    "\033\uffb4\037\uffb4\040\uffb4\044\uffb4\046\uffb4\047\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\001\002\000\006\017\uffb0\024\060" +
    "\001\002\000\004\017\uffb1\001\002\000\030\011\102\013" +
    "\107\014\073\015\074\025\104\034\105\035\101\037\071" +
    "\047\067\051\070\054\106\001\002\000\020\017\uffa9\020" +
    "\uffa9\024\uffa9\026\uffa9\027\uffa9\036\142\052\uffa9\001\002" +
    "\000\016\011\102\013\107\014\073\025\104\037\071\047" +
    "\067\001\002\000\030\011\102\013\107\014\073\015\074" +
    "\025\115\034\105\035\101\037\071\047\067\051\111\054" +
    "\116\001\002\000\016\011\102\013\107\014\073\025\104" +
    "\037\071\047\067\001\002\000\032\017\uffa8\020\uffa8\024" +
    "\uffa8\026\uffa8\036\124\037\126\041\122\042\127\043\130" +
    "\047\123\052\uffa8\053\210\001\002\000\034\017\uff83\020" +
    "\uff83\024\uff83\026\uff83\027\uff83\036\uff83\037\uff83\041\uff83" +
    "\042\uff83\043\uff83\047\uff83\052\uff83\053\uff83\001\002\000" +
    "\020\017\uff96\020\uff96\024\uff96\026\uff96\027\uff96\036\uff96" +
    "\052\uff96\001\002\000\034\017\uff86\020\uff86\024\uff86\026" +
    "\uff86\027\uff86\036\uff86\037\uff86\041\uff86\042\uff86\043\uff86" +
    "\047\uff86\052\uff86\053\uff86\001\002\000\036\016\206\017" +
    "\uff99\020\uff99\024\uff99\026\uff99\027\uff99\036\uff99\037\uff99" +
    "\041\uff99\042\uff99\043\uff99\047\uff99\052\uff99\053\uff99\001" +
    "\002\000\034\017\uff85\020\uff85\024\uff85\026\uff85\027\uff85" +
    "\036\uff85\037\uff85\041\uff85\042\uff85\043\uff85\047\uff85\052" +
    "\uff85\053\uff85\001\002\000\010\017\uffad\024\uffad\026\uffad" +
    "\001\002\000\020\017\uff97\020\uff97\024\uff97\026\uff97\027" +
    "\uff97\036\uff97\052\uff97\001\002\000\040\016\204\017\uff98" +
    "\020\uff98\024\uff98\025\166\026\uff98\027\uff98\036\uff98\037" +
    "\uff98\041\uff98\042\uff98\043\uff98\047\uff98\052\uff98\053\uff98" +
    "\001\002\000\014\017\uffa5\020\uffa5\024\uffa5\026\uffa5\052" +
    "\177\001\002\000\016\011\102\013\107\014\073\025\104" +
    "\037\071\047\067\001\002\000\004\011\160\001\002\000" +
    "\016\017\uffa7\020\uffa7\024\uffa7\026\uffa7\027\110\052\uffa7" +
    "\001\002\000\034\017\uff84\020\uff84\024\uff84\026\uff84\027" +
    "\uff84\036\uff84\037\uff84\041\uff84\042\uff84\043\uff84\047\uff84" +
    "\052\uff84\053\uff84\001\002\000\030\011\102\013\107\014" +
    "\073\015\074\025\115\034\105\035\101\037\071\047\067" +
    "\051\111\054\116\001\002\000\030\011\102\013\107\014" +
    "\073\015\074\025\115\034\105\035\101\037\071\047\067" +
    "\051\111\054\116\001\002\000\022\036\124\037\126\041" +
    "\122\042\127\043\130\047\123\052\uffa8\053\125\001\002" +
    "\000\012\017\uffa4\020\uffa4\024\uffa4\026\uffa4\001\002\000" +
    "\004\052\153\001\002\000\030\011\102\013\107\014\073" +
    "\015\074\025\115\034\105\035\101\037\071\047\067\051" +
    "\111\054\116\001\002\000\016\017\uffd0\020\uffd0\024\uffd0" +
    "\026\uffd0\027\uffd0\052\uffa7\001\002\000\024\026\131\036" +
    "\124\037\126\041\122\042\127\043\130\047\123\052\uffa8" +
    "\053\125\001\002\000\004\026\121\001\002\000\014\017" +
    "\uffd1\020\uffd1\024\uffd1\026\uffd1\027\uffd1\001\002\000\016" +
    "\011\102\013\107\014\073\025\104\037\071\047\067\001" +
    "\002\000\034\017\uff87\020\uff87\024\uff87\026\uff87\027\uff87" +
    "\036\uff87\037\uff87\041\uff87\042\uff87\043\uff87\047\uff87\052" +
    "\uff87\053\uff87\001\002\000\022\011\102\013\107\014\073" +
    "\015\074\025\104\035\101\037\071\047\067\001\002\000" +
    "\016\011\102\013\107\014\073\025\104\037\071\047\067" +
    "\001\002\000\016\011\102\013\107\014\073\025\104\037" +
    "\071\047\067\001\002\000\016\011\102\013\107\014\073" +
    "\025\104\037\071\047\067\001\002\000\016\011\102\013" +
    "\107\014\073\025\104\037\071\047\067\001\002\000\034" +
    "\017\uff8a\020\uff8a\024\uff8a\026\uff8a\027\uff8a\036\uff8a\037" +
    "\uff8a\041\uff8a\042\uff8a\043\uff8a\047\uff8a\052\uff8a\053\uff8a" +
    "\001\002\000\034\017\uff8e\020\uff8e\024\uff8e\026\uff8e\027" +
    "\uff8e\036\uff8e\037\uff8e\041\uff8e\042\uff8e\043\uff8e\047\123" +
    "\052\uff8e\053\uff8e\001\002\000\016\011\102\013\107\014" +
    "\073\025\104\037\071\047\067\001\002\000\034\017\uff8f" +
    "\020\uff8f\024\uff8f\026\uff8f\027\uff8f\036\uff8f\037\uff8f\041" +
    "\122\042\127\043\130\047\123\052\uff8f\053\uff8f\001\002" +
    "\000\034\017\uff8c\020\uff8c\024\uff8c\026\uff8c\027\uff8c\036" +
    "\uff8c\037\uff8c\041\uff8c\042\uff8c\043\uff8c\047\123\052\uff8c" +
    "\053\uff8c\001\002\000\034\017\uff8d\020\uff8d\024\uff8d\026" +
    "\uff8d\027\uff8d\036\uff8d\037\uff8d\041\122\042\127\043\130" +
    "\047\123\052\uff8d\053\uff8d\001\002\000\030\017\uffd2\020" +
    "\uffd2\024\uffd2\026\uffd2\027\uffd2\036\133\037\126\041\122" +
    "\042\127\043\130\047\123\001\002\000\020\017\uff95\020" +
    "\uff95\024\uff95\026\uff95\027\uff95\036\uff95\052\uff95\001\002" +
    "\000\034\017\uff8f\020\uff8f\024\uff8f\026\uff8f\027\uff8f\036" +
    "\uff8f\037\uff8f\041\122\042\127\043\130\047\123\052\uff8f" +
    "\053\uff8f\001\002\000\020\011\102\013\107\014\073\015" +
    "\147\025\145\035\144\054\143\001\002\000\020\017\uff93" +
    "\020\uff93\024\uff93\026\uff93\027\uff93\036\uff93\052\uff93\001" +
    "\002\000\020\017\uff94\020\uff94\024\uff94\026\uff94\027\uff94" +
    "\036\uff94\052\uff94\001\002\000\016\011\102\013\107\014" +
    "\073\025\104\037\071\047\067\001\002\000\020\017\uff91" +
    "\020\uff91\024\uff91\026\uff91\027\uff91\036\uff91\052\uff91\001" +
    "\002\000\020\017\uff92\020\uff92\024\uff92\026\uff92\027\uff92" +
    "\036\uff92\052\uff92\001\002\000\020\026\151\036\133\037" +
    "\126\041\122\042\127\043\130\047\123\001\002\000\020" +
    "\017\uff90\020\uff90\024\uff90\026\uff90\027\uff90\036\uff90\052" +
    "\uff90\001\002\000\034\017\uff8b\020\uff8b\024\uff8b\026\uff8b" +
    "\027\uff8b\036\uff8b\037\uff8b\041\uff8b\042\uff8b\043\uff8b\047" +
    "\123\052\uff8b\053\uff8b\001\002\000\026\011\102\013\107" +
    "\014\073\015\074\025\104\034\105\035\101\037\071\047" +
    "\067\054\154\001\002\000\014\017\uffa7\020\uffa7\024\uffa7" +
    "\026\uffa7\027\uffa7\001\002\000\030\017\uffa8\020\uffa8\024" +
    "\uffa8\026\uffa8\027\uffa8\036\124\037\126\041\122\042\127" +
    "\043\130\047\123\001\002\000\014\017\uffd3\020\uffd3\024" +
    "\uffd3\026\uffd3\027\uffd3\001\002\000\014\017\uffd4\020\uffd4" +
    "\024\uffd4\026\uffd4\027\uffd4\001\002\000\006\016\165\025" +
    "\166\001\002\000\036\016\163\017\uff9c\020\uff9c\024\uff9c" +
    "\026\uff9c\027\uff9c\036\uff9c\037\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\047\uff9c\052\uff9c\053\uff9c\001\002\000\016\017\uffa6" +
    "\020\uffa6\024\uffa6\026\uffa6\027\uffa6\052\uffa6\001\002\000" +
    "\004\011\160\001\002\000\034\017\uff9e\020\uff9e\024\uff9e" +
    "\026\uff9e\027\uff9e\036\uff9e\037\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\047\uff9e\052\uff9e\053\uff9e\001\002\000\004\011\160" +
    "\001\002\000\032\011\102\013\107\014\073\015\074\025" +
    "\104\026\171\034\105\035\101\037\071\047\067\051\070" +
    "\054\106\001\002\000\006\024\uffe5\026\uffe5\001\002\000" +
    "\006\024\172\026\173\001\002\000\036\016\uffb5\017\uffb5" +
    "\020\uffb5\024\uffb5\026\uffb5\027\uffb5\036\uffb5\037\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\047\uffb5\052\uffb5\053\uffb5\001\002" +
    "\000\030\011\102\013\107\014\073\015\074\025\104\034" +
    "\105\035\101\037\071\047\067\051\070\054\106\001\002" +
    "\000\036\016\uffb6\017\uffb6\020\uffb6\024\uffb6\026\uffb6\027" +
    "\uffb6\036\uffb6\037\uffb6\041\uffb6\042\uffb6\043\uffb6\047\uffb6" +
    "\052\uffb6\053\uffb6\001\002\000\006\024\uffe4\026\uffe4\001" +
    "\002\000\034\017\uff9d\020\uff9d\024\uff9d\026\uff9d\027\uff9d" +
    "\036\uff9d\037\uff9d\041\uff9d\042\uff9d\043\uff9d\047\uff9d\052" +
    "\uff9d\053\uff9d\001\002\000\020\026\131\036\133\037\126" +
    "\041\122\042\127\043\130\047\123\001\002\000\030\011" +
    "\102\013\107\014\073\015\074\025\115\034\202\035\101" +
    "\037\071\047\067\051\111\054\116\001\002\000\016\017" +
    "\uffa0\020\uffa0\024\uffa0\026\uffa0\036\142\052\uffa9\001\002" +
    "\000\012\017\uffa2\020\uffa2\024\uffa2\026\uffa2\001\002\000" +
    "\004\011\160\001\002\000\014\017\uff9f\020\uff9f\024\uff9f" +
    "\026\uff9f\052\uffa6\001\002\000\004\011\160\001\002\000" +
    "\034\017\uff9a\020\uff9a\024\uff9a\026\uff9a\027\uff9a\036\uff9a" +
    "\037\uff9a\041\uff9a\042\uff9a\043\uff9a\047\uff9a\052\uff9a\053" +
    "\uff9a\001\002\000\004\011\160\001\002\000\034\017\uff9b" +
    "\020\uff9b\024\uff9b\026\uff9b\027\uff9b\036\uff9b\037\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\047\uff9b\052\uff9b\053\uff9b\001\002" +
    "\000\016\011\102\013\107\014\073\025\104\037\071\047" +
    "\067\001\002\000\026\017\uffa1\020\uffa1\024\uffa1\026\uffa1" +
    "\036\133\037\126\041\122\042\127\043\130\047\123\001" +
    "\002\000\034\017\uff89\020\uff89\024\uff89\026\uff89\027\uff89" +
    "\036\uff89\037\uff89\041\uff89\042\uff89\043\uff89\047\uff89\052" +
    "\uff89\053\uff89\001\002\000\012\017\uffa3\020\uffa3\024\uffa3" +
    "\026\uffa3\001\002\000\034\017\uff88\020\uff88\024\uff88\026" +
    "\uff88\027\uff88\036\uff88\037\uff88\041\uff88\042\uff88\043\uff88" +
    "\047\uff88\052\uff88\053\uff88\001\002\000\012\017\uffb3\024" +
    "\uffb3\025\217\045\065\001\002\000\020\007\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\017\uffe3\022\uffe3\023\uffe3\001\002\000" +
    "\010\011\050\023\044\026\uffe6\001\002\000\004\011\357" +
    "\001\002\000\004\026\222\001\002\000\004\021\223\001" +
    "\002\000\040\011\uffd6\013\uffd6\014\uffd6\017\uffd6\022\uffd6" +
    "\023\uffd6\025\uffd6\031\uffd6\033\uffd6\037\uffd6\040\uffd6\044" +
    "\uffd6\046\uffd6\047\uffd6\055\uffd6\001\002\000\040\011\233" +
    "\013\107\014\073\017\236\022\232\023\044\025\104\031" +
    "\231\033\247\037\071\040\234\044\227\046\230\047\067" +
    "\055\226\001\002\000\022\017\uffaa\026\uffaa\036\133\037" +
    "\126\041\122\042\127\043\130\047\123\001\002\000\004" +
    "\025\353\001\002\000\032\011\102\013\107\014\073\015" +
    "\074\017\351\025\104\034\105\035\101\037\071\047\067" +
    "\051\070\054\106\001\002\000\004\025\333\001\002\000" +
    "\004\025\325\001\002\000\020\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\017\uffd5\022\uffd5\023\uffd5\001\002\000\032\011" +
    "\uffae\016\204\017\uff98\025\166\036\uff98\037\uff98\041\uff98" +
    "\042\uff98\043\uff98\045\065\047\uff98\050\305\001\002\000" +
    "\042\011\233\013\107\014\073\017\236\021\273\023\044" +
    "\025\104\030\274\031\231\033\247\037\071\040\234\044" +
    "\227\046\230\047\067\055\226\001\002\000\046\011\uffda" +
    "\013\uffda\014\uffda\017\uffda\022\uffda\023\uffda\025\uffda\030" +
    "\uffda\031\uffda\033\uffda\037\uffda\040\uffda\044\uffda\046\uffda" +
    "\047\uffda\055\uffda\056\uffda\057\uffda\001\002\000\046\011" +
    "\uffd8\013\uffd8\014\uffd8\017\uffd8\022\uffd8\023\uffd8\025\uffd8" +
    "\030\uffd8\031\uffd8\033\uffd8\037\uffd8\040\uffd8\044\uffd8\046" +
    "\uffd8\047\uffd8\055\uffd8\056\uffd8\057\uffd8\001\002\000\046" +
    "\011\uffe1\013\uffe1\014\uffe1\017\uffe1\022\uffe1\023\uffe1\025" +
    "\uffe1\030\uffe1\031\uffe1\033\uffe1\037\uffe1\040\uffe1\044\uffe1" +
    "\046\uffe1\047\uffe1\055\uffe1\056\uffe1\057\uffe1\001\002\000" +
    "\046\011\uffdc\013\uffdc\014\uffdc\017\uffdc\022\uffdc\023\uffdc" +
    "\025\uffdc\030\uffdc\031\uffdc\033\uffdc\037\uffdc\040\uffdc\044" +
    "\uffdc\046\uffdc\047\uffdc\055\uffdc\056\uffdc\057\uffdc\001\002" +
    "\000\046\011\uffdb\013\uffdb\014\uffdb\017\uffdb\022\uffdb\023" +
    "\uffdb\025\uffdb\030\uffdb\031\uffdb\033\uffdb\037\uffdb\040\uffdb" +
    "\044\uffdb\046\uffdb\047\uffdb\055\uffdb\056\uffdb\057\uffdb\001" +
    "\002\000\004\017\316\001\002\000\046\011\uffdd\013\uffdd" +
    "\014\uffdd\017\uffdd\022\uffdd\023\uffdd\025\uffdd\030\uffdd\031" +
    "\uffdd\033\uffdd\037\uffdd\040\uffdd\044\uffdd\046\uffdd\047\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\001\002\000\050\011\uffc1\013" +
    "\uffc1\014\uffc1\017\uffc1\022\uffc1\023\uffc1\025\uffc1\030\uffc1" +
    "\031\uffc1\032\307\033\uffc1\037\uffc1\040\uffc1\044\uffc1\046" +
    "\uffc1\047\uffc1\055\uffc1\056\uffc1\057\uffc1\001\002\000\046" +
    "\011\uffd9\013\uffd9\014\uffd9\017\uffd9\022\uffd9\023\uffd9\025" +
    "\uffd9\030\uffd9\031\uffd9\033\uffd9\037\uffd9\040\uffd9\044\uffd9" +
    "\046\uffd9\047\uffd9\055\uffd9\056\uffd9\057\uffd9\001\002\000" +
    "\006\017\uffac\026\uffac\001\002\000\004\025\251\001\002" +
    "\000\040\011\uffd7\013\uffd7\014\uffd7\017\uffd7\022\uffd7\023" +
    "\uffd7\025\uffd7\031\uffd7\033\uffd7\037\uffd7\040\uffd7\044\uffd7" +
    "\046\uffd7\047\uffd7\055\uffd7\001\002\000\010\011\050\017" +
    "\252\023\044\001\002\000\032\011\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\017\uffbf\025\uffbf\034\uffbf\035\uffbf\037\uffbf\047" +
    "\uffbf\051\uffbf\054\uffbf\001\002\000\032\011\102\013\107" +
    "\014\073\015\074\017\264\025\115\034\105\035\101\037" +
    "\071\047\067\051\111\054\116\001\002\000\004\011\055" +
    "\001\002\000\006\017\uffb0\024\060\001\002\000\004\017" +
    "\257\001\002\000\032\011\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\017\uffc0\025\uffc0\034\uffc0\035\uffc0\037\uffc0\047\uffc0\051" +
    "\uffc0\054\uffc0\001\002\000\010\017\uffce\026\uffce\027\uffce" +
    "\001\002\000\030\017\uffcd\026\uffcd\027\uffcd\036\uff85\037" +
    "\uff85\041\uff85\042\uff85\043\uff85\047\uff85\052\uff85\053\uff85" +
    "\001\002\000\016\011\270\013\107\014\073\025\104\037" +
    "\071\047\067\001\002\000\006\017\266\027\265\001\002" +
    "\000\016\011\uffbd\013\uffbd\014\uffbd\025\uffbd\037\uffbd\047" +
    "\uffbd\001\002\000\030\011\102\013\107\014\073\015\074" +
    "\025\115\034\105\035\101\037\071\047\067\051\111\054" +
    "\116\001\002\000\016\011\uffbe\013\uffbe\014\uffbe\025\uffbe" +
    "\037\uffbe\047\uffbe\001\002\000\010\017\uffcf\026\uffcf\027" +
    "\uffcf\001\002\000\030\016\204\025\166\026\uff98\036\uff98" +
    "\037\uff98\041\uff98\042\uff98\043\uff98\045\065\047\uff98\050" +
    "\305\001\002\000\004\026\272\001\002\000\042\011\233" +
    "\013\107\014\073\017\236\021\273\023\044\025\104\030" +
    "\274\031\231\033\247\037\071\040\234\044\227\046\230" +
    "\047\067\055\226\001\002\000\042\011\uffca\013\uffca\014" +
    "\uffca\017\uffca\022\uffca\023\uffca\025\uffca\030\uffca\031\uffca" +
    "\033\uffca\037\uffca\040\uffca\044\uffca\046\uffca\047\uffca\055" +
    "\uffca\001\002\000\004\017\277\001\002\000\046\011\uffc6" +
    "\013\uffc6\014\uffc6\017\uffc6\022\uffc6\023\uffc6\025\uffc6\030" +
    "\uffc6\031\uffc6\033\uffc6\037\uffc6\040\uffc6\044\uffc6\046\uffc6" +
    "\047\uffc6\055\uffc6\056\uffc6\057\uffc6\001\002\000\046\011" +
    "\uffbc\013\uffbc\014\uffbc\017\uffbc\022\uffbc\023\uffbc\025\uffbc" +
    "\030\uffbc\031\uffbc\033\uffbc\037\uffbc\040\uffbc\044\uffbc\046" +
    "\uffbc\047\uffbc\055\uffbc\056\uffbc\057\uffbc\001\002\000\046" +
    "\011\uffc5\013\uffc5\014\uffc5\017\uffc5\022\uffc5\023\uffc5\025" +
    "\uffc5\030\uffc5\031\uffc5\033\uffc5\037\uffc5\040\uffc5\044\uffc5" +
    "\046\uffc5\047\uffc5\055\uffc5\056\uffc5\057\uffc5\001\002\000" +
    "\042\011\233\013\107\014\073\017\236\022\301\023\044" +
    "\025\104\030\302\031\231\033\247\037\071\040\234\044" +
    "\227\046\230\047\067\055\226\001\002\000\046\011\uffc7" +
    "\013\uffc7\014\uffc7\017\uffc7\022\uffc7\023\uffc7\025\uffc7\030" +
    "\uffc7\031\uffc7\033\uffc7\037\uffc7\040\uffc7\044\uffc7\046\uffc7" +
    "\047\uffc7\055\uffc7\056\uffc7\057\uffc7\001\002\000\004\017" +
    "\304\001\002\000\046\011\uffcc\013\uffcc\014\uffcc\017\uffcc" +
    "\022\uffcc\023\uffcc\025\uffcc\030\uffcc\031\uffcc\033\uffcc\037" +
    "\uffcc\040\uffcc\044\uffcc\046\uffcc\047\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\001\002\000\046\011\uffcb\013\uffcb\014\uffcb\017" +
    "\uffcb\022\uffcb\023\uffcb\025\uffcb\030\uffcb\031\uffcb\033\uffcb" +
    "\037\uffcb\040\uffcb\044\uffcb\046\uffcb\047\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\001\002\000\030\011\102\013\107\014\073" +
    "\015\074\025\104\034\105\035\101\037\071\047\067\051" +
    "\070\054\106\001\002\000\006\017\uffab\026\uffab\001\002" +
    "\000\040\011\233\013\107\014\073\017\236\021\311\023" +
    "\044\025\104\031\231\033\247\037\071\040\234\044\227" +
    "\046\230\047\067\055\226\001\002\000\046\011\uffc4\013" +
    "\uffc4\014\uffc4\017\uffc4\022\uffc4\023\uffc4\025\uffc4\030\uffc4" +
    "\031\uffc4\033\uffc4\037\uffc4\040\uffc4\044\uffc4\046\uffc4\047" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\001\002\000\040\011\uffd6" +
    "\013\uffd6\014\uffd6\017\uffd6\022\uffd6\023\uffd6\025\uffd6\031" +
    "\uffd6\033\uffd6\037\uffd6\040\uffd6\044\uffd6\046\uffd6\047\uffd6" +
    "\055\uffd6\001\002\000\046\011\uffc2\013\uffc2\014\uffc2\017" +
    "\uffc2\022\uffc2\023\uffc2\025\uffc2\030\uffc2\031\uffc2\033\uffc2" +
    "\037\uffc2\040\uffc2\044\uffc2\046\uffc2\047\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\001\002\000\046\011\uffc8\013\uffc8\014\uffc8" +
    "\017\uffc8\022\uffc8\023\uffc8\025\uffc8\030\uffc8\031\uffc8\033" +
    "\uffc8\037\uffc8\040\uffc8\044\uffc8\046\uffc8\047\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\001\002\000\040\011\233\013\107\014" +
    "\073\017\236\022\315\023\044\025\104\031\231\033\247" +
    "\037\071\040\234\044\227\046\230\047\067\055\226\001" +
    "\002\000\046\011\uffc9\013\uffc9\014\uffc9\017\uffc9\022\uffc9" +
    "\023\uffc9\025\uffc9\030\uffc9\031\uffc9\033\uffc9\037\uffc9\040" +
    "\uffc9\044\uffc9\046\uffc9\047\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\001\002\000\046\011\uffe0\013\uffe0\014\uffe0\017\uffe0\022" +
    "\uffe0\023\uffe0\025\uffe0\030\uffe0\031\uffe0\033\uffe0\037\uffe0" +
    "\040\uffe0\044\uffe0\046\uffe0\047\uffe0\055\uffe0\056\uffe0\057" +
    "\uffe0\001\002\000\004\055\320\001\002\000\004\025\321" +
    "\001\002\000\030\011\102\013\107\014\073\015\074\025" +
    "\115\034\105\035\101\037\071\047\067\051\111\054\116" +
    "\001\002\000\006\026\323\027\265\001\002\000\004\017" +
    "\324\001\002\000\046\011\uffba\013\uffba\014\uffba\017\uffba" +
    "\022\uffba\023\uffba\025\uffba\030\uffba\031\uffba\033\uffba\037" +
    "\uffba\040\uffba\044\uffba\046\uffba\047\uffba\055\uffba\056\uffba" +
    "\057\uffba\001\002\000\030\011\102\013\107\014\073\015" +
    "\074\025\115\034\105\035\101\037\071\047\067\051\111" +
    "\054\116\001\002\000\006\026\327\027\265\001\002\000" +
    "\004\021\330\001\002\000\040\011\uffd6\013\uffd6\014\uffd6" +
    "\017\uffd6\022\uffd6\023\uffd6\025\uffd6\031\uffd6\033\uffd6\037" +
    "\uffd6\040\uffd6\044\uffd6\046\uffd6\047\uffd6\055\uffd6\001\002" +
    "\000\040\011\233\013\107\014\073\017\236\022\332\023" +
    "\044\025\104\031\231\033\247\037\071\040\234\044\227" +
    "\046\230\047\067\055\226\001\002\000\050\011\uffc3\013" +
    "\uffc3\014\uffc3\017\uffc3\022\uffc3\023\uffc3\025\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\037\uffc3\040\uffc3\044\uffc3\046" +
    "\uffc3\047\uffc3\055\uffc3\056\uffc3\057\uffc3\001\002\000\030" +
    "\011\102\013\107\014\073\015\074\025\104\034\105\035" +
    "\101\037\071\047\067\051\070\054\106\001\002\000\004" +
    "\026\335\001\002\000\004\021\336\001\002\000\002\001" +
    "\002\000\010\022\341\056\342\057\340\001\002\000\004" +
    "\020\346\001\002\000\046\011\uffb9\013\uffb9\014\uffb9\017" +
    "\uffb9\022\uffb9\023\uffb9\025\uffb9\030\uffb9\031\uffb9\033\uffb9" +
    "\037\uffb9\040\uffb9\044\uffb9\046\uffb9\047\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\001\002\000\030\011\102\013\107\014\073" +
    "\015\074\025\104\034\105\035\101\037\071\047\067\051" +
    "\070\054\106\001\002\000\004\020\344\001\002\000\046" +
    "\011\uffca\013\uffca\014\uffca\017\uffca\022\uffca\023\uffca\025" +
    "\uffca\030\uffca\031\uffca\033\uffca\037\uffca\040\uffca\044\uffca" +
    "\046\uffca\047\uffca\055\uffca\056\uffca\057\uffca\001\002\000" +
    "\046\011\233\013\107\014\073\017\236\022\uffb8\023\044" +
    "\025\104\030\302\031\231\033\247\037\071\040\234\044" +
    "\227\046\230\047\067\055\226\056\uffb8\057\uffb8\001\002" +
    "\000\046\011\uffca\013\uffca\014\uffca\017\uffca\022\uffca\023" +
    "\uffca\025\uffca\030\uffca\031\uffca\033\uffca\037\uffca\040\uffca" +
    "\044\uffca\046\uffca\047\uffca\055\uffca\056\uffca\057\uffca\001" +
    "\002\000\046\011\233\013\107\014\073\017\236\022\uffb7" +
    "\023\044\025\104\030\302\031\231\033\247\037\071\040" +
    "\234\044\227\046\230\047\067\055\226\056\uffb7\057\uffb7" +
    "\001\002\000\004\017\352\001\002\000\046\011\uffdf\013" +
    "\uffdf\014\uffdf\017\uffdf\022\uffdf\023\uffdf\025\uffdf\030\uffdf" +
    "\031\uffdf\033\uffdf\037\uffdf\040\uffdf\044\uffdf\046\uffdf\047" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\001\002\000\046\011\uffde" +
    "\013\uffde\014\uffde\017\uffde\022\uffde\023\uffde\025\uffde\030" +
    "\uffde\031\uffde\033\uffde\037\uffde\040\uffde\044\uffde\046\uffde" +
    "\047\uffde\055\uffde\056\uffde\057\uffde\001\002\000\030\011" +
    "\102\013\107\014\073\015\074\025\115\034\105\035\101" +
    "\037\071\047\067\051\111\054\116\001\002\000\006\026" +
    "\355\027\265\001\002\000\042\011\233\013\107\014\073" +
    "\017\236\021\273\023\044\025\104\030\274\031\231\033" +
    "\247\037\071\040\234\044\227\046\230\047\067\055\226" +
    "\001\002\000\046\011\uffbb\013\uffbb\014\uffbb\017\uffbb\022" +
    "\uffbb\023\uffbb\025\uffbb\030\uffbb\031\uffbb\033\uffbb\037\uffbb" +
    "\040\uffbb\044\uffbb\046\uffbb\047\uffbb\055\uffbb\056\uffbb\057" +
    "\uffbb\001\002\000\006\024\360\026\uffe7\001\002\000\010" +
    "\011\050\023\044\026\uffe6\001\002\000\004\026\uffe8\001" +
    "\002\000\020\007\ufff6\010\ufff6\011\ufff6\012\ufff6\017\ufff6" +
    "\022\ufff6\023\ufff6\001\002\000\006\011\uffae\025\217\001" +
    "\002\000\020\007\ufff0\010\ufff0\011\ufff0\012\ufff0\017\ufff0" +
    "\022\ufff0\023\ufff0\001\002\000\006\011\050\023\044\001" +
    "\002\000\020\007\ufff2\010\ufff2\011\ufff2\012\ufff2\017\ufff2" +
    "\022\ufff2\023\ufff2\001\002\000\020\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\017\ufff5\022\ufff5\023\ufff5\001\002\000\020" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\017\ufff7\022\ufff7\023" +
    "\ufff7\001\002\000\004\025\217\001\002\000\020\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\017\uffe2\022\uffe2\023\uffe2\001" +
    "\002\000\004\011\374\001\002\000\004\021\375\001\002" +
    "\000\020\007\uffec\010\uffec\011\uffec\012\uffec\017\uffec\022" +
    "\uffec\023\uffec\001\002\000\020\007\042\010\047\011\045" +
    "\012\040\017\043\022\377\023\044\001\002\000\004\002" +
    "\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\016\001\001\000\002\001\001\000\004" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\030\001" +
    "\001\000\002\001\001\000\004\007\022\001\001\000\004" +
    "\004\025\001\001\000\002\001\001\000\004\004\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\033\001\001\000\012\011\035\012\040\013\034" +
    "\045\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\365\013\363\045\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\361\001\001\000\006\023\056" +
    "\026\055\001\001\000\006\012\052\045\050\001\001\000" +
    "\002\001\001\000\006\023\056\026\055\001\001\000\006" +
    "\012\053\045\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\060" +
    "\001\001\000\006\023\062\026\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\063\001\001\000\002" +
    "\001\001\000\020\027\077\030\075\031\065\032\074\044" +
    "\071\051\076\053\102\001\001\000\002\001\001\000\012" +
    "\030\075\032\074\044\213\051\076\001\001\000\020\030" +
    "\075\031\065\032\074\037\212\044\111\051\076\053\113" +
    "\001\001\000\012\030\075\032\074\044\211\051\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\030\075\032\074\044\175\051\076\001" +
    "\001\000\006\030\160\052\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\030\075\031\065\032\074\037" +
    "\112\044\111\051\076\053\113\001\001\000\020\030\075" +
    "\031\065\032\074\037\156\044\111\051\076\053\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\030\075\031\065\032\074\037\117\044\116\051" +
    "\076\053\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\030\075\032" +
    "\074\044\151\051\076\001\001\000\002\001\001\000\014" +
    "\030\075\031\137\032\074\044\140\051\076\001\001\000" +
    "\012\030\075\032\074\044\136\051\076\001\001\000\012" +
    "\030\075\032\074\044\135\051\076\001\001\000\012\030" +
    "\075\032\074\044\134\051\076\001\001\000\012\030\075" +
    "\032\074\044\131\051\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\030\075\032\074\044\133\051\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\075\032\145\051\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\075\032\074\044\147" +
    "\051\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\030\075\031\065\032\074\044\154\051\076\053\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\160\052\163\001\001\000\002" +
    "\001\001\000\006\030\160\052\174\001\001\000\022\010" +
    "\167\027\166\030\075\031\065\032\074\044\071\051\076" +
    "\053\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\027\173\030\075\031\065\032\074" +
    "\044\071\051\076\053\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\030\075\031\177\032\074\037\200\044\111\051\076\053" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\160\052\202\001\001\000\002\001\001\000\006\030" +
    "\160\052\204\001\001\000\002\001\001\000\006\030\160" +
    "\052\206\001\001\000\002\001\001\000\012\030\075\032" +
    "\074\044\210\051\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\215\001\001\000\002\001\001\000\006\033\220\045\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\223\001\001\000\040\012\236\015\242" +
    "\016\240\017\234\020\237\021\244\025\241\026\245\030" +
    "\075\032\074\034\247\044\224\045\050\050\243\051\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\027" +
    "\347\030\075\031\065\032\074\044\071\051\076\053\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\012\236\015\242\016\240" +
    "\017\234\020\237\021\244\025\241\026\245\030\075\032" +
    "\074\034\274\044\224\045\050\046\316\050\243\051\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\042\252\045\253\001\001\000\002\001\001\000" +
    "\024\030\075\031\065\032\074\036\262\037\257\043\261" +
    "\044\111\051\260\053\113\001\001\000\006\023\254\026" +
    "\055\001\001\000\004\024\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\025\270\026\245\030\075\032\074\044\224\051\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\030" +
    "\075\031\065\032\074\036\266\037\257\044\111\051\260" +
    "\053\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\012\236\015\242" +
    "\016\240\017\234\020\237\021\244\025\241\026\245\030" +
    "\075\032\074\034\274\044\224\045\050\046\275\050\243" +
    "\051\076\001\001\000\004\040\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\012\236\015\242\016\240\017\234\020\237\021" +
    "\244\025\241\026\245\030\075\032\074\034\302\044\224" +
    "\045\050\050\243\051\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\027\305\030\075\031\065\032\074\044\071\051\076\053" +
    "\102\001\001\000\002\001\001\000\042\012\236\015\242" +
    "\016\240\017\234\020\237\021\244\025\241\026\245\030" +
    "\075\032\074\034\312\041\311\044\224\045\050\050\243" +
    "\051\076\001\001\000\002\001\001\000\004\035\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\012\236" +
    "\015\242\016\240\017\234\020\237\021\244\025\241\026" +
    "\245\030\075\032\074\034\247\044\224\045\050\050\243" +
    "\051\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\030\075\031\065" +
    "\032\074\036\321\037\257\044\111\051\260\053\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\030\075\031\065\032\074\036\325\037\257\044" +
    "\111\051\260\053\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\330\001\001\000\040\012\236\015" +
    "\242\016\240\017\234\020\237\021\244\025\241\026\245" +
    "\030\075\032\074\034\247\044\224\045\050\050\243\051" +
    "\076\001\001\000\002\001\001\000\020\027\333\030\075" +
    "\031\065\032\074\044\071\051\076\053\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\027\342\030\075\031\065\032\074\044\071\051\076" +
    "\053\102\001\001\000\002\001\001\000\004\040\344\001" +
    "\001\000\040\012\236\015\242\016\240\017\234\020\237" +
    "\021\244\025\241\026\245\030\075\032\074\034\302\044" +
    "\224\045\050\050\243\051\076\001\001\000\004\040\346" +
    "\001\001\000\040\012\236\015\242\016\240\017\234\020" +
    "\237\021\244\025\241\026\245\030\075\032\074\034\302" +
    "\044\224\045\050\050\243\051\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\075" +
    "\031\065\032\074\036\353\037\257\044\111\051\260\053" +
    "\113\001\001\000\002\001\001\000\042\012\236\015\242" +
    "\016\240\017\234\020\237\021\244\025\241\026\245\030" +
    "\075\032\074\034\274\044\224\045\050\046\355\050\243" +
    "\051\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\360\045\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\367\001\001\000\002\001\001\000" +
    "\006\012\366\045\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\371\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\375\001\001\000\012\011\035\012\040\013\034\045" +
    "\045\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JavaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JavaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JavaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  List<Variable> vars = new ArrayList<>();

  private void addVar(String name, String type) {
    vars.add(new Variable(name, type));
  }

  private void setScope(String scope) {
    for (Variable var : vars) {
      var.setScope(scope);
      VariablesHolder.addVariable(var);
    }
  }

  private void addMethod(String name, String type) {
    setScope(String.format("Metodo %s", name));
    MethodsHolder.addMethod(name, type, vars.toArray(new Variable[0]));
    vars.clear();
  }

  private void addClass(String name) {
    setScope(String.format("Clase %s", name));
    ClassesHolder.addClass(name);
    vars.clear();
  }

  public JavaParser(JavaLexer lexer) {
    super(lexer);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JavaParser$actions {
  private final JavaParser parser;

  /** Constructor */
  CUP$JavaParser$actions(JavaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JavaParser$do_action_part00000000(
    int                        CUP$JavaParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaParser$parser,
    java.util.Stack            CUP$JavaParser$stack,
    int                        CUP$JavaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JavaParser$result;

      /* select the action based on the action number */
      switch (CUP$JavaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= syntax EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		RESULT = start_val;
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JavaParser$parser.done_parsing();
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // syntax ::= packag imports clase 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("syntax",0, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // packag ::= PACKAGE ID pack_item SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("packag",1, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // packag ::= PACKAGE ID SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("packag",1, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // packag ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("packag",1, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // imports ::= IMPORT ID pack_item SEPARADOR imports 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("imports",2, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // imports ::= IMPORT ID SEPARADOR imports 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("imports",2, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // imports ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("imports",2, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // clase ::= VISIBILITY CLASS ID LLA_IZQ class_items LLA_DER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		 addClass((String) id); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("clase",3, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // clase ::= CLASS ID LLA_IZQ class_items LLA_DER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		 addClass((String) id); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("clase",3, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constructor ::= VISIBILITY ID fun_body 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("constructor",7, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constructor ::= ID fun_body 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("constructor",7, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // class_items ::= class_items VISIBILITY FINAL full_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // class_items ::= class_items FINAL VISIBILITY full_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_items ::= class_items FINAL full_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_items ::= class_items VISIBILITY full_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // class_items ::= class_items full_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_items ::= class_items VISIBILITY dec_func 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // class_items ::= class_items dec_func 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // class_items ::= class_items constructor 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // class_items ::= class_items SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // class_items ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("class_items",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // pack_item ::= PUNTO ID pack_item 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("pack_item",5, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // pack_item ::= PUNTO ID 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("pack_item",5, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pack_item ::= PUNTO POR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("pack_item",5, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dec_attr ::= type ID COMA dec_attr 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		 addVar((String) id, (String) type); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("dec_attr",25, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_attr ::= type ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 addVar((String) id, (String) type); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("dec_attr",25, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dec_attr ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("dec_attr",25, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // attr_inv ::= valor 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("attr_inv",6, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // attr_inv ::= attr_inv COMA valor 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("attr_inv",6, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_func ::= type ID fun_body 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addMethod((String) id, (String) type); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("dec_func",9, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_func ::= VOID ID fun_body 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 addMethod((String) id, (String) type); 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("dec_func",9, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruct ::= full_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruct ::= assign SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruct ::= RETURN SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruct ::= RETURN valor SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruct ::= for 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruct ::= if 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruct ::= while 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruct ::= do_while 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruct ::= switch 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruct ::= SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("instruct",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // body ::= body instruct 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("body",27, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // body ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("body",27, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fun_body ::= PAR_IZQ dec_attr PAR_DER LLA_IZQ body LLA_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("fun_body",37, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bool_ ::= NEGAR bool_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool_",29, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bool_ ::= valor_ RELATIONAL1 valor_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool_",29, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bool_ ::= expr RELATIONAL2 expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool_",29, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bool_ ::= PAR_IZQ bool_ PAR_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool_",29, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bool_ ::= BOOL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool_",29, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bool ::= bool LOGIC bool 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool",28, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bool ::= bool_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool",28, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bool ::= concat 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bool",28, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cic_inst ::= cic_inst instruct 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("cic_inst",30, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cic_inst ::= cic_inst BREAK SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("cic_inst",30, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cic_inst ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("cic_inst",30, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // control ::= LLA_IZQ body LLA_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("control",31, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // control ::= instruct 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("control",31, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // control_ ::= LLA_IZQ cic_inst LLA_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("control_",36, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // control_ ::= instruct 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("control_",36, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // control_ ::= BREAK SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("control_",36, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if ::= if_ else 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_ ::= IF PAR_IZQ bool PAR_DER LLA_IZQ body LLA_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("if_",38, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // else ::= ELSE control 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("else",10, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // else ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("else",10, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // for_dec ::= type var_dec more_dec SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for_dec",32, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // for_dec ::= SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for_dec",32, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // for_bool ::= bool SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for_bool",33, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // for_bool ::= SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for_bool",33, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // for ::= FOR PAR_IZQ for_dec for_bool assign PAR_DER control_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("for",11, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // while ::= WHILE PAR_IZQ bool PAR_DER control_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("while",12, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // do_while ::= DO control_ WHILE PAR_IZQ bool PAR_DER SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("do_while",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // switch ::= SWITCH PAR_IZQ valor PAR_DER LLA_IZQ case LLA_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("switch",15, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // case ::= case CASE valor COLON cic_inst 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("case",16, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // case ::= case DEFAULT COLON cic_inst 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("case",16, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // func ::= ID PAR_IZQ attr_inv PAR_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("func",22, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // func ::= ID PAR_IZQ PAR_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("func",22, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // full_dec ::= type var_dec more_dec SEPARADOR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("full_dec",8, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // var_dec ::= ID 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("var_dec",17, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // var_dec ::= assign_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("var_dec",17, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // more_dec ::= COMA var_dec more_dec 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("more_dec",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // more_dec ::= 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("more_dec",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type ::= TYPE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 RESULT = type; 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("type",35, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type ::= ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 RESULT = type; 
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("type",35, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assign_ ::= ID IGUAL valor 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("assign_",20, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assign ::= assign_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("assign",19, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assign ::= ID IGUAL_ valor 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("assign",19, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assign ::= expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("assign",19, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor_ ::= string 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor_",41, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valor_ ::= expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor_",41, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor_ ::= BOOL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor_",41, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor_ ::= NEW concat_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor_",41, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor ::= valor_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor ::= BOOL LOGIC bool_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor ::= NEGAR bool_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor ::= valor_ RELATIONAL1 bool_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor ::= expr RELATIONAL2 expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor ::= valor_ RELATIONAL1 string 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor ::= valor_ RELATIONAL1 NEW concat_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("valor",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // concat_ ::= func PUNTO concat_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat_",40, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // concat_ ::= ID PUNTO concat_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat_",40, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // concat_ ::= func 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat_",40, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // concat ::= func PUNTO concat_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat",39, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // concat ::= ID PUNTO concat_ 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat",39, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // concat ::= func 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat",39, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // concat ::= ID 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("concat",39, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // string ::= LITERAL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // string ::= CHAR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // string ::= expr MAS string 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // string ::= string MAS LITERAL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // string ::= string MAS BOOL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // string ::= string MAS CHAR 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // string ::= string MAS numero 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // string ::= string MAS PAR_IZQ expr PAR_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("string",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr ::= expr MAS expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr ::= expr POR expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr ::= expr MENOS expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr ::= expr DIV expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr ::= expr MOD expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr ::= PAR_IZQ expr PAR_DER 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr ::= MENOS expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr ::= UNARY expr 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr ::= expr UNARY 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr ::= numero 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("expr",34, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // numero ::= concat 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("numero",24, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // numero ::= ENTERO 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("numero",24, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // numero ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("numero",24, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JavaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JavaParser$do_action(
    int                        CUP$JavaParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaParser$parser,
    java.util.Stack            CUP$JavaParser$stack,
    int                        CUP$JavaParser$top)
    throws java.lang.Exception
    {
              return CUP$JavaParser$do_action_part00000000(
                               CUP$JavaParser$act_num,
                               CUP$JavaParser$parser,
                               CUP$JavaParser$stack,
                               CUP$JavaParser$top);
    }
}

}
