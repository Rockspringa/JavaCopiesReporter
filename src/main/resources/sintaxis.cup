package edu.mooncoder.model.analyzer.syntax;

import java.util.List;
import java.util.ArrayList;

import edu.mooncoder.model.analyzer.lexic.JavaLexer;

parser code {:
  public JavaParser(JavaLexer lexer) {
    super(lexer);
  }
:}

terminal PACKAGE, IMPORT, CLASS, VISIBILITY, FINAL;
terminal ID;
terminal PUNTO, SEPARADOR, LLA_IZQ, LLA_DER, VOID,
         TYPE, COMA, PAR_IZQ, PAR_DER, LOGIC, BREAK,
         IF, ELIF, ELSE, FOR, NEW, LITERAL, MAS, MENOS,
         DIV, POR, ENTERO, DECIMAL, RETURN, IGUAL, CHAR,
         NEGADO, NEGAR, RELATIONAL, BOOL, WHILE, DO, MOD;

non terminal syntax;
non terminal packag, imports, clase;
non terminal class_items, pack_item, attr_inv;
non terminal constructor, full_dec, dec_func, else,
             for, while, do_while, if, elif;
non terminal var_dec, more_dec, assign, valor, func, string,
             numero, dec_attr, instruct, body, bool, cic_inst,
             control, for_dec, for_bool, expr, type, control_,
             fun_body, if_;

precedence left MAS, MENOS;
precedence left POR, DIV, MOD;
precedence left NEGADO;

precedence left LOGIC;
precedence left NEGAR;
precedence left RELATIONAL;

start with syntax;

syntax ::= packag imports clase;

packag   ::= PACKAGE ID pack_item SEPARADOR
             |
             PACKAGE ID SEPARADOR
             |
             ;

imports  ::= IMPORT ID pack_item SEPARADOR imports
             |
             IMPORT ID SEPARADOR imports
             |
             ;

clase     ::= VISIBILITY CLASS ID LLA_IZQ class_items LLA_DER
              |
              CLASS ID LLA_IZQ class_items LLA_DER
              ;

constructor ::= VISIBILITY ID fun_body
                |
                ID fun_body
                ;

class_items ::= VISIBILITY FINAL full_dec class_items
                |
                VISIBILITY full_dec class_items
                |
                FINAL full_dec class_items
                |
                full_dec class_items
                |
                VISIBILITY dec_func class_items
                |
                dec_func class_items
                |
                constructor
                |
                ;

pack_item ::= PUNTO ID pack_item
              |
              PUNTO ID
              |
              PUNTO POR
              ;

dec_attr ::= type ID COMA dec_attr
             |
             type ID
             |
             ;

attr_inv ::= valor
             |
             attr_inv COMA valor
             ;

dec_func ::= type ID fun_body
             |
             VOID ID fun_body
             ;

instruct ::= full_dec
             |
             assign SEPARADOR
             |
             func SEPARADOR
             |
             RETURN SEPARADOR
             |
             RETURN valor SEPARADOR
             |
             for
             |
             if
             |
             while
             |
             do_while
             ;

body     ::= instruct body
             |
             ;

fun_body ::= PAR_IZQ dec_attr PAR_DER LLA_IZQ body LLA_DER;

bool     ::= bool LOGIC bool
             |
             NEGAR bool
             |
             ID RELATIONAL ID
             |
             PAR_IZQ bool PAR_DER
             |
             BOOL
             |
             ID
             ;

cic_inst ::= instruct cic_inst
             |
             BREAK SEPARADOR cic_inst
             ;

control  ::= LLA_IZQ body LLA_DER
             |
             instruct
             ;

control_ ::= LLA_IZQ cic_inst LLA_DER
             |
             instruct
             |
             BREAK SEPARADOR
             ;

if       ::= IF if_ elif else
             |
             IF if_ else
             ;

elif     ::= ELIF if_ elif
             |
             ELSE control
             ;

if_      ::= PAR_IZQ bool PAR_DER control
             ;

else     ::= ELSE control
             |
             ;

for_dec  ::= type var_dec more_dec SEPARADOR
             |
             SEPARADOR
             ;

for_bool ::= bool SEPARADOR | SEPARADOR;

for      ::= FOR PAR_IZQ for_dec for_bool assign PAR_DER control_;

while    ::= WHILE PAR_IZQ bool PAR_DER control_;

do_while ::= DO control_ WHILE PAR_IZQ bool PAR_DER SEPARADOR;

func     ::= ID PAR_IZQ attr_inv PAR_DER
             |
             ID PAR_IZQ PAR_DER
             ;

full_dec ::= type var_dec more_dec SEPARADOR;

var_dec  ::= ID
             |
             assign
             ;

more_dec ::= COMA var_dec more_dec
             |
             ;

type     ::= TYPE | ID;

assign   ::= ID IGUAL valor;

valor    ::= string
             |
             expr
             |
             BOOL
             |
             CHAR
             |
             NEW func
             ;

string   ::= LITERAL
             |
             string MAS LITERAL
             |
             string MAS BOOL
             |
             string MAS CHAR
             |
             string MAS numero
             |
             string MAS PAR_IZQ expr PAR_DER
             ;

expr     ::= expr MAS expr
             |
             expr POR expr
             |
             expr MENOS expr
             |
             expr DIV expr
             |
             expr MOD expr
             |
             PAR_IZQ expr PAR_DER
             |
             MENOS expr
             %prec NEGADO
             |
             numero
             ;

numero   ::= ID | ENTERO | DECIMAL;