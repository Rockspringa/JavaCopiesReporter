package edu.mooncoder.model.analyzer.syntax;

import edu.mooncoder.model.analyzer.lexic.HtmlLexer;

parser code {:
  public HtmlParser(HtmlLexer lexer) {
    super(lexer);
  }
:}

terminal String ID, LITERAL;
terminal int INT;
terminal INTEGER, STRING, COMA, SEPARADOR, PAR_IZQ, PAR_DER, COR_IZQ, COR_DER, MAS, MENOS, POR,
         DIV, RESULT, PUNTO, IGUAL, UNARY, ITERADOR, TABLE_B, TABLE_E, HTML_B, HTML_E, HASTA, H1_B,
         H1_E, H2_B, H2_E, TR_B, TR_E, TH_B, TH_E, TD_B, TD_E, FOR_B, FOR_E, BR, TEXT, TAG_FOR;

non terminal syntax, ids, decl, variables, assign, assign_, int_assign, str_assign, expr, str, string,
             result, result_, result__, str_, concat, int;

non terminal report, tags, tags_, for, for_, br, heading, table, rows, rows_, data, for_row, for_row_,
             for__;

precedence left MAS, MENOS;
precedence left POR, DIV;
precedence left PAR_IZQ, PAR_DER;
precedence left UNARY;

start with syntax;

syntax     ::= variables report
               ;

variables  ::= variables decl
               |
               variables assign
               |
               ;

ids        ::= ID
               |
               ids COMA ID
               ;

decl       ::= INTEGER int_assign
               |
               STRING str_assign
               |
               INTEGER ids SEPARADOR
               |
               STRING ids SEPARADOR
               ;

assign     ::= assign_ string SEPARADOR
               |
               assign_ LITERAL MAS string str_ SEPARADOR
               ;

assign_    ::= ID IGUAL;

int_assign ::= assign_ expr SEPARADOR;

str_assign ::= assign_ str SEPARADOR;

expr     ::= expr MAS expr
             |
             expr MENOS expr
             |
             expr POR expr
             |
             expr DIV expr
             |
             PAR_IZQ expr PAR_DER
             |
             MENOS expr
             %prec UNARY
             |
             int
             ;

str      ::= LITERAL str_
             |
             result
             ;

str_     ::= str_ MAS string
             |
             ;

string   ::= LITERAL | expr;

int      ::= INT | concat;

concat   ::= result
             |
             ID
             ;

result   ::= RESULT PUNTO result_;

result_  ::= result__
             |
             result_ PUNTO result__
             ;

result__ ::= ID
             |
             ID COR_IZQ expr COR_DER
             ;

report   ::= HTML_B tags HTML_E
             |
             HTML_B HTML_E
             ;

tags     ::= tags_ tags
             |
             tags_
             ;

tags_    ::= for | br | heading | table;

for      ::= for__ for_ FOR_E;

for_row  ::= for__ rows FOR_E;

for_row_ ::= for__ rows_ FOR_E;

for_     ::= tags
             |
             data
             ;

for__    ::= FOR_B ITERADOR ID HASTA ID SEPARADOR TAG_FOR;

br       ::= BR
             ;

heading  ::= H1_B data H1_E
             |
             H2_B data H2_E
             ;

table    ::= TABLE_B rows TABLE_E;

rows     ::= TR_B rows_ TR_E rows
             |
             for_row rows
             |
             ;

rows_    ::= TH_B data TH_E rows_
             |
             TD_B data TD_E rows_
             |
             for_row_ rows_
             |
             ;

data     ::= data TEXT
             |
             data concat
             |
             ;