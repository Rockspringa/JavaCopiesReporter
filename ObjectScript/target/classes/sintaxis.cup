package edu.mooncoder.controllers.analyzer.syntax;

import java.util.List;
import java.util.ArrayList;

import edu.mooncoder.controllers.analyzer.lexic.JavaLexer;
import edu.mooncoder.model.wrappers.Variable;
import edu.mooncoder.model.containers.*;

parser code {:
  List<Variable> attrFunc = new ArrayList<>();
  List<String> methods = new ArrayList<>();
  List<Variable> vars = new ArrayList<>();

  private void addAttr(String name, String type) {
    attrFunc.add(new Variable(name, type));
  }

  private void addVar(String name, String type) {
    vars.add(new Variable(name, type));
  }

  private void addError(int line, int col, String msg) {
    ErrorsHolder.addSyntacticalError(line, col, msg);
  }

  private void setScope(String scope, List<Variable> vars) {
    for (Variable var : vars) {
      var.setScope(scope);
      VariablesHolder.addVariable(var);
    }
  }

  private void addConstructor(String name) {
    setScope(String.format("Constructor %s", name), attrFunc);
    setScope(String.format("Constructor %s", name), vars);
    MethodsHolder.addMethod(name, name, attrFunc.toArray(new Variable[0]));
    methods.add(name);
    vars.clear();
  }

  private void addMethod(String name, String type) {
    setScope(String.format("Metodo %s", name), attrFunc);
    setScope(String.format("Metodo %s", name), vars);
    MethodsHolder.addMethod(name, type, attrFunc.toArray(new Variable[0]));
    methods.add(name);
    vars.clear();
  }

  private void addClass(String name) {
    setScope(String.format("Clase %s", name), vars);
    ClassesHolder.addClass(name, methods.toArray(new String[0]));
    methods.clear();
    vars.clear();
  }

  public JavaParser(JavaLexer lexer) {
    super(lexer);
  }
:}

terminal PACKAGE, IMPORT, CLASS, VISIBILITY, FINAL;
terminal ID, VOID, ENTERO, DECIMAL, CHAR;
terminal PUNTO, SEPARADOR, COLON, LLA_IZQ, LLA_DER,
         TYPE, COMA, PAR_IZQ, PAR_DER, LOGIC, BREAK,
         IF, ELSE, FOR, NEW, LITERAL, MAS, MENOS, DO, MOD,
         DIV, POR, RETURN, IGUAL, SWITCH, UNARY, IGUAL_,
         NEGAR, RELATIONAL1, RELATIONAL2, BOOL, WHILE, CASE, DEFAULT;

non terminal syntax;
non terminal packag, imports, clase;
non terminal class_items, pack_item, attr_inv;
non terminal constructor, full_dec, dec_func, else,
             for, while, do_while, if, switch, case;
non terminal var_dec, more_dec, assign, assign_, valor, func, string,
             numero, dec_attr, instruct, body, bool, bool_, cic_inst,
             control, for_dec, for_bool, expr, type, control_,
             fun_body, if_, concat, concat_, valor_;

precedence left PAR_IZQ;

precedence left MAS, MENOS;
precedence left POR, DIV, MOD;
precedence left UNARY;

precedence left LOGIC;
precedence left NEGAR;
precedence left RELATIONAL1, RELATIONAL2;

precedence left ELSE;

start with syntax;

syntax ::= packag imports clase
           |
           {: addError(0, 0, "a <clase> para tener un archivo java valido (o util)"); :}
           ;

packag   ::= PACKAGE ID pack_item SEPARADOR
             |
             PACKAGE ID SEPARADOR
             |
             |
             PACKAGE ID SEPARADOR error:get
             {: addError(getleft, getright, " <import>, un modificador de acceso o un <class>"); :}
             |
             PACKAGE ID pack_item SEPARADOR error:get
             {: addError(getleft, getright, " <import>, un modificador de acceso o un <class>"); :}
             |
             PACKAGE error:get
             {: addError(getleft, getright, " <paquete> valido despues de 'package'"); :}
             ;

imports  ::= IMPORT ID pack_item SEPARADOR imports
             |
             |
             IMPORT ID SEPARADOR error:get imports
             {: addError(getleft, getright, " <import>, un modificador de acceso o un <class>"); :}
             |
             IMPORT ID pack_item SEPARADOR error:get imports
             {: addError(getleft, getright, " <import>, un modificador de acceso o un <class>"); :}
             |
             IMPORT ID error:get imports
             {: addError(getleft, getright, " <punto> despues del <id> del paquete"); :}
             ;

clase     ::= VISIBILITY CLASS ID:id LLA_IZQ class_items LLA_DER
              {: addClass((String) id); :}
              |
              CLASS ID:id LLA_IZQ class_items LLA_DER
              {: addClass((String) id); :}
              |
              CLASS error:get class_items LLA_DER
              {: addError(getleft, getright, " <id> despues de <clase>"); :}
              ;

constructor ::= VISIBILITY ID:id fun_body
                {: addConstructor((String) id); :}
                |
                ID:id fun_body
                {: addConstructor((String) id); :}
                ;

class_items ::= class_items VISIBILITY FINAL full_dec
                |
                class_items FINAL VISIBILITY full_dec
                |
                class_items FINAL full_dec
                |
                class_items VISIBILITY full_dec
                |
                class_items full_dec
                |
                class_items VISIBILITY dec_func
                |
                class_items dec_func
                |
                class_items constructor
                |
                class_items SEPARADOR
                |
                ;

pack_item ::= PUNTO ID pack_item
              |
              PUNTO ID
              |
              PUNTO POR
              |
              PUNTO error:get
              {: addError(getleft, getright, " <id> o <*> despues del punto"); :}
              ;

dec_attr ::= type:type ID:id COMA dec_attr
             {: addAttr((String) id, (String) type); :}
             |
             type:type ID:id
             {: addAttr((String) id, (String) type); :}
             |
             type error:get dec_attr
             {: addError(getleft, getright, " <id> despues del tipo del atributo"); :}
             |
             type ID COMA error:get
             {: addError(getleft, getright, "a declaracion de atributo"); :}
             ;

attr_inv ::= valor
             |
             attr_inv COMA valor
             ;

dec_func ::= type:type ID:id fun_body
             {: addMethod((String) id, (String) type); :}
             |
             VOID:type ID:id fun_body
             {: addMethod((String) id, (String) type); :}
             |
             type error:get fun_body
             {: addError(getleft, getright, " <id> para la declaracion de la funcion"); :}
             |
             VOID error:get fun_body
             {: addError(getleft, getright, " <id> para la declaracion de la funcion"); :}
             ;

instruct ::= full_dec
             |
             assign SEPARADOR
             |
             concat_ SEPARADOR
             |
             RETURN SEPARADOR
             |
             RETURN valor SEPARADOR
             |
             for
             |
             if
             |
             while
             |
             do_while
             |
             switch
             |
             SEPARADOR
             |
             assign error:get
             {: addError(getleft, getright, " <valor> o un <separador>"); :}
             ;

body     ::= body instruct
             |
             |
             body error:get
             {: addError(getleft, getright, "a instruccion valida"); :}
             ;

fun_body ::= PAR_IZQ dec_attr PAR_DER LLA_IZQ body LLA_DER
             |
             PAR_IZQ PAR_DER LLA_IZQ body LLA_DER
             |
             PAR_IZQ dec_attr error:get LLA_IZQ body LLA_DER
             {: addError(getleft, getright, "a <parentesis derecho>"); :}
             |
             PAR_IZQ error:get LLA_IZQ body LLA_DER
             {: addError(getleft, getright, "a <parentesis derecho> o una declaracion de atributos"); :}
             |
             PAR_IZQ dec_attr PAR_DER error:get body LLA_DER
             {: addError(getleft, getright, "a <llave izquierda>"); :}
             |
             PAR_IZQ PAR_DER error:get body LLA_DER
             {: addError(getleft, getright, "a <llave izquierda>"); :}
             ;

bool_    ::= NEGAR bool_
             |
             valor_ RELATIONAL1 valor_
             |
             expr RELATIONAL2 expr
             |
             PAR_IZQ bool_ PAR_DER
             |
             BOOL
             ;

bool     ::= bool LOGIC bool
             |
             bool_
             |
             concat
             ;

cic_inst ::= cic_inst instruct
             |
             cic_inst BREAK SEPARADOR
             |
             |
             cic_inst error:get
             {: addError(getleft, getright, "a instruccion valida"); :}
             ;

control  ::= LLA_IZQ body LLA_DER
             |
             instruct
             |
             error:get
             {: addError(getleft, getright, " ambito valido"); :}
             ;

control_ ::= LLA_IZQ cic_inst LLA_DER
             |
             instruct
             |
             BREAK SEPARADOR
             |
             error:get
             {: addError(getleft, getright, " ambito valido"); :}
             ;

if       ::= if_ control else
             ;

if_      ::= IF PAR_IZQ bool PAR_DER
             |
             IF PAR_IZQ bool error:get
             {: addError(getleft, getright, " <parentesis derecho>"); :}
             |
             IF PAR_IZQ error:get PAR_DER
             {: addError(getleft, getright, " <bool>, <id> o una expresion booleana"); :}
             |
             IF error:get bool PAR_DER
             {: addError(getleft, getright, " <parentesis izquierdo>"); :}
             ;

else     ::= ELSE control
             |
             ;

for_dec  ::= full_dec
             |
             assign
             |
             SEPARADOR
             ;

for_bool ::= bool SEPARADOR
             |
             SEPARADOR
             ;

for      ::= FOR PAR_IZQ for_dec for_bool assign PAR_DER control_
             |
             FOR PAR_IZQ for_dec for_bool assign error:get control_
             {: addError(getleft, getright, " <parentesis derecho>"); :}
             |
             FOR PAR_IZQ for_dec for_bool error:get PAR_DER control_
             {: addError(getleft, getright, "a asignacion"); :}
             |
             FOR PAR_IZQ for_dec error:get assign PAR_DER control_
             {: addError(getleft, getright, " <separador> o una expresion booleana"); :}
             |
             FOR PAR_IZQ error:get for_bool assign PAR_DER control_
             {: addError(getleft, getright, " <separador>, una declaracion o una asignacion"); :}
             |
             FOR error:get for_dec for_bool assign PAR_DER control_
             {: addError(getleft, getright, " <parentesis izquierdo>"); :}
             ;

while    ::= WHILE PAR_IZQ bool PAR_DER control_
             |
             WHILE PAR_IZQ bool error:get control_
             {: addError(getleft, getright, " <parentesis derecho>"); :}
             |
             WHILE PAR_IZQ error:get PAR_DER control_
             {: addError(getleft, getright, " <bool>, <id> o una expresion booleana"); :}
             |
             WHILE error:get bool PAR_DER control_
             {: addError(getleft, getright, " <parentesis izquierdo>"); :}
             ;

do_while ::= DO control_ WHILE PAR_IZQ bool PAR_DER SEPARADOR
             |
             DO control_ WHILE PAR_IZQ bool PAR_DER error:get
             {: addError(getleft, getright, " <separador>"); :}
             |
             DO control_ WHILE PAR_IZQ bool error:get SEPARADOR
             {: addError(getleft, getright, " <parentesis derecho>"); :}
             |
             DO control_ WHILE PAR_IZQ error:get PAR_DER SEPARADOR
             {: addError(getleft, getright, " <bool>, <id> o una expresion booleana"); :}
             |
             DO control_ WHILE error:get bool PAR_DER SEPARADOR
             {: addError(getleft, getright, " <parentesis izquierdo>"); :}
             |
             DO control_ error:get PAR_IZQ bool PAR_DER SEPARADOR
             {: addError(getleft, getright, " <while>"); :}
             ;

switch   ::= SWITCH PAR_IZQ valor PAR_DER LLA_IZQ case LLA_DER
             |
             SWITCH PAR_IZQ valor PAR_DER error:get case LLA_DER
             {: addError(getleft, getright, " <llave izquierda>"); :}
             |
             SWITCH PAR_IZQ valor error:get LLA_IZQ case LLA_DER
             {: addError(getleft, getright, " <parentesis derecho>"); :}
             |
             SWITCH error:get valor PAR_DER LLA_IZQ case LLA_DER
             {: addError(getleft, getright, " <parentesis izquierdo>"); :}
             ;

case     ::= case CASE valor COLON cic_inst
             |
             case DEFAULT COLON cic_inst
             |
             |
             error:get CASE valor COLON cic_inst
             {: addError(getleft, getright, " <case> o <default> valido"); :}
             |
             error:get DEFAULT COLON cic_inst
             {: addError(getleft, getright, " <case> o <default> valido"); :}
             ;

func     ::= ID PAR_IZQ attr_inv PAR_DER
             |
             ID PAR_IZQ PAR_DER
             |
             ID PAR_IZQ attr_inv error:get
             {: addError(getleft, getright, " <parentesis derecho>"); :}
             ;

full_dec ::= type:type var_dec:id more_dec SEPARADOR
             {: addVar((String) id, (String) type); :}
             ;

var_dec  ::= ID:id
             {: RESULT = id; :}
             |
             assign_:id
             {: RESULT = id; :}
             |
             ID error:get
             {: addError(getleft, getright, " <igual> en la asignacion"); :}
             ;

more_dec ::= COMA var_dec more_dec
             |
             |
             COMA error:get
             {: addError(getleft, getright, "a declaracion extra que fuese valida"); :}
             ;

type     ::= TYPE:type
             {: RESULT = type; :}
             |
             ID:type
             {: RESULT = type; :}
             ;

assign_  ::= ID:id IGUAL valor
             {: RESULT = id; :}
             ;

assign   ::= assign_
             |
             ID IGUAL_ valor
             |
             UNARY concat
             |
             concat UNARY
             |
             ID error:get
             {: addError(getleft, getright, " operador de asignacion o un operador unario"); :}
             ;

valor_   ::= string
             |
             expr
             |
             BOOL
             |
             NEW concat_
             |
             NEW error:get
             {: addError(getleft, getright, " llamado a constructor (o metodo)"); :}
             ;

valor    ::= valor_
             |
             BOOL LOGIC bool_
             |
             NEGAR bool_
             |
             valor_ RELATIONAL1 bool_
             |
             expr RELATIONAL2 expr
             |
             valor_ RELATIONAL1 string
             |
             valor_ RELATIONAL1 NEW concat_
             |
             error:get
             {: addError(getleft, getright, " separador, coma u operador de expresion valida"); :}
             ;

concat_  ::= func PUNTO concat_
             |
             ID PUNTO concat_
             |
             func
             |
             func PUNTO error:get
             {: addError(getleft, getright, " llamado a una funcion o constructor"); :}
             ;

concat   ::= func PUNTO concat
             |
             ID PUNTO concat
             |
             func
             |
             ID
             |
             func PUNTO error:get
             {: addError(getleft, getright, " llamado a un atributo, funcion o constructor"); :}
             |
             ID PUNTO error:get
             {: addError(getleft, getright, " llamado a un atributo, funcion o constructor"); :}
             ;

string   ::= LITERAL
             |
             CHAR
             |
             expr MAS string
             |
             string MAS LITERAL
             |
             string MAS BOOL
             |
             string MAS CHAR
             |
             string MAS numero
             |
             string MAS PAR_IZQ expr PAR_DER
             |
             string MAS error:get
             {: addError(getleft, getright, " dato valido para concatenar"); :}
             |
             expr MAS error:get
             {: addError(getleft, getright, " dato valido para concatenar"); :}
             ;

expr     ::= expr MAS expr
             |
             expr POR expr
             |
             expr MENOS expr
             |
             expr DIV expr
             |
             expr MOD expr
             |
             PAR_IZQ expr PAR_DER
             |
             MENOS expr
             %prec UNARY
             |
             UNARY expr
             |
             expr UNARY
             |
             numero
             ;

numero   ::= concat | ENTERO | DECIMAL;