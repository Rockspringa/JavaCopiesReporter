
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.mooncoder.rml.controllers.analyzer.syntax;

import java.util.ArrayList;
import java.util.List;
import edu.mooncoder.rml.controllers.analyzer.lexic.HtmlLexer;
import edu.mooncoder.rml.controllers.builders.*;
import edu.mooncoder.rml.controllers.operations.Arithmetic;
import edu.mooncoder.rml.controllers.operations.Concat;
import edu.mooncoder.rml.exceptions.syntactical.UnexpectedTokenException;
import edu.mooncoder.rml.model.actions.ConstantAction;
import edu.mooncoder.rml.model.actions.VariableAction;
import edu.mooncoder.rml.model.contracts.Action;
import edu.mooncoder.rml.model.tags.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class HtmlParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tokens.class;
}

  /** Default constructor. */
  @Deprecated
  public HtmlParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public HtmlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public HtmlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\251\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\006\003\000" +
    "\002\004\003\000\002\004\005\000\002\005\004\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\007\005\000\002\007\010\000\002\007\010\000" +
    "\002\007\007\000\002\007\005\000\002\007\010\000\002" +
    "\010\004\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\004\000\002\013\003\000\002\014\004\000\002\014" +
    "\003\000\002\021\005\000\002\021\002\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\023\003\000" +
    "\002\023\003\000\002\022\003\000\002\022\003\000\002" +
    "\016\005\000\002\016\003\000\002\016\005\000\002\016" +
    "\005\000\002\017\003\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\020\003\000\002\020\006\000" +
    "\002\020\006\000\002\020\006\000\002\024\005\000\002" +
    "\024\004\000\002\024\005\000\002\024\004\000\002\025" +
    "\004\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\026" +
    "\004\000\002\027\010\000\002\027\010\000\002\027\010" +
    "\000\002\027\010\000\002\034\010\000\002\034\010\000" +
    "\002\034\010\000\002\034\010\000\002\034\010\000\002" +
    "\035\010\000\002\035\010\000\002\035\010\000\002\035" +
    "\010\000\002\035\010\000\002\036\006\000\002\036\006" +
    "\000\002\036\006\000\002\036\006\000\002\030\005\000" +
    "\002\030\005\000\002\030\004\000\002\030\004\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\031\005\000\002\031\004\000\002\031\005" +
    "\000\002\032\006\000\002\032\005\000\002\032\004\000" +
    "\002\032\004\000\002\032\005\000\002\032\004\000\002" +
    "\032\003\000\002\032\003\000\002\032\006\000\002\032" +
    "\006\000\002\032\005\000\002\032\007\000\002\032\006" +
    "\000\002\032\006\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\004\000\002" +
    "\032\006\000\002\032\005\000\002\032\005\000\002\032" +
    "\004\000\002\033\006\000\002\033\006\000\002\033\005" +
    "\000\002\033\005\000\002\033\004\000\002\033\004\000" +
    "\002\033\005\000\002\033\005\000\002\033\004\000\002" +
    "\033\004\000\002\033\003\000\002\033\003\000\002\033" +
    "\006\000\002\033\006\000\002\033\006\000\002\033\006" +
    "\000\002\033\005\000\002\033\005\000\002\033\007\000" +
    "\002\033\007\000\002\033\006\000\002\033\006\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\004\000\002\033\004\000\002\033\006" +
    "\000\002\033\006\000\002\033\005\000\002\033\005\000" +
    "\002\002\004\000\002\002\004\000\002\002\003\000\002" +
    "\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\014\003\013\004\012\010\005\011\011\033" +
    "\004\001\002\000\034\003\176\004\031\006\204\024\035" +
    "\031\174\034\173\036\200\040\172\042\202\044\170\046" +
    "\164\050\167\052\177\001\002\000\006\003\146\004\107" +
    "\001\002\000\004\002\145\001\002\000\004\002\uffff\001" +
    "\002\000\020\003\032\004\031\005\131\007\023\014\026" +
    "\021\024\024\035\001\002\000\006\003\110\004\107\001" +
    "\002\000\004\026\106\001\002\000\024\002\ufffd\003\032" +
    "\004\031\005\025\007\023\014\026\021\024\024\035\033" +
    "\004\001\002\000\014\003\ufffa\004\ufffa\010\ufffa\011\ufffa" +
    "\033\ufffa\001\002\000\014\003\020\004\012\010\005\011" +
    "\011\033\004\001\002\000\014\003\ufff9\004\ufff9\010\ufff9" +
    "\011\ufff9\033\ufff9\001\002\000\004\002\000\001\002\000" +
    "\020\003\032\004\031\005\025\007\023\014\026\021\024" +
    "\024\035\001\002\000\014\003\ufffc\004\ufffc\010\ufffc\011" +
    "\ufffc\033\ufffc\001\002\000\014\003\ufffb\004\ufffb\010\ufffb" +
    "\011\ufffb\033\ufffb\001\002\000\022\003\uffd2\013\uffd2\015" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\001\002" +
    "\000\014\004\031\007\023\014\026\021\024\024\035\001" +
    "\002\000\006\013\uffd5\020\075\001\002\000\014\004\031" +
    "\007\023\014\026\021\024\024\035\001\002\000\022\003" +
    "\uffda\013\uffda\015\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\001\002\000\004\013\072\001\002\000\070\003" +
    "\uffcf\004\uffcf\006\uffcf\013\uffcf\015\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\024\uffcf\031\uffcf\032\uffcf\034" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\001\002\000\010\003\uffd3\013\uffd3\020\uffd3\001\002" +
    "\000\022\003\uffd1\013\uffd1\015\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\001\002\000\016\003\uffd4\013\uffd4" +
    "\020\056\021\060\022\062\023\061\001\002\000\072\003" +
    "\uffcd\004\uffcd\006\uffcd\013\uffcd\015\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\037\031\uffcd\032" +
    "\uffcd\034\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\001\002\000\070\003\uffd0\004\uffd0\006\uffd0" +
    "\013\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\031\uffd0\032\uffd0\034\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\001\002\000\006" +
    "\003\071\004\041\001\002\000\006\003\043\004\041\001" +
    "\002\000\074\003\uffc6\004\uffc6\006\uffc6\013\uffc6\015\uffc6" +
    "\016\052\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\031\uffc6\032\uffc6\034\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\001\002\000\072" +
    "\003\uffcc\004\uffcc\006\uffcc\013\uffcc\015\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\047\031\uffcc" +
    "\032\uffcc\034\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\001\002\000\004\025\045\001\002\000" +
    "\072\003\uffca\004\uffca\006\uffca\013\uffca\015\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\031" +
    "\uffca\032\uffca\034\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\001\002\000\004\004\041\001\002" +
    "\000\072\003\uffc7\004\uffc7\006\uffc7\013\uffc7\015\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\031\uffc7\032\uffc7\034\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\052\uffc7\001\002\000\006\003\050\004" +
    "\041\001\002\000\072\003\uffc8\004\uffc8\006\uffc8\013\uffc8" +
    "\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\031\uffc8\032\uffc8\034\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\001\002\000\072" +
    "\003\uffc9\004\uffc9\006\uffc9\013\uffc9\015\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\031\uffc9" +
    "\032\uffc9\034\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\001\002\000\016\003\053\004\031\007" +
    "\023\014\026\021\024\024\035\001\002\000\004\017\067" +
    "\001\002\000\016\003\057\017\055\020\056\021\060\022" +
    "\062\023\061\001\002\000\072\003\uffc5\004\uffc5\006\uffc5" +
    "\013\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\031\uffc5\032\uffc5\034\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\001\002" +
    "\000\014\004\031\007\023\014\026\021\024\024\035\001" +
    "\002\000\072\003\uffc4\004\uffc4\006\uffc4\013\uffc4\015\uffc4" +
    "\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\031\uffc4\032\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\001\002\000\014\004\031" +
    "\007\023\014\026\021\024\024\035\001\002\000\014\004" +
    "\031\007\023\014\026\021\024\024\035\001\002\000\014" +
    "\004\031\007\023\014\026\021\024\024\035\001\002\000" +
    "\022\003\uffde\013\uffde\015\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\001\002\000\022\003\uffdd\013\uffdd\015" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\001\002" +
    "\000\022\003\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\062\023\061\001\002\000\022\003\uffe0\013\uffe0" +
    "\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\062\023\061\001" +
    "\002\000\072\003\uffc3\004\uffc3\006\uffc3\013\uffc3\015\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\031\uffc3\032\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\001\002\000\072\003\uffce" +
    "\004\uffce\006\uffce\013\uffce\015\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\047\031\uffce\032\uffce" +
    "\034\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\001\002\000\072\003\uffcb\004\uffcb\006\uffcb\013" +
    "\uffcb\015\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\045\031\uffcb\032\uffcb\034\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\001\002\000" +
    "\014\003\uffea\004\uffea\010\uffea\011\uffea\033\uffea\001\002" +
    "\000\014\015\074\020\056\021\060\022\062\023\061\001" +
    "\002\000\022\003\uffdc\013\uffdc\015\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\001\002\000\020\003\032\004" +
    "\031\005\076\007\023\014\026\021\024\024\035\001\002" +
    "\000\010\003\uffd5\013\uffd5\020\uffd5\001\002\000\006\013" +
    "\uffd6\020\uffd6\001\002\000\006\013\102\020\101\001\002" +
    "\000\020\003\032\004\031\005\076\007\023\014\026\021" +
    "\024\024\035\001\002\000\014\003\uffe9\004\uffe9\010\uffe9" +
    "\011\uffe9\033\uffe9\001\002\000\010\003\uffd7\013\uffd7\020" +
    "\uffd7\001\002\000\022\003\uffdb\013\uffdb\015\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\001\002\000\004\002" +
    "\ufffe\001\002\000\020\003\uffe8\004\uffe8\005\uffe8\007\uffe8" +
    "\014\uffe8\021\uffe8\024\uffe8\001\002\000\012\003\ufff8\012" +
    "\ufff8\013\ufff8\026\106\001\002\000\010\005\114\013\126" +
    "\024\035\001\002\000\010\003\123\012\122\013\124\001" +
    "\002\000\006\005\114\024\035\001\002\000\014\003\ufff5" +
    "\004\ufff5\010\ufff5\011\ufff5\033\ufff5\001\002\000\010\003" +
    "\uffd6\013\uffd6\020\uffd6\001\002\000\006\003\uffd8\013\uffd8" +
    "\001\002\000\006\003\117\013\120\001\002\000\014\003" +
    "\uffe2\004\uffe2\010\uffe2\011\uffe2\033\uffe2\001\002\000\014" +
    "\003\uffe3\004\uffe3\010\uffe3\011\uffe3\033\uffe3\001\002\000" +
    "\010\003\uffd9\013\uffd9\020\101\001\002\000\004\004\125" +
    "\001\002\000\014\003\ufff1\004\ufff1\010\ufff1\011\ufff1\033" +
    "\ufff1\001\002\000\014\003\ufff3\004\ufff3\010\ufff3\011\ufff3" +
    "\033\ufff3\001\002\000\010\003\ufff7\012\ufff7\013\ufff7\001" +
    "\002\000\014\003\uffef\004\uffef\010\uffef\011\uffef\033\uffef" +
    "\001\002\000\004\013\130\001\002\000\014\003\uffe1\004" +
    "\uffe1\010\uffe1\011\uffe1\033\uffe1\001\002\000\010\003\135" +
    "\013\uffd5\020\134\001\002\000\004\013\133\001\002\000" +
    "\014\003\uffee\004\uffee\010\uffee\011\uffee\033\uffee\001\002" +
    "\000\020\003\032\004\031\005\076\007\023\014\026\021" +
    "\024\024\035\001\002\000\020\003\032\004\031\005\076" +
    "\007\023\014\026\021\024\024\035\001\002\000\006\013" +
    "\uffd6\020\uffd6\001\002\000\006\013\140\020\101\001\002" +
    "\000\014\003\uffec\004\uffec\010\uffec\011\uffec\033\uffec\001" +
    "\002\000\010\003\142\013\uffd6\020\uffd6\001\002\000\014" +
    "\003\uffeb\004\uffeb\010\uffeb\011\uffeb\033\uffeb\001\002\000" +
    "\006\013\144\020\101\001\002\000\014\003\uffed\004\uffed" +
    "\010\uffed\011\uffed\033\uffed\001\002\000\004\002\001\001" +
    "\002\000\016\004\031\007\023\013\161\014\026\021\024" +
    "\024\035\001\002\000\010\003\157\012\122\013\160\001" +
    "\002\000\016\003\152\004\031\007\023\014\026\021\024" +
    "\024\035\001\002\000\014\003\ufff6\004\ufff6\010\ufff6\011" +
    "\ufff6\033\ufff6\001\002\000\004\013\156\001\002\000\016" +
    "\003\154\013\155\020\056\021\060\022\062\023\061\001" +
    "\002\000\014\003\uffe5\004\uffe5\010\uffe5\011\uffe5\033\uffe5" +
    "\001\002\000\014\003\uffe7\004\uffe7\010\uffe7\011\uffe7\033" +
    "\uffe7\001\002\000\014\003\uffe6\004\uffe6\010\uffe6\011\uffe6" +
    "\033\uffe6\001\002\000\014\003\ufff2\004\ufff2\010\ufff2\011" +
    "\ufff2\033\ufff2\001\002\000\014\003\ufff4\004\ufff4\010\ufff4" +
    "\011\ufff4\033\ufff4\001\002\000\014\003\ufff0\004\ufff0\010" +
    "\ufff0\011\ufff0\033\ufff0\001\002\000\014\013\163\020\056" +
    "\021\060\022\062\023\061\001\002\000\014\003\uffe4\004" +
    "\uffe4\010\uffe4\011\uffe4\033\uffe4\001\002\000\004\003\u013a" +
    "\001\002\000\036\003\uffbd\004\uffbd\006\uffbd\024\uffbd\031" +
    "\uffbd\034\uffbd\036\uffbd\040\uffbd\042\uffbd\044\uffbd\046\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\001\002\000\036\003\uffba\004" +
    "\uffba\006\uffba\024\uffba\031\uffba\034\uffba\036\uffba\040\uffba" +
    "\042\uffba\044\uffba\046\uffba\050\uffba\051\uffba\052\uffba\001" +
    "\002\000\006\003\u0131\030\u0132\001\002\000\004\003\u0130" +
    "\001\002\000\052\003\uff59\004\uff59\006\uff59\024\uff59\031" +
    "\uff59\032\uff59\034\uff59\036\uff59\037\uff59\040\uff59\041\uff59" +
    "\042\uff59\043\uff59\044\uff59\045\uff59\046\uff59\047\uff59\050" +
    "\uff59\051\uff59\052\uff59\001\002\000\014\003\u012b\004\031" +
    "\006\204\024\035\041\u012a\001\002\000\004\002\uffc1\001" +
    "\002\000\020\003\252\004\031\006\204\024\035\032\254" +
    "\042\256\050\167\001\002\000\034\003\247\004\031\006" +
    "\204\024\035\031\174\034\246\036\200\040\172\042\202" +
    "\044\170\046\164\050\167\052\177\001\002\000\044\002" +
    "\uffbf\003\uffb7\004\uffb7\006\uffb7\024\uffb7\031\uffb7\032\221" +
    "\034\uffb7\036\uffb7\037\220\040\uffb7\041\217\042\uffb7\044" +
    "\uffb7\046\uffb7\050\uffb7\052\uffb7\001\002\000\036\003\uffbb" +
    "\004\uffbb\006\uffbb\024\uffbb\031\uffbb\034\uffbb\036\uffbb\040" +
    "\uffbb\042\uffbb\044\uffbb\046\uffbb\050\uffbb\051\uffbb\052\uffbb" +
    "\001\002\000\014\003\240\004\031\006\204\024\035\037" +
    "\241\001\002\000\036\003\uffbc\004\uffbc\006\uffbc\024\uffbc" +
    "\031\uffbc\034\uffbc\036\uffbc\040\uffbc\042\uffbc\044\uffbc\046" +
    "\uffbc\050\uffbc\051\uffbc\052\uffbc\001\002\000\004\003\237" +
    "\001\002\000\036\003\uffb9\004\uffb9\006\uffb9\024\uffb9\031" +
    "\uffb9\034\uffb9\036\uffb9\040\uffb9\042\uffb9\044\uffb9\046\uffb9" +
    "\050\uffb9\051\uffb9\052\uffb9\001\002\000\052\003\uff5a\004" +
    "\uff5a\006\uff5a\024\uff5a\031\uff5a\032\uff5a\034\uff5a\036\uff5a" +
    "\037\uff5a\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045" +
    "\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a\001\002" +
    "\000\006\003\212\004\211\001\002\000\036\003\uffb8\004" +
    "\031\006\207\024\035\031\uffb8\034\uffb8\036\uffb8\040\uffb8" +
    "\042\uffb8\044\uffb8\046\uffb8\050\uffb8\051\uffb8\052\uffb8\001" +
    "\002\000\052\003\uff5c\004\uff5c\006\uff5c\024\uff5c\031\uff5c" +
    "\032\uff5c\034\uff5c\036\uff5c\037\uff5c\040\uff5c\041\uff5c\042" +
    "\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c\047\uff5c\050\uff5c" +
    "\051\uff5c\052\uff5c\001\002\000\052\003\uff5b\004\uff5b\006" +
    "\uff5b\024\uff5b\031\uff5b\032\uff5b\034\uff5b\036\uff5b\037\uff5b" +
    "\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b\046" +
    "\uff5b\047\uff5b\050\uff5b\051\uff5b\052\uff5b\001\002\000\006" +
    "\003\224\013\225\001\002\000\004\013\213\001\002\000" +
    "\004\053\214\001\002\000\032\003\216\004\031\006\204" +
    "\024\035\031\174\036\200\040\172\042\202\044\170\046" +
    "\164\050\167\052\177\001\002\000\034\003\216\004\031" +
    "\006\204\024\035\031\174\036\200\040\172\042\202\044" +
    "\170\046\164\050\167\051\223\052\177\001\002\000\042" +
    "\003\uffb7\004\uffb7\006\uffb7\024\uffb7\031\uffb7\032\221\036" +
    "\uffb7\037\220\040\uffb7\041\217\042\uffb7\044\uffb7\046\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\001\002\000\036\003\uffb4\004" +
    "\uffb4\006\uffb4\024\uffb4\031\uffb4\034\uffb4\036\uffb4\040\uffb4" +
    "\042\uffb4\044\uffb4\046\uffb4\050\uffb4\051\uffb4\052\uffb4\001" +
    "\002\000\036\003\uffb5\004\uffb5\006\uffb5\024\uffb5\031\uffb5" +
    "\034\uffb5\036\uffb5\040\uffb5\042\uffb5\044\uffb5\046\uffb5\050" +
    "\uffb5\051\uffb5\052\uffb5\001\002\000\036\003\uffb6\004\uffb6" +
    "\006\uffb6\024\uffb6\031\uffb6\034\uffb6\036\uffb6\040\uffb6\042" +
    "\uffb6\044\uffb6\046\uffb6\050\uffb6\051\uffb6\052\uffb6\001\002" +
    "\000\036\003\uffbe\004\uffbe\006\uffbe\024\uffbe\031\uffbe\034" +
    "\uffbe\036\uffbe\040\uffbe\042\uffbe\044\uffbe\046\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\001\002\000\036\003\uffaf\004\uffaf\006" +
    "\uffaf\024\uffaf\031\uffaf\034\uffaf\036\uffaf\040\uffaf\042\uffaf" +
    "\044\uffaf\046\uffaf\050\uffaf\051\uffaf\052\uffaf\001\002\000" +
    "\004\053\234\001\002\000\006\003\226\053\227\001\002" +
    "\000\032\003\216\004\031\006\204\024\035\031\174\036" +
    "\200\040\172\042\202\044\170\046\164\050\167\052\177" +
    "\001\002\000\032\003\216\004\031\006\204\024\035\031" +
    "\174\036\200\040\172\042\202\044\170\046\164\050\167" +
    "\052\177\001\002\000\034\003\216\004\031\006\204\024" +
    "\035\031\174\036\200\040\172\042\202\044\170\046\164" +
    "\050\167\051\231\052\177\001\002\000\036\003\uffb0\004" +
    "\uffb0\006\uffb0\024\uffb0\031\uffb0\034\uffb0\036\uffb0\040\uffb0" +
    "\042\uffb0\044\uffb0\046\uffb0\050\uffb0\051\uffb0\052\uffb0\001" +
    "\002\000\034\003\216\004\031\006\204\024\035\031\174" +
    "\036\200\040\172\042\202\044\170\046\164\050\167\051" +
    "\233\052\177\001\002\000\036\003\uffad\004\uffad\006\uffad" +
    "\024\uffad\031\uffad\034\uffad\036\uffad\040\uffad\042\uffad\044" +
    "\uffad\046\uffad\050\uffad\051\uffad\052\uffad\001\002\000\032" +
    "\003\216\004\031\006\204\024\035\031\174\036\200\040" +
    "\172\042\202\044\170\046\164\050\167\052\177\001\002" +
    "\000\034\003\216\004\031\006\204\024\035\031\174\036" +
    "\200\040\172\042\202\044\170\046\164\050\167\051\236" +
    "\052\177\001\002\000\036\003\uffae\004\uffae\006\uffae\024" +
    "\uffae\031\uffae\034\uffae\036\uffae\040\uffae\042\uffae\044\uffae" +
    "\046\uffae\050\uffae\051\uffae\052\uffae\001\002\000\036\003" +
    "\uffb1\004\uffb1\006\uffb1\024\uffb1\031\uffb1\034\uffb1\036\uffb1" +
    "\040\uffb1\042\uffb1\044\uffb1\046\uffb1\050\uffb1\051\uffb1\052" +
    "\uffb1\001\002\000\004\037\245\001\002\000\036\003\uff9c" +
    "\004\uff9c\006\uff9c\024\uff9c\031\uff9c\034\uff9c\036\uff9c\040" +
    "\uff9c\042\uff9c\044\uff9c\046\uff9c\050\uff9c\051\uff9c\052\uff9c" +
    "\001\002\000\014\003\243\004\031\006\207\024\035\037" +
    "\244\001\002\000\036\003\uff98\004\uff98\006\uff98\024\uff98" +
    "\031\uff98\034\uff98\036\uff98\040\uff98\042\uff98\044\uff98\046" +
    "\uff98\050\uff98\051\uff98\052\uff98\001\002\000\036\003\uff9e" +
    "\004\uff9e\006\uff9e\024\uff9e\031\uff9e\034\uff9e\036\uff9e\040" +
    "\uff9e\042\uff9e\044\uff9e\046\uff9e\050\uff9e\051\uff9e\052\uff9e" +
    "\001\002\000\036\003\uff9a\004\uff9a\006\uff9a\024\uff9a\031" +
    "\uff9a\034\uff9a\036\uff9a\040\uff9a\042\uff9a\044\uff9a\046\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\001\002\000\004\002\uffc2\001" +
    "\002\000\044\002\uffc0\003\uffb7\004\uffb7\006\uffb7\024\uffb7" +
    "\031\uffb7\032\221\034\uffb7\036\uffb7\037\220\040\uffb7\041" +
    "\217\042\uffb7\044\uffb7\046\uffb7\050\uffb7\052\uffb7\001\002" +
    "\000\022\003\uff8c\004\031\006\207\024\035\032\uff8c\042" +
    "\uff8c\050\uff8c\051\uff8c\001\002\000\022\003\uff8d\004\uff8d" +
    "\006\uff8d\024\uff8d\032\uff8d\042\uff8d\050\uff8d\051\uff8d\001" +
    "\002\000\026\003\341\004\031\006\204\024\035\032\u0129" +
    "\042\u0117\043\u0116\044\263\046\266\050\167\001\002\000" +
    "\006\003\u010f\004\u010e\001\002\000\036\003\uff95\004\uff95" +
    "\006\uff95\024\uff95\031\uff95\034\uff95\036\uff95\040\uff95\042" +
    "\uff95\044\uff95\046\uff95\050\uff95\051\uff95\052\uff95\001\002" +
    "\000\020\003\375\004\031\006\204\024\035\032\376\042" +
    "\377\050\167\001\002\000\022\003\261\004\031\006\204" +
    "\024\035\043\264\044\263\046\266\050\167\001\002\000" +
    "\024\003\uff71\004\031\006\207\024\035\043\uff71\044\uff71" +
    "\046\uff71\050\uff71\051\uff71\001\002\000\024\003\uff72\004" +
    "\uff72\006\uff72\024\uff72\043\uff72\044\uff72\046\uff72\050\uff72" +
    "\051\uff72\001\002\000\030\003\uff81\004\uff81\006\uff81\024" +
    "\uff81\032\uff81\042\uff81\043\372\044\345\046\346\050\uff81" +
    "\051\uff81\001\002\000\006\003\336\004\335\001\002\000" +
    "\014\003\327\004\031\006\204\024\035\045\331\001\002" +
    "\000\022\003\uff8e\004\uff8e\006\uff8e\024\uff8e\032\uff8e\042" +
    "\uff8e\050\uff8e\051\uff8e\001\002\000\022\003\277\004\031" +
    "\006\204\024\035\043\301\044\300\046\302\050\167\001" +
    "\002\000\014\003\270\004\031\006\204\024\035\047\267" +
    "\001\002\000\024\003\uff73\004\uff73\006\uff73\024\uff73\043" +
    "\uff73\044\uff73\046\uff73\050\uff73\051\uff73\001\002\000\026" +
    "\003\uff61\004\uff61\006\uff61\024\uff61\043\uff61\044\uff61\046" +
    "\uff61\047\274\050\uff61\051\uff61\001\002\000\014\003\272" +
    "\004\031\006\207\024\035\047\273\001\002\000\024\003" +
    "\uff63\004\uff63\006\uff63\024\uff63\043\uff63\044\uff63\046\uff63" +
    "\050\uff63\051\uff63\001\002\000\024\003\uff75\004\uff75\006" +
    "\uff75\024\uff75\043\uff75\044\uff75\046\uff75\050\uff75\051\uff75" +
    "\001\002\000\024\003\uff65\004\uff65\006\uff65\024\uff65\043" +
    "\uff65\044\uff65\046\uff65\050\uff65\051\uff65\001\002\000\024" +
    "\003\uff77\004\031\006\207\024\035\043\uff77\044\uff77\046" +
    "\uff77\050\uff77\051\uff77\001\002\000\024\003\uff78\004\uff78" +
    "\006\uff78\024\uff78\043\uff78\044\uff78\046\uff78\050\uff78\051" +
    "\uff78\001\002\000\026\003\uff82\004\uff82\006\uff82\024\uff82" +
    "\032\uff82\042\uff82\044\317\046\320\050\uff82\051\uff82\001" +
    "\002\000\014\003\311\004\031\006\204\024\035\045\313" +
    "\001\002\000\022\003\uff8f\004\uff8f\006\uff8f\024\uff8f\032" +
    "\uff8f\042\uff8f\050\uff8f\051\uff8f\001\002\000\014\003\304" +
    "\004\031\006\204\024\035\047\303\001\002\000\024\003" +
    "\uff79\004\uff79\006\uff79\024\uff79\043\uff79\044\uff79\046\uff79" +
    "\050\uff79\051\uff79\001\002\000\026\003\uff6b\004\uff6b\006" +
    "\uff6b\024\uff6b\043\uff6b\044\uff6b\046\uff6b\047\310\050\uff6b" +
    "\051\uff6b\001\002\000\014\003\306\004\031\006\207\024" +
    "\035\047\307\001\002\000\024\003\uff6d\004\uff6d\006\uff6d" +
    "\024\uff6d\043\uff6d\044\uff6d\046\uff6d\050\uff6d\051\uff6d\001" +
    "\002\000\024\003\uff7b\004\uff7b\006\uff7b\024\uff7b\043\uff7b" +
    "\044\uff7b\046\uff7b\050\uff7b\051\uff7b\001\002\000\024\003" +
    "\uff6f\004\uff6f\006\uff6f\024\uff6f\043\uff6f\044\uff6f\046\uff6f" +
    "\050\uff6f\051\uff6f\001\002\000\026\003\uff6c\004\uff6c\006" +
    "\uff6c\024\uff6c\043\uff6c\044\uff6c\045\316\046\uff6c\050\uff6c" +
    "\051\uff6c\001\002\000\014\003\314\004\031\006\207\024" +
    "\035\045\315\001\002\000\024\003\uff7a\004\uff7a\006\uff7a" +
    "\024\uff7a\043\uff7a\044\uff7a\046\uff7a\050\uff7a\051\uff7a\001" +
    "\002\000\024\003\uff6e\004\uff6e\006\uff6e\024\uff6e\043\uff6e" +
    "\044\uff6e\046\uff6e\050\uff6e\051\uff6e\001\002\000\024\003" +
    "\uff7c\004\uff7c\006\uff7c\024\uff7c\043\uff7c\044\uff7c\046\uff7c" +
    "\050\uff7c\051\uff7c\001\002\000\024\003\uff70\004\uff70\006" +
    "\uff70\024\uff70\043\uff70\044\uff70\046\uff70\050\uff70\051\uff70" +
    "\001\002\000\012\004\031\006\204\024\035\045\325\001" +
    "\002\000\012\004\031\006\204\024\035\047\321\001\002" +
    "\000\024\003\uff67\004\uff67\006\uff67\024\uff67\043\uff67\044" +
    "\uff67\046\uff67\050\uff67\051\uff67\001\002\000\012\004\031" +
    "\006\207\024\035\047\323\001\002\000\024\003\uff69\004" +
    "\uff69\006\uff69\024\uff69\043\uff69\044\uff69\046\uff69\050\uff69" +
    "\051\uff69\001\002\000\012\004\031\006\207\024\035\045" +
    "\326\001\002\000\024\003\uff68\004\uff68\006\uff68\024\uff68" +
    "\043\uff68\044\uff68\046\uff68\050\uff68\051\uff68\001\002\000" +
    "\024\003\uff6a\004\uff6a\006\uff6a\024\uff6a\043\uff6a\044\uff6a" +
    "\046\uff6a\050\uff6a\051\uff6a\001\002\000\026\003\uff62\004" +
    "\uff62\006\uff62\024\uff62\043\uff62\044\uff62\045\334\046\uff62" +
    "\050\uff62\051\uff62\001\002\000\014\003\332\004\031\006" +
    "\207\024\035\045\333\001\002\000\024\003\uff74\004\uff74" +
    "\006\uff74\024\uff74\043\uff74\044\uff74\046\uff74\050\uff74\051" +
    "\uff74\001\002\000\024\003\uff64\004\uff64\006\uff64\024\uff64" +
    "\043\uff64\044\uff64\046\uff64\050\uff64\051\uff64\001\002\000" +
    "\024\003\uff76\004\uff76\006\uff76\024\uff76\043\uff76\044\uff76" +
    "\046\uff76\050\uff76\051\uff76\001\002\000\024\003\uff66\004" +
    "\uff66\006\uff66\024\uff66\043\uff66\044\uff66\046\uff66\050\uff66" +
    "\051\uff66\001\002\000\006\003\355\013\356\001\002\000" +
    "\004\013\337\001\002\000\004\053\340\001\002\000\020" +
    "\003\341\004\031\006\204\024\035\044\263\046\266\050" +
    "\167\001\002\000\006\044\345\046\346\001\002\000\022" +
    "\003\344\004\031\006\204\024\035\044\300\046\302\050" +
    "\167\051\343\001\002\000\024\003\uffa6\004\uffa6\006\uffa6" +
    "\024\uffa6\043\uffa6\044\uffa6\046\uffa6\050\uffa6\051\uffa6\001" +
    "\002\000\006\044\317\046\320\001\002\000\012\004\031" +
    "\006\204\024\035\045\353\001\002\000\012\004\031\006" +
    "\204\024\035\047\347\001\002\000\024\003\uff5d\004\uff5d" +
    "\006\uff5d\024\uff5d\043\uff5d\044\uff5d\046\uff5d\050\uff5d\051" +
    "\uff5d\001\002\000\012\004\031\006\207\024\035\047\351" +
    "\001\002\000\024\003\uff5f\004\uff5f\006\uff5f\024\uff5f\043" +
    "\uff5f\044\uff5f\046\uff5f\050\uff5f\051\uff5f\001\002\000\012" +
    "\004\031\006\207\024\035\045\354\001\002\000\024\003" +
    "\uff5e\004\uff5e\006\uff5e\024\uff5e\043\uff5e\044\uff5e\046\uff5e" +
    "\050\uff5e\051\uff5e\001\002\000\024\003\uff60\004\uff60\006" +
    "\uff60\024\uff60\043\uff60\044\uff60\046\uff60\050\uff60\051\uff60" +
    "\001\002\000\004\053\367\001\002\000\006\003\357\053" +
    "\360\001\002\000\020\003\341\004\031\006\204\024\035" +
    "\044\263\046\266\050\167\001\002\000\020\003\361\004" +
    "\031\006\204\024\035\044\263\046\266\050\167\001\002" +
    "\000\010\044\345\046\346\051\364\001\002\000\022\003" +
    "\344\004\031\006\204\024\035\044\300\046\302\050\167" +
    "\051\363\001\002\000\024\003\uffa7\004\uffa7\006\uffa7\024" +
    "\uffa7\043\uffa7\044\uffa7\046\uffa7\050\uffa7\051\uffa7\001\002" +
    "\000\024\003\uffa3\004\uffa3\006\uffa3\024\uffa3\043\uffa3\044" +
    "\uffa3\046\uffa3\050\uffa3\051\uffa3\001\002\000\022\003\344" +
    "\004\031\006\204\024\035\044\300\046\302\050\167\051" +
    "\366\001\002\000\024\003\uffa4\004\uffa4\006\uffa4\024\uffa4" +
    "\043\uffa4\044\uffa4\046\uffa4\050\uffa4\051\uffa4\001\002\000" +
    "\020\003\341\004\031\006\204\024\035\044\263\046\266" +
    "\050\167\001\002\000\022\003\344\004\031\006\204\024" +
    "\035\044\300\046\302\050\167\051\371\001\002\000\024" +
    "\003\uffa5\004\uffa5\006\uffa5\024\uffa5\043\uffa5\044\uffa5\046" +
    "\uffa5\050\uffa5\051\uffa5\001\002\000\022\003\uff83\004\uff83" +
    "\006\uff83\024\uff83\032\uff83\042\uff83\050\uff83\051\uff83\001" +
    "\002\000\022\003\uff90\004\031\006\207\024\035\032\uff90" +
    "\042\uff90\050\uff90\051\uff90\001\002\000\022\003\uff91\004" +
    "\uff91\006\uff91\024\uff91\032\uff91\042\uff91\050\uff91\051\uff91" +
    "\001\002\000\026\003\341\004\031\006\204\024\035\042" +
    "\u0109\043\u0107\044\263\046\266\050\167\051\u0106\001\002" +
    "\000\036\003\uff96\004\uff96\006\uff96\024\uff96\031\uff96\034" +
    "\uff96\036\uff96\040\uff96\042\uff96\044\uff96\046\uff96\050\uff96" +
    "\051\uff96\052\uff96\001\002\000\022\003\u0100\004\031\006" +
    "\204\024\035\043\u0101\044\263\046\266\050\167\001\002" +
    "\000\030\003\uff89\004\uff89\006\uff89\024\uff89\032\uff89\042" +
    "\uff89\043\u0105\044\345\046\346\050\uff89\051\uff89\001\002" +
    "\000\022\003\uff92\004\uff92\006\uff92\024\uff92\032\uff92\042" +
    "\uff92\050\uff92\051\uff92\001\002\000\022\003\u0103\004\031" +
    "\006\204\024\035\043\u0104\044\300\046\302\050\167\001" +
    "\002\000\026\003\uff8a\004\uff8a\006\uff8a\024\uff8a\032\uff8a" +
    "\042\uff8a\044\317\046\320\050\uff8a\051\uff8a\001\002\000" +
    "\022\003\uff93\004\uff93\006\uff93\024\uff93\032\uff93\042\uff93" +
    "\050\uff93\051\uff93\001\002\000\022\003\uff8b\004\uff8b\006" +
    "\uff8b\024\uff8b\032\uff8b\042\uff8b\050\uff8b\051\uff8b\001\002" +
    "\000\022\003\uff84\004\uff84\006\uff84\024\uff84\032\uff84\042" +
    "\uff84\050\uff84\051\uff84\001\002\000\022\003\uff85\004\uff85" +
    "\006\uff85\024\uff85\032\uff85\042\uff85\050\uff85\051\uff85\001" +
    "\002\000\022\003\344\004\031\006\204\024\035\043\u010d" +
    "\044\300\046\302\050\167\001\002\000\022\003\341\004" +
    "\031\006\204\024\035\043\u010a\044\263\046\266\050\167" +
    "\001\002\000\022\003\uff87\004\uff87\006\uff87\024\uff87\032" +
    "\uff87\042\uff87\050\uff87\051\uff87\001\002\000\022\003\344" +
    "\004\031\006\204\024\035\043\u010c\044\300\046\302\050" +
    "\167\001\002\000\022\003\uff88\004\uff88\006\uff88\024\uff88" +
    "\032\uff88\042\uff88\050\uff88\051\uff88\001\002\000\022\003" +
    "\uff86\004\uff86\006\uff86\024\uff86\032\uff86\042\uff86\050\uff86" +
    "\051\uff86\001\002\000\006\003\u011c\013\u011d\001\002\000" +
    "\004\013\u0110\001\002\000\004\053\u0111\001\002\000\016" +
    "\003\u0112\004\031\006\204\024\035\042\256\050\167\001" +
    "\002\000\024\003\341\004\031\006\204\024\035\042\u0117" +
    "\043\u0116\044\263\046\266\050\167\001\002\000\020\003" +
    "\375\004\031\006\204\024\035\042\377\050\167\051\u0114" +
    "\001\002\000\022\003\uffab\004\uffab\006\uffab\024\uffab\032" +
    "\uffab\042\uffab\050\uffab\051\uffab\001\002\000\022\003\344" +
    "\004\031\006\204\024\035\043\u011b\044\300\046\302\050" +
    "\167\001\002\000\022\003\uff7d\004\uff7d\006\uff7d\024\uff7d" +
    "\032\uff7d\042\uff7d\050\uff7d\051\uff7d\001\002\000\022\003" +
    "\341\004\031\006\204\024\035\043\u0118\044\263\046\266" +
    "\050\167\001\002\000\022\003\uff7f\004\uff7f\006\uff7f\024" +
    "\uff7f\032\uff7f\042\uff7f\050\uff7f\051\uff7f\001\002\000\022" +
    "\003\344\004\031\006\204\024\035\043\u011a\044\300\046" +
    "\302\050\167\001\002\000\022\003\uff80\004\uff80\006\uff80" +
    "\024\uff80\032\uff80\042\uff80\050\uff80\051\uff80\001\002\000" +
    "\022\003\uff7e\004\uff7e\006\uff7e\024\uff7e\032\uff7e\042\uff7e" +
    "\050\uff7e\051\uff7e\001\002\000\004\053\u0126\001\002\000" +
    "\006\003\u011e\053\u011f\001\002\000\016\003\u0112\004\031" +
    "\006\204\024\035\042\256\050\167\001\002\000\016\003" +
    "\u0120\004\031\006\204\024\035\042\256\050\167\001\002" +
    "\000\026\003\341\004\031\006\204\024\035\042\u0117\043" +
    "\u0116\044\263\046\266\050\167\051\u0123\001\002\000\020" +
    "\003\375\004\031\006\204\024\035\042\377\050\167\051" +
    "\u0122\001\002\000\022\003\uffac\004\uffac\006\uffac\024\uffac" +
    "\032\uffac\042\uffac\050\uffac\051\uffac\001\002\000\022\003" +
    "\uffa8\004\uffa8\006\uffa8\024\uffa8\032\uffa8\042\uffa8\050\uffa8" +
    "\051\uffa8\001\002\000\020\003\375\004\031\006\204\024" +
    "\035\042\377\050\167\051\u0125\001\002\000\022\003\uffa9" +
    "\004\uffa9\006\uffa9\024\uffa9\032\uffa9\042\uffa9\050\uffa9\051" +
    "\uffa9\001\002\000\016\003\u0112\004\031\006\204\024\035" +
    "\042\256\050\167\001\002\000\020\003\375\004\031\006" +
    "\204\024\035\042\377\050\167\051\u0128\001\002\000\022" +
    "\003\uffaa\004\uffaa\006\uffaa\024\uffaa\032\uffaa\042\uffaa\050" +
    "\uffaa\051\uffaa\001\002\000\036\003\uff94\004\uff94\006\uff94" +
    "\024\uff94\031\uff94\034\uff94\036\uff94\040\uff94\042\uff94\044" +
    "\uff94\046\uff94\050\uff94\051\uff94\052\uff94\001\002\000\036" +
    "\003\uff9b\004\uff9b\006\uff9b\024\uff9b\031\uff9b\034\uff9b\036" +
    "\uff9b\040\uff9b\042\uff9b\044\uff9b\046\uff9b\050\uff9b\051\uff9b" +
    "\052\uff9b\001\002\000\004\041\u012f\001\002\000\014\003" +
    "\u012e\004\031\006\207\024\035\041\u012d\001\002\000\036" +
    "\003\uff9d\004\uff9d\006\uff9d\024\uff9d\031\uff9d\034\uff9d\036" +
    "\uff9d\040\uff9d\042\uff9d\044\uff9d\046\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\001\002\000\036\003\uff97\004\uff97\006\uff97\024" +
    "\uff97\031\uff97\034\uff97\036\uff97\040\uff97\042\uff97\044\uff97" +
    "\046\uff97\050\uff97\051\uff97\052\uff97\001\002\000\036\003" +
    "\uff99\004\uff99\006\uff99\024\uff99\031\uff99\034\uff99\036\uff99" +
    "\040\uff99\042\uff99\044\uff99\046\uff99\050\uff99\051\uff99\052" +
    "\uff99\001\002\000\036\003\uffb3\004\uffb3\006\uffb3\024\uffb3" +
    "\031\uffb3\034\uffb3\036\uffb3\040\uffb3\042\uffb3\044\uffb3\046" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\001\002\000\004\004\u0138" +
    "\001\002\000\006\003\u0134\004\u0133\001\002\000\006\003" +
    "\u0136\035\u0137\001\002\000\004\035\u0135\001\002\000\006" +
    "\003\uffa0\004\uffa0\001\002\000\006\003\uff9f\004\uff9f\001" +
    "\002\000\006\003\uffa2\004\uffa2\001\002\000\004\035\u0139" +
    "\001\002\000\006\003\uffa1\004\uffa1\001\002\000\036\003" +
    "\uffb2\004\uffb2\006\uffb2\024\uffb2\031\uffb2\034\uffb2\036\uffb2" +
    "\040\uffb2\042\uffb2\044\uffb2\046\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\016\003\005\005\013\006\014\007\015\010" +
    "\007\024\006\001\001\000\024\002\205\016\035\022\170" +
    "\025\174\026\164\027\200\030\165\031\202\036\204\001" +
    "\001\000\010\004\146\010\147\011\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\033\015\131\016" +
    "\035\022\032\023\026\001\001\000\010\004\110\010\111" +
    "\012\112\001\001\000\002\001\001\000\016\013\033\015" +
    "\027\016\035\022\032\023\026\024\104\001\001\000\002" +
    "\001\001\000\012\005\020\007\021\010\007\024\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\033" +
    "\015\027\016\035\022\032\023\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\103" +
    "\016\035\022\032\023\026\001\001\000\002\001\001\000" +
    "\012\013\072\016\035\022\032\023\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\067\020\043\001\001\000" +
    "\006\017\041\020\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\045\001\001\000\002\001\001\000\004\020\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\053\016" +
    "\035\022\032\023\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\065\016\035\022" +
    "\032\023\026\001\001\000\002\001\001\000\012\013\064" +
    "\016\035\022\032\023\026\001\001\000\012\013\063\016" +
    "\035\022\032\023\026\001\001\000\012\013\062\016\035" +
    "\022\032\023\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\033\015\076" +
    "\016\035\022\032\023\026\001\001\000\002\001\001\000" +
    "\004\021\077\001\001\000\002\001\001\000\014\013\033" +
    "\015\102\016\035\022\032\023\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\126\016" +
    "\114\001\001\000\002\001\001\000\006\014\115\016\114" +
    "\001\001\000\002\001\001\000\004\021\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\033\015\140" +
    "\016\035\022\032\023\026\001\001\000\014\013\033\015" +
    "\135\016\035\022\032\023\026\001\001\000\004\021\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\161\016\035\022" +
    "\032\023\026\001\001\000\002\001\001\000\012\013\152" +
    "\016\035\022\032\023\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\u012b\016\035\022\170\001\001\000\002\001\001\000" +
    "\016\002\247\016\035\022\170\032\254\034\250\036\252" +
    "\001\001\000\022\002\205\016\035\022\170\026\221\027" +
    "\200\030\165\031\202\036\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\241\016\035\022\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\035\022" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\205\016\035\022\170\025\214\026\164\027\200\030\165" +
    "\031\202\036\204\001\001\000\022\002\205\016\035\022" +
    "\170\026\221\027\200\030\165\031\202\036\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\205\016\035\022" +
    "\170\025\231\026\164\027\200\030\165\031\202\036\204" +
    "\001\001\000\024\002\205\016\035\022\170\025\227\026" +
    "\164\027\200\030\165\031\202\036\204\001\001\000\022" +
    "\002\205\016\035\022\170\026\221\027\200\030\165\031" +
    "\202\036\204\001\001\000\002\001\001\000\022\002\205" +
    "\016\035\022\170\026\221\027\200\030\165\031\202\036" +
    "\204\001\001\000\002\001\001\000\024\002\205\016\035" +
    "\022\170\025\234\026\164\027\200\030\165\031\202\036" +
    "\204\001\001\000\022\002\205\016\035\022\170\026\221" +
    "\027\200\030\165\031\202\036\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\035\022\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\035\022\207\001\001\000\002\001" +
    "\001\000\016\002\256\016\035\022\170\033\u0114\035\257" +
    "\036\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\372\016\035\022\170\034\373\036\252\001\001" +
    "\000\016\002\256\016\035\022\170\033\264\035\257\036" +
    "\261\001\001\000\006\016\035\022\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\327\016\035\022\170\001\001\000\002\001\001\000\014" +
    "\002\274\016\035\022\170\035\275\036\261\001\001\000" +
    "\010\002\270\016\035\022\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\035\022\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\035\022\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\311\016\035\022\170\001\001\000\002" +
    "\001\001\000\010\002\304\016\035\022\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\035\022\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\035\022\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\323\016\035\022\170\001\001" +
    "\000\010\002\321\016\035\022\170\001\001\000\002\001" +
    "\001\000\006\016\035\022\207\001\001\000\002\001\001" +
    "\000\006\016\035\022\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\035\022\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\002\256\016\035\022\170\033" +
    "\341\035\257\036\261\001\001\000\002\001\001\000\014" +
    "\002\274\016\035\022\170\035\275\036\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\351\016\035" +
    "\022\170\001\001\000\010\002\347\016\035\022\170\001" +
    "\001\000\002\001\001\000\006\016\035\022\207\001\001" +
    "\000\002\001\001\000\006\016\035\022\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\002\256\016\035\022\170\033\364\035" +
    "\257\036\261\001\001\000\016\002\256\016\035\022\170" +
    "\033\361\035\257\036\261\001\001\000\002\001\001\000" +
    "\014\002\274\016\035\022\170\035\275\036\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\274\016" +
    "\035\022\170\035\275\036\261\001\001\000\002\001\001" +
    "\000\016\002\256\016\035\022\170\033\367\035\257\036" +
    "\261\001\001\000\014\002\274\016\035\022\170\035\275" +
    "\036\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\035\022\207\001\001\000\002\001\001\000\016" +
    "\002\256\016\035\022\170\033\u0107\035\257\036\261\001" +
    "\001\000\002\001\001\000\016\002\256\016\035\022\170" +
    "\033\u0101\035\257\036\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\274\016\035\022\170\035\275" +
    "\036\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\274\016\035\022\170\035\275\036\261\001\001\000" +
    "\016\002\256\016\035\022\170\033\u010a\035\257\036\261" +
    "\001\001\000\002\001\001\000\014\002\274\016\035\022" +
    "\170\035\275\036\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\247\016\035\022\170\032\u0112\034\250" +
    "\036\252\001\001\000\016\002\256\016\035\022\170\033" +
    "\u0114\035\257\036\261\001\001\000\014\002\372\016\035" +
    "\022\170\034\373\036\252\001\001\000\002\001\001\000" +
    "\014\002\274\016\035\022\170\035\275\036\261\001\001" +
    "\000\002\001\001\000\016\002\256\016\035\022\170\033" +
    "\u0118\035\257\036\261\001\001\000\002\001\001\000\014" +
    "\002\274\016\035\022\170\035\275\036\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\002\247\016\035\022\170\032\u0123\034" +
    "\250\036\252\001\001\000\016\002\247\016\035\022\170" +
    "\032\u0120\034\250\036\252\001\001\000\016\002\256\016" +
    "\035\022\170\033\u0114\035\257\036\261\001\001\000\014" +
    "\002\372\016\035\022\170\034\373\036\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\372\016\035" +
    "\022\170\034\373\036\252\001\001\000\002\001\001\000" +
    "\016\002\247\016\035\022\170\032\u0126\034\250\036\252" +
    "\001\001\000\014\002\372\016\035\022\170\034\373\036" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\035\022\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$HtmlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$HtmlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$HtmlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private Document html;
  private final List<String> ids = new ArrayList<>();
  private final List<Action> actions = new ArrayList<>();

  public Document getHtml() {
    return html;
  }

  public HtmlParser(HtmlLexer lexer) {
    super(lexer);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$HtmlParser$actions {
  private final HtmlParser parser;

  /** Constructor */
  CUP$HtmlParser$actions(HtmlParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$HtmlParser$do_action_part00000000(
    int                        CUP$HtmlParser$act_num,
    java_cup.runtime.lr_parser CUP$HtmlParser$parser,
    java.util.Stack            CUP$HtmlParser$stack,
    int                        CUP$HtmlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$HtmlParser$result;

      /* select the action based on the action number */
      switch (CUP$HtmlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= syntax EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		RESULT = start_val;
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$HtmlParser$parser.done_parsing();
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // syntax ::= variables report 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("syntax",1, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // syntax ::= report 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("syntax",1, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // syntax ::= error report 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a sintaxis correcta en la definicion de variables", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("syntax",1, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // syntax ::= error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a sintaxis correcta de Report Markup Language", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("syntax",1, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variables ::= variables decl 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variables ::= variables assign 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variables ::= decl 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variables ::= assign 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ids ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ids.add(id); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("ids",2, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ids ::= ids COMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ids.add(id); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("ids",2, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decl ::= INTEGER int_assign 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl ::= STRING str_assign 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl ::= INTEGER ids SEPARADOR 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 for (String id : ids) SymbolsTable.getInst().add(id, 0, "Integer", typeleft, typeright); ids.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decl ::= STRING ids SEPARADOR 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 for (String id : ids) SymbolsTable.getInst().add(id, "", "String", typeleft, typeright); ids.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl ::= INTEGER ids error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <;>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decl ::= STRING ids error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <;>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decl ::= INTEGER error SEPARADOR 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <id> <=> o <id> <,> <id>..", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decl ::= STRING error SEPARADOR 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <id> <=> o <id> <,> <id>..", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assign ::= assign_ string SEPARADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 SymbolsTable.getInst().update((String) id, str, idleft, idright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("assign",5, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assign ::= assign_ LITERAL MAS string str_ SEPARADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).value;
		int str1left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).left;
		int str1right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).right;
		String str1 = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).value;
		int str2left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int str2right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object str2 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		int str3left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int str3right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object str3 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		
               SymbolsTable.getInst().update(
                       (String) id,
                       Concat.getInstance().concat(str1, str2, str3, str1left, str1right),
                       idleft, idright
               );
               
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("assign",5, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assign ::= assign_ LITERAL error string str_ SEPARADOR 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <+>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("assign",5, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assign ::= assign_ LITERAL MAS string error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <;>, <+>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("assign",5, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assign ::= error string SEPARADOR 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <=>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("assign",5, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assign ::= error LITERAL MAS string str_ SEPARADOR 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <=>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("assign",5, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assign_ ::= ID IGUAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 RESULT = id; 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("assign_",6, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // int_assign ::= assign_ expr SEPARADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 SymbolsTable.getInst().add((String) id, value, "Integer", idleft, idright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("int_assign",7, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // int_assign ::= assign_ error SEPARADOR 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <numero>, <id> o expresion matematica", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("int_assign",7, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // int_assign ::= assign_ expr error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <;>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("int_assign",7, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // int_assign ::= error expr SEPARADOR 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <=>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("int_assign",7, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // str_assign ::= assign_ str SEPARADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 SymbolsTable.getInst().add((String) id, value, "String", idleft, idright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("str_assign",8, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // str_assign ::= assign_ str error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <;> o <+>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("str_assign",8, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // str_assign ::= error str SEPARADOR 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <=>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("str_assign",8, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr MAS expr 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = Arithmetic.getInstance().add(val1, val2, val1left, val1right); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr MENOS expr 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = Arithmetic.getInstance().reduce(val1, val2, val1left, val1right); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr POR expr 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = Arithmetic.getInstance().times(val1, val2, val1left, val1right); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr DIV expr 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = Arithmetic.getInstance().div(val1, val2, val1left, val1right); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= PAR_IZQ expr PAR_DER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 RESULT = val1; 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= MENOS expr 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = Arithmetic.getInstance().reduce(0, val2, val2left, val2right); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= int 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = val1; 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // str ::= LITERAL str_ 
            {
              Object RESULT =null;
		int str1left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int str1right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		String str1 = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		int str2left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int str2right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object str2 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = Concat.getInstance().concat(str1, str2, str1left, str1right); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("str",10, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // str ::= result 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = str; 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("str",10, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // str_ ::= str_ MAS string 
            {
              Object RESULT =null;
		int str1left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int str1right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object str1 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		int str2left = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int str2right = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object str2 = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = Concat.getInstance().concat(str1, str2, str1left, str1right); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("str_",15, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // str_ ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("str_",15, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // string ::= LITERAL 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = new ConstantAction(value); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("string",11, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // string ::= expr 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = value; 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("string",11, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // string ::= error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <literal>, <numero>, <id> o expresion matematica", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("string",11, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // int ::= INT 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		int value = (int)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = value; 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("int",17, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // int ::= concat 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = value; 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("int",17, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // concat ::= result 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = value; 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("concat",16, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // concat ::= ID 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = new VariableAction(value, valueleft, valueright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("concat",16, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // result ::= RESULT PUNTO result_ 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 RESULT = ResultBuilder.getInst().getResult(getleft, getright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result",12, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // result ::= RESULT 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 RESULT = ResultBuilder.getInst().getResult(getleft, getright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result",12, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // result ::= RESULT error result_ 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <.>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result",12, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // result ::= RESULT PUNTO error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <id>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result",12, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // result_ ::= result__ 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result_",13, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // result_ ::= result_ PUNTO result__ 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result_",13, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // result_ ::= result_ PUNTO error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <id> o un <id> seguido de <[>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result_",13, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // result_ ::= error PUNTO result__ 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <id> o un <id> seguido de <[>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result_",13, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // result__ ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ResultBuilder.getInst().add(id, idleft, idright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result__",14, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // result__ ::= ID COR_IZQ expr COR_DER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ResultBuilder.getInst().add(id, i, idleft, idright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result__",14, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // result__ ::= ID COR_IZQ expr error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <]>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result__",14, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // result__ ::= ID COR_IZQ error COR_DER 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <numero>, expresion matematica o <id>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("result__",14, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // report ::= HTML_B tags HTML_E 
            {
              Object RESULT =null;
		 html = new Document(HtmlBuilder.getInst().getTags()); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("report",18, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // report ::= HTML_B HTML_E 
            {
              Object RESULT =null;
		 html = new Document(HtmlBuilder.getInst().getTags()); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("report",18, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // report ::= HTML_B tags error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </html>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("report",18, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // report ::= HTML_B error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a o mas etiquetas como <table>, <for>, <h1>, <h2>, <br> o una etiqueta </html>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("report",18, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tags ::= tags tags_ 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags",19, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tags ::= tags_ 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags",19, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tags_ ::= for 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",20, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tags_ ::= BR 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 HtmlBuilder.getInst().addTag(new BreakLine(), getleft, getright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",20, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tags_ ::= heading 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",20, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tags_ ::= table 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",20, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tags_ ::= data 
            {
              Object RESULT =null;
		 HtmlBuilder.getInst().addMultiTag(actions.toArray(new Action[0])); actions.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",20, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tags_ ::= error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a o mas etiquetas como <table>, <for>, <h1>, <h2> o <br>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",20, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tags_ ::= error TABLE_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta <table> antes de </table>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",20, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tags_ ::= error H1_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta <h1> antes de </h1>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",20, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tags_ ::= error H2_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta <h2> antes de </h2>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",20, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tags_ ::= TH_B error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta <table> antes de </table>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",20, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tags_ ::= TD_B error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta <table> antes de </table>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",20, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tags_ ::= TR_B error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta <table> antes de </table>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("tags_",20, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for ::= for__ ID SEPARADOR TAG_FOR tags FOR_E 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).right;
		String max = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).value;
		
             HtmlBuilder.getInst().addTag(new For(
                    HtmlBuilder.getInst().getTags(),
                    (VariableAction) min,
                    new VariableAction(max, maxleft, maxright)
             ), minleft, minright);
             
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for",21, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for ::= for__ error SEPARADOR TAG_FOR tags FOR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a variable despues de <hasta>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for",21, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for ::= for__ ID error TAG_FOR tags FOR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <;>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for",21, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // for ::= for__ ID SEPARADOR error tags FOR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <>> (cierre de la etiqueta)", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for",21, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // for_row ::= for__ ID SEPARADOR TAG_FOR rows FOR_E 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).right;
		String max = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).value;
		
             TableBuilder.getInst().addFor(new For(
                    TableBuilder.getInst().getRows(),
                    (VariableAction) min,
                    new VariableAction(max, maxleft, maxright)
             ), true, minleft, minright);
             
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for_row",26, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // for_row ::= for__ error SEPARADOR TAG_FOR rows FOR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a variable despues de <hasta>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for_row",26, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_row ::= for__ ID error TAG_FOR rows FOR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <;>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for_row",26, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // for_row ::= for__ ID SEPARADOR error rows FOR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <>> (cierre de la etiqueta)", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for_row",26, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_row ::= for__ ID SEPARADOR TAG_FOR error FOR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a o mas etiquetas <tr>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for_row",26, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_row_ ::= for__ ID SEPARADOR TAG_FOR rows_ FOR_E 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).right;
		String max = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).value;
		
             TableBuilder.getInst().addFor(new For(
                    TableBuilder.getInst().getCells(),
                    (VariableAction) min,
                    new VariableAction(max, maxleft, maxright)
             ), false, minleft, minright);
             
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for_row_",27, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // for_row_ ::= for__ error SEPARADOR TAG_FOR rows_ FOR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a variable despues de <hasta>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for_row_",27, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // for_row_ ::= for__ ID error TAG_FOR rows_ FOR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <;>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for_row_",27, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // for_row_ ::= for__ ID SEPARADOR error rows_ FOR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <>> (cierre de la etiqueta)", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for_row_",27, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // for_row_ ::= for__ ID SEPARADOR TAG_FOR error FOR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a o mas etiquetas <td> o <th>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for_row_",27, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // for__ ::= FOR_B ITERADOR ID HASTA 
            {
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 HtmlBuilder.getInst().increaseForLevel(); TableBuilder.getInst().increaseForLevel();
             RESULT = new VariableAction(key, keyleft, keyright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for__",28, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // for__ ::= FOR_B error ID HASTA 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <iterador> seguido de <:>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for__",28, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for__ ::= FOR_B ITERADOR error HASTA 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a variable despues de <iterador:>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for__",28, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // for__ ::= FOR_B ITERADOR ID error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" <hasta> seguido de <:>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("for__",28, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // heading ::= H1_B data H1_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 HtmlBuilder.getInst().addTag(new Heading(actions.toArray(new Action[0]), true), getleft, getright); actions.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("heading",22, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // heading ::= H2_B data H2_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 HtmlBuilder.getInst().addTag(new Heading(actions.toArray(new Action[0]), false), getleft, getright); actions.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("heading",22, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // heading ::= H1_B H1_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 HtmlBuilder.getInst().addTag(new Heading(actions.toArray(new Action[0]), true), getleft, getright); actions.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("heading",22, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // heading ::= H2_B H2_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 HtmlBuilder.getInst().addTag(new Heading(actions.toArray(new Action[0]), false), getleft, getright); actions.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("heading",22, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // heading ::= H1_B error H1_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" texto y/o variables", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("heading",22, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // heading ::= H2_B error H2_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" texto y/o variables", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("heading",22, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // heading ::= H1_B data error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </h1>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("heading",22, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // heading ::= H2_B data error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </h2>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("heading",22, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // table ::= TABLE_B rows TABLE_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 HtmlBuilder.getInst().addTag(new Table(TableBuilder.getInst().getRows()), getleft, getright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("table",23, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // table ::= TABLE_B TABLE_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 HtmlBuilder.getInst().addTag(new Table(TableBuilder.getInst().getRows()), getleft, getright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("table",23, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // table ::= TABLE_B error TABLE_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a o mas lineas con columnas", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("table",23, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // rows ::= rows TR_B rows_ TR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 TableBuilder.getInst().add(new Row(TableBuilder.getInst().getCells()), getleft, getright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // rows ::= rows TR_B TR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 TableBuilder.getInst().add(new Row(TableBuilder.getInst().getCells()), getleft, getright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // rows ::= rows for_row 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // rows ::= rows data 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // rows ::= TR_B rows_ TR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 TableBuilder.getInst().add(new Row(TableBuilder.getInst().getCells()), getleft, getright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // rows ::= TR_B TR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 TableBuilder.getInst().add(new Row(TableBuilder.getInst().getCells()), getleft, getright); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // rows ::= for_row 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // rows ::= data 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // rows ::= rows TR_B error TR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a columna bien definida", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // rows ::= rows TR_B rows_ error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </tr>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // rows ::= rows TR_B error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </tr> o columna bien definida", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // rows ::= rows error TR_B rows_ TR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a linea bien definida", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // rows ::= rows error TR_B TR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a linea bien definida", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // rows ::= rows error rows_ TR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta <tr>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // rows ::= rows error TR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta <tr>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // rows ::= rows error FOR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta <for>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // rows ::= TR_B error TR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a columna bien definida", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // rows ::= TR_B rows_ error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </tr>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // rows ::= TR_B error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </tr> o columna bien definida", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // rows ::= error TR_B rows_ TR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a linea bien definida", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // rows ::= error TR_B TR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a linea bien definida", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // rows ::= error rows_ TR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta <tr>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // rows ::= error TR_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta <tr>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows",24, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // rows_ ::= rows_ TH_B data TH_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 TableBuilder.getInst().add(new Cell(actions.toArray(new Action[0]), true), getleft, getright); actions.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // rows_ ::= rows_ TD_B data TD_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 TableBuilder.getInst().add(new Cell(actions.toArray(new Action[0]), false), getleft, getright); actions.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // rows_ ::= rows_ TH_B TH_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 TableBuilder.getInst().add(new Cell(actions.toArray(new Action[0]), true), getleft, getright); actions.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // rows_ ::= rows_ TD_B TD_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 TableBuilder.getInst().add(new Cell(actions.toArray(new Action[0]), false), getleft, getright); actions.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // rows_ ::= rows_ for_row_ 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // rows_ ::= rows_ data 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // rows_ ::= TH_B data TH_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 TableBuilder.getInst().add(new Cell(actions.toArray(new Action[0]), true), getleft, getright); actions.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // rows_ ::= TD_B data TD_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 TableBuilder.getInst().add(new Cell(actions.toArray(new Action[0]), false), getleft, getright); actions.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // rows_ ::= TH_B TH_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 TableBuilder.getInst().add(new Cell(actions.toArray(new Action[0]), true), getleft, getright); actions.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // rows_ ::= TD_B TD_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 TableBuilder.getInst().add(new Cell(actions.toArray(new Action[0]), false), getleft, getright); actions.clear(); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // rows_ ::= for_row_ 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // rows_ ::= data 
            {
              Object RESULT =null;

              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // rows_ ::= rows_ TH_B error TH_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" texto y/o variables", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // rows_ ::= rows_ TD_B error TD_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" texto y/o variables", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // rows_ ::= rows_ TH_B data error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </th>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // rows_ ::= rows_ TD_B data error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </td>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // rows_ ::= rows_ TH_B error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </th>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // rows_ ::= rows_ TD_B error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </td>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // rows_ ::= rows_ error TH_B data TH_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </td>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // rows_ ::= rows_ error TD_B data TD_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </td>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-4)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // rows_ ::= rows_ error TH_B TH_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </td>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // rows_ ::= rows_ error TD_B TD_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </td>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // rows_ ::= TH_B error TH_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" texto y/o variables", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // rows_ ::= TD_B error TD_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException(" texto y/o variables", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // rows_ ::= TH_B data error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </th>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // rows_ ::= TD_B data error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </td>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // rows_ ::= TH_B error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </th>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // rows_ ::= TD_B error 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </td>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // rows_ ::= error TH_B data TH_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </td>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // rows_ ::= error TD_B data TD_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </td>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // rows_ ::= error TH_B TH_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </td>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // rows_ ::= error TD_B TD_E 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).left;
		int getright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)).value;
		 ErrorsReportBuilder.add(new UnexpectedTokenException("a etiqueta </td>", getleft, getright)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("rows_",25, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // data ::= data TEXT 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 actions.add(new ConstantAction(str)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("data",0, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // data ::= data concat 
            {
              String RESULT =null;
		int actleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int actright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 actions.add((Action) act); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("data",0, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.elementAt(CUP$HtmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // data ::= TEXT 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 actions.add(new ConstantAction(str)); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("data",0, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // data ::= concat 
            {
              String RESULT =null;
		int actleft = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).left;
		int actright = ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$HtmlParser$stack.peek()).value;
		 actions.add((Action) act); 
              CUP$HtmlParser$result = parser.getSymbolFactory().newSymbol("data",0, ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HtmlParser$stack.peek()), RESULT);
            }
          return CUP$HtmlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$HtmlParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$HtmlParser$do_action(
    int                        CUP$HtmlParser$act_num,
    java_cup.runtime.lr_parser CUP$HtmlParser$parser,
    java.util.Stack            CUP$HtmlParser$stack,
    int                        CUP$HtmlParser$top)
    throws java.lang.Exception
    {
              return CUP$HtmlParser$do_action_part00000000(
                               CUP$HtmlParser$act_num,
                               CUP$HtmlParser$parser,
                               CUP$HtmlParser$stack,
                               CUP$HtmlParser$top);
    }
}

}
